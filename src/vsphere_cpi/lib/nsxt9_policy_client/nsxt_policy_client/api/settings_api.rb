=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept end user license agreement 
    # Accept end user license agreement 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def accept_eula(opts = {})
      accept_eula_with_http_info(opts)
      nil
    end

    # Accept end user license agreement 
    # Accept end user license agreement 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def accept_eula_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.accept_eula ...'
      end
      # resource path
      local_var_path = '/eula/accept'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#accept_eula\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_custom_signatures(version_id, ids_raw_signatures, action, opts = {})
      add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts)
      nil
    end

    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.add_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.add_custom_signatures"
      end
      # verify the required parameter 'ids_raw_signatures' is set
      if @api_client.config.client_side_validation && ids_raw_signatures.nil?
        fail ArgumentError, "Missing the required parameter 'ids_raw_signatures' when calling SettingsApi.add_custom_signatures"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SettingsApi.add_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_CUSTOM_SIGNATURES'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_CUSTOM_SIGNATURES"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_raw_signatures)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#add_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_custom_signatures_action(version_id, custom_signature_validation_payload, action, opts = {})
      apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts)
      nil
    end

    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.apply_custom_signatures_action ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'custom_signature_validation_payload' is set
      if @api_client.config.client_side_validation && custom_signature_validation_payload.nil?
        fail ArgumentError, "Missing the required parameter 'custom_signature_validation_payload' when calling SettingsApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SettingsApi.apply_custom_signatures_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CANCEL', 'PUBLISH', 'VALIDATE'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CANCEL, PUBLISH, VALIDATE"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(custom_signature_validation_payload)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#apply_custom_signatures_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Trigger to query VCF licenses from all registered vCenters asynchronous 
    # Trigger to query VCF licenses from all registered vCenters and update licenses in NSX in an asynchronous manner. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def async_vcf_licenses(opts = {})
      async_vcf_licenses_with_http_info(opts)
      nil
    end

    # Trigger to query VCF licenses from all registered vCenters asynchronous 
    # Trigger to query VCF licenses from all registered vCenters and update licenses in NSX in an asynchronous manner. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def async_vcf_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.async_vcf_licenses ...'
      end
      # resource path
      local_var_path = '/licenses/vcf/action/async'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#async_vcf_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clone an already present role
    # The role with id &lt;role&gt; is cloned and the new id, name and description are the ones provided in the request body. 
    # @param role Role id
    # @param new_role 
    # @param [Hash] opts the optional parameters
    # @return [NewRole]
    def clone_role(role, new_role, opts = {})
      data, _status_code, _headers = clone_role_with_http_info(role, new_role, opts)
      data
    end

    # Clone an already present role
    # The role with id &amp;lt;role&amp;gt; is cloned and the new id, name and description are the ones provided in the request body. 
    # @param role Role id
    # @param new_role 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NewRole, Fixnum, Hash)>] NewRole data, response status code and response headers
    def clone_role_with_http_info(role, new_role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.clone_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling SettingsApi.clone_role"
      end
      # verify the required parameter 'new_role' is set
      if @api_client.config.client_side_validation && new_role.nil?
        fail ArgumentError, "Missing the required parameter 'new_role' when calling SettingsApi.clone_role"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}?action=clone'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(new_role)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NewRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#clone_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def create_or_patch_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_patch_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.create_or_patch_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling SettingsApi.create_or_patch_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_patch_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_patch_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_patch_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SettingsApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_patch_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def create_or_replace_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_replace_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.create_or_replace_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling SettingsApi.create_or_replace_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_replace_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def create_or_replace_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_replace_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling SettingsApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_replace_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_replace_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_replace_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SettingsApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_replace_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def create_or_update_global_ids_signature(signature_id, global_ids_signature, opts = {})
      data, _status_code, _headers = create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      data
    end

    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.create_or_update_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling SettingsApi.create_or_update_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def create_or_update_ids_cluster_config(cluster_config_id, ids_cluster_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts)
      data
    end

    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def create_or_update_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling SettingsApi.create_or_update_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling SettingsApi.create_or_update_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def create_or_update_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      data
    end

    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling SettingsApi.create_or_update_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SettingsApi.create_or_update_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SettingsApi.create_or_update_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update an LDAP identity source
    # Create a new LDAP identity source or update the configuration of an existing LDAP identity source. You may wish to verify the new configuration using the POST /aaa/ldap-identity-sources?action=probe API before creating or changing the configuration. Note that if you are using LDAP on an active and standby NSX-T Global Manager in a federated environment, you must use the same name for your LDAP identity sources on the active and standby Global Managers.
    # @param ldap_identity_source_id 
    # @param ldap_identity_source 
    # @param [Hash] opts the optional parameters
    # @return [LdapIdentitySource]
    def create_or_update_ldap_identity_source(ldap_identity_source_id, ldap_identity_source, opts = {})
      data, _status_code, _headers = create_or_update_ldap_identity_source_with_http_info(ldap_identity_source_id, ldap_identity_source, opts)
      data
    end

    # Create or update an LDAP identity source
    # Create a new LDAP identity source or update the configuration of an existing LDAP identity source. You may wish to verify the new configuration using the POST /aaa/ldap-identity-sources?action&#x3D;probe API before creating or changing the configuration. Note that if you are using LDAP on an active and standby NSX-T Global Manager in a federated environment, you must use the same name for your LDAP identity sources on the active and standby Global Managers.
    # @param ldap_identity_source_id 
    # @param ldap_identity_source 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapIdentitySource, Fixnum, Hash)>] LdapIdentitySource data, response status code and response headers
    def create_or_update_ldap_identity_source_with_http_info(ldap_identity_source_id, ldap_identity_source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_ldap_identity_source ...'
      end
      # verify the required parameter 'ldap_identity_source_id' is set
      if @api_client.config.client_side_validation && ldap_identity_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source_id' when calling SettingsApi.create_or_update_ldap_identity_source"
      end
      # verify the required parameter 'ldap_identity_source' is set
      if @api_client.config.client_side_validation && ldap_identity_source.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source' when calling SettingsApi.create_or_update_ldap_identity_source"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources/{ldap-identity-source-id}'.sub('{' + 'ldap-identity-source-id' + '}', ldap_identity_source_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ldap_identity_source)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapIdentitySource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_ldap_identity_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update custom role
    # Creates a new role with id as &lt;role&gt; if there does not exist any role with id &lt;role&gt;, else updates the existing role. Permissions for features marked is_internal as true will be ignored if provided in request payload. These features' permission are set internally. 
    # @param role Custom role id
    # @param role_with_features 
    # @param [Hash] opts the optional parameters
    # @return [RoleWithFeatures]
    def create_or_update_role(role, role_with_features, opts = {})
      data, _status_code, _headers = create_or_update_role_with_http_info(role, role_with_features, opts)
      data
    end

    # Update custom role
    # Creates a new role with id as &amp;lt;role&amp;gt; if there does not exist any role with id &amp;lt;role&amp;gt;, else updates the existing role. Permissions for features marked is_internal as true will be ignored if provided in request payload. These features&#39; permission are set internally. 
    # @param role Custom role id
    # @param role_with_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleWithFeatures, Fixnum, Hash)>] RoleWithFeatures data, response status code and response headers
    def create_or_update_role_with_http_info(role, role_with_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling SettingsApi.create_or_update_role"
      end
      # verify the required parameter 'role_with_features' is set
      if @api_client.config.client_side_validation && role_with_features.nil?
        fail ArgumentError, "Missing the required parameter 'role_with_features' when calling SettingsApi.create_or_update_role"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_with_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def create_or_update_role_binding_multitenancy_project(org_id, project_id, role_binding, opts = {})
      data, _status_code, _headers = create_or_update_role_binding_multitenancy_project_with_http_info(org_id, project_id, role_binding, opts)
      data
    end

    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def create_or_update_role_binding_multitenancy_project_with_http_info(org_id, project_id, role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_role_binding_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.create_or_update_role_binding_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.create_or_update_role_binding_multitenancy_project"
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling SettingsApi.create_or_update_role_binding_multitenancy_project"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_role_binding_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def create_or_update_role_binding_multitenancy_vpc(org_id, project_id, vpc_id, role_binding, opts = {})
      data, _status_code, _headers = create_or_update_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, role_binding, opts)
      data
    end

    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice on CSP. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def create_or_update_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_role_binding_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SettingsApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling SettingsApi.create_or_update_role_binding_multitenancy_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_role_binding_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def create_or_update_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SettingsApi.create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def create_or_update_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SettingsApi.create_or_update_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling SettingsApi.create_or_update_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_or_update_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SettingsApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SettingsApi.create_or_update_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_or_update_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create registration access token
    # The privileges of the registration token will be the same as the caller.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def create_registration_token(opts = {})
      data, _status_code, _headers = create_registration_token_with_http_info(opts)
      data
    end

    # Create registration access token
    # The privileges of the registration token will be the same as the caller.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def create_registration_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_registration_token ...'
      end
      # resource path
      local_var_path = '/aaa/registration-token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def create_role_binding(role_binding, opts = {})
      data, _status_code, _headers = create_role_binding_with_http_info(role_binding, opts)
      data
    end

    # Assign roles to User or Group
    # This API is used to assign a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. 
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def create_role_binding_with_http_info(role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_role_binding ...'
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling SettingsApi.create_role_binding"
      end
      # resource path
      local_var_path = '/aaa/role-bindings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create sensor registration access token
    # The privileges of the registration token will be user with sensor role.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def create_sensor_registration_token(opts = {})
      data, _status_code, _headers = create_sensor_registration_token_with_http_info(opts)
      data
    end

    # Create sensor registration access token
    # The privileges of the registration token will be user with sensor role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def create_sensor_registration_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.create_sensor_registration_token ...'
      end
      # resource path
      local_var_path = '/security/sensor-registration-token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#create_sensor_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all stale role assignments
    # Delete all stale role assignments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_all_stale_role_bindings(opts = {})
      delete_all_stale_role_bindings_with_http_info(opts)
      nil
    end

    # Delete all stale role assignments
    # Delete all stale role assignments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_all_stale_role_bindings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_all_stale_role_bindings ...'
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_all_stale_role_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_all_stale_role_bindings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings?action=delete_stale_bindings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_all_stale_role_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_cluster_idfw_configuration(cluster_id, opts = {})
      delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      nil
    end

    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SettingsApi.delete_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_draft(draft_id, opts = {})
      delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.delete_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store(firewall_identity_store_id, opts = {})
      delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.delete_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.delete_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.delete_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.delete_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.delete_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_global_ids_signature(signature_id, opts = {})
      delete_global_ids_signature_with_http_info(signature_id, opts)
      nil
    end

    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.delete_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_signature_threshold_config(signature_id, opts = {})
      delete_ids_signature_threshold_config_with_http_info(signature_id, opts)
      nil
    end

    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.delete_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an LDAP identity source
    # Delete an LDAP identity source. Users defined in that source will no longer be able to access NSX.
    # @param ldap_identity_source_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ldap_identity_source(ldap_identity_source_id, opts = {})
      delete_ldap_identity_source_with_http_info(ldap_identity_source_id, opts)
      nil
    end

    # Delete an LDAP identity source
    # Delete an LDAP identity source. Users defined in that source will no longer be able to access NSX.
    # @param ldap_identity_source_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ldap_identity_source_with_http_info(ldap_identity_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_ldap_identity_source ...'
      end
      # verify the required parameter 'ldap_identity_source_id' is set
      if @api_client.config.client_side_validation && ldap_identity_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source_id' when calling SettingsApi.delete_ldap_identity_source"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources/{ldap-identity-source-id}'.sub('{' + 'ldap-identity-source-id' + '}', ldap_identity_source_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_ldap_identity_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete object-permissions entries
    # Delete object-permissions entries
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :inheritance_disabled Does children of this object inherit this rule (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path_prefix Path prefix
    # @option opts [String] :role_name Role name
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def delete_object_permissions(opts = {})
      delete_object_permissions_with_http_info(opts)
      nil
    end

    # Delete object-permissions entries
    # Delete object-permissions entries
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :inheritance_disabled Does children of this object inherit this rule
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path_prefix Path prefix
    # @option opts [String] :role_name Role name
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_object_permissions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_object_permissions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_object_permissions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_object_permissions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/object-permissions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'inheritance_disabled'] = opts[:'inheritance_disabled'] if !opts[:'inheritance_disabled'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path_prefix'] = opts[:'path_prefix'] if !opts[:'path_prefix'].nil?
      query_params[:'role_name'] = opts[:'role_name'] if !opts[:'role_name'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_object_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete registration access token
    # Delete registration access token <br> Use API POST /api/v1/aaa/registration-token/delete
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_token(token, opts = {})
      delete_registration_token_with_http_info(token, opts)
      nil
    end

    # Delete registration access token
    # Delete registration access token &lt;br&gt; Use API POST /api/v1/aaa/registration-token/delete
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_registration_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling SettingsApi.delete_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom role
    # If a role is assigned to a role binding then the deletion of the role is not allowed. Precanned roles cannot be deleted. 
    # @param role Custom role id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role(role, opts = {})
      delete_role_with_http_info(role, opts)
      nil
    end

    # Delete custom role
    # If a role is assigned to a role binding then the deletion of the role is not allowed. Precanned roles cannot be deleted. 
    # @param role Custom role id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_with_http_info(role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling SettingsApi.delete_role"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user/group's roles assignment
    # Delete the user/group's role assignment. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. For deleting multiple paths, please provide semi-colon ';' separated paths in the request parameter. 
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_role_binding(binding_id, opts = {})
      delete_role_binding_with_http_info(binding_id, opts)
      nil
    end

    # Delete user/group&#39;s roles assignment
    # Delete the user/group&#39;s role assignment. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. For deleting multiple paths, please provide semi-colon &#39;;&#39; separated paths in the request parameter. 
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_binding_with_http_info(binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_role_binding ...'
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.delete_role_binding"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_role_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_role_binding, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings/{binding-id}'.sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user/group's roles assignment
    # Delete the user/group's role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_role_binding_multitenancy_project(org_id, project_id, binding_id, opts = {})
      delete_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts)
      nil
    end

    # Delete user/group&#39;s roles assignment
    # Delete the user/group&#39;s role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_role_binding_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.delete_role_binding_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.delete_role_binding_multitenancy_project"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.delete_role_binding_multitenancy_project"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_role_binding_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_role_binding_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_role_binding_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user/group's roles assignment
    # Delete the user/group's role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [nil]
    def delete_role_binding_multitenancy_vpc(org_id, project_id, vpc_id, binding_id, opts = {})
      delete_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts)
      nil
    end

    # Delete user/group&#39;s roles assignment
    # Delete the user/group&#39;s role assignment on CSP. If the path is provided then deletes only the roles_for_paths that matches the path. If path is provided for the last roles_for_paths then the whole role binding is deleted provided it is not that of a local user. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_role_binding_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.delete_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.delete_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SettingsApi.delete_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.delete_role_binding_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_role_binding_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_role_binding_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_role_binding_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  <br> Use the following API PUT/PATCH  /infra/tier-0s/<tier-0-id>/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def delete_tier0_security_feature(tier_0_id, opts = {})
      delete_tier0_security_feature_with_http_info(tier_0_id, opts)
      nil
    end

    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  &lt;br&gt; Use the following API PUT/PATCH  /infra/tier-0s/&lt;tier-0-id&gt;/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.delete_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SettingsApi.delete_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.delete_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#delete_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Synchronize VCF licenses from all registered vCenters 
    # Synchronize VCF licenses from all registered vCenters and update licenses in NSX. This API will not return synchronized VCF licenses and just update them in NSX. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deprecated_sync_vcf_licenses(opts = {})
      deprecated_sync_vcf_licenses_with_http_info(opts)
      nil
    end

    # Synchronize VCF licenses from all registered vCenters 
    # Synchronize VCF licenses from all registered vCenters and update licenses in NSX. This API will not return synchronized VCF licenses and just update them in NSX. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deprecated_sync_vcf_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.deprecated_sync_vcf_licenses ...'
      end
      # resource path
      local_var_path = '/licenses/vcf-licenses'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#deprecated_sync_vcf_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_ids_custom_signatures(version_id, include, opts = {})
      export_ids_custom_signatures_with_http_info(version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_custom_signatures_with_http_info(version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.export_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling SettingsApi.export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units(directory_ldap_server, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts)
      data
    end

    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.fetch_firewall_identity_store_org_units ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SettingsApi.fetch_firewall_identity_store_org_units"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores-org-units'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#fetch_firewall_identity_store_org_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units_for_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.fetch_firewall_identity_store_org_units_for_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.fetch_firewall_identity_store_org_units_for_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/org-units'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#fetch_firewall_identity_store_org_units_for_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch the server certificate of an LDAP server
    # Attempt to connect to an LDAP server and retrieve the server certificate it presents.
    # @param identity_source_ldap_server_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [PeerCertificateChain]
    def fetch_identity_source_ldap_server_certificate(identity_source_ldap_server_endpoint, opts = {})
      data, _status_code, _headers = fetch_identity_source_ldap_server_certificate_with_http_info(identity_source_ldap_server_endpoint, opts)
      data
    end

    # Fetch the server certificate of an LDAP server
    # Attempt to connect to an LDAP server and retrieve the server certificate it presents.
    # @param identity_source_ldap_server_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerCertificateChain, Fixnum, Hash)>] PeerCertificateChain data, response status code and response headers
    def fetch_identity_source_ldap_server_certificate_with_http_info(identity_source_ldap_server_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.fetch_identity_source_ldap_server_certificate ...'
      end
      # verify the required parameter 'identity_source_ldap_server_endpoint' is set
      if @api_client.config.client_side_validation && identity_source_ldap_server_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'identity_source_ldap_server_endpoint' when calling SettingsApi.fetch_identity_source_ldap_server_certificate"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources?action=fetch_certificate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_source_ldap_server_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerCertificateChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#fetch_identity_source_ldap_server_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling SettingsApi.filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users and groups with their roles
    # Get all users and groups with their roles. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBindingListResult]
    def get_all_role_bindings(opts = {})
      data, _status_code, _headers = get_all_role_bindings_with_http_info(opts)
      data
    end

    # Get all users and groups with their roles
    # Get all users and groups with their roles. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBindingListResult, Fixnum, Hash)>] RoleBindingListResult data, response status code and response headers
    def get_all_role_bindings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_all_role_bindings ...'
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_all_role_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_all_role_bindings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_all_role_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles
    # Get information about all roles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleListResult]
    def get_all_roles_info(opts = {})
      data, _status_code, _headers = get_all_roles_info_with_http_info(opts)
      data
    end

    # Get information about all roles
    # Get information about all roles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleListResult, Fixnum, Hash)>] RoleListResult data, response status code and response headers
    def get_all_roles_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_all_roles_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_all_roles_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_all_roles_info, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['ROOT', 'ORG', 'PROJECT', 'VPC'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ROOT, ORG, PROJECT, VPC'
      end
      # resource path
      local_var_path = '/aaa/roles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_all_roles_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get status of asynchronous query operation
    # Get status of asynchronous VCF licenses query operation. 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationStatus]
    def get_async_vcf_licenses_status(opts = {})
      data, _status_code, _headers = get_async_vcf_licenses_status_with_http_info(opts)
      data
    end

    # Get status of asynchronous query operation
    # Get status of asynchronous VCF licenses query operation. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationStatus, Fixnum, Hash)>] AsyncOperationStatus data, response status code and response headers
    def get_async_vcf_licenses_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_async_vcf_licenses_status ...'
      end
      # resource path
      local_var_path = '/licenses/vcf/action/async/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_async_vcf_licenses_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def get_compute_cluster_idfw_configuration(cluster_id, opts = {})
      data, _status_code, _headers = get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      data
    end

    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SettingsApi.get_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the name and role information of the user.
    # This API will return the name and role information of the user invoking this API request. This API is available for all NSX users no matter their authentication method (Local account, VIDM, LDAP etc). The permissions parameter of the NsxRole has been deprecated. The request parameter root_path has been introduced for multi-tenancy to get user's role at any path that the user desires. The response will contain the roles_for_paths to indicate roles at various paths. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provide_flat_listing Whether the output provides flat listing of all roles at each level or not (default to false)
    # @option opts [String] :root_path Prefix path of the context
    # @return [UserInfo]
    def get_current_user_info(opts = {})
      data, _status_code, _headers = get_current_user_info_with_http_info(opts)
      data
    end

    # Get the name and role information of the user.
    # This API will return the name and role information of the user invoking this API request. This API is available for all NSX users no matter their authentication method (Local account, VIDM, LDAP etc). The permissions parameter of the NsxRole has been deprecated. The request parameter root_path has been introduced for multi-tenancy to get user&#39;s role at any path that the user desires. The response will contain the roles_for_paths to indicate roles at various paths. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provide_flat_listing Whether the output provides flat listing of all roles at each level or not
    # @option opts [String] :root_path Prefix path of the context
    # @return [Array<(UserInfo, Fixnum, Hash)>] UserInfo data, response status code and response headers
    def get_current_user_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_current_user_info ...'
      end
      # resource path
      local_var_path = '/aaa/user-info'

      # query parameters
      query_params = {}
      query_params[:'provide_flat_listing'] = opts[:'provide_flat_listing'] if !opts[:'provide_flat_listing'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_current_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def get_dfw_firewall_configuration(opts = {})
      data, _status_code, _headers = get_dfw_firewall_configuration_with_http_info(opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def get_dfw_firewall_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_dfw_firewall_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of distributed firewall dependent services
    # Get the list of distributed firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [DependentServices]
    def get_distributed_firewall_dependent_services(opts = {})
      data, _status_code, _headers = get_distributed_firewall_dependent_services_with_http_info(opts)
      data
    end

    # Get the list of distributed firewall dependent services
    # Get the list of distributed firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependentServices, Fixnum, Hash)>] DependentServices data, response status code and response headers
    def get_distributed_firewall_dependent_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_distributed_firewall_dependent_services ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/dependent-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DependentServices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_distributed_firewall_dependent_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the acceptance status of end user license agreement 
    # Return the acceptance status of end user license agreement 
    # @param [Hash] opts the optional parameters
    # @return [EULAAcceptance]
    def get_eula_acceptance(opts = {})
      data, _status_code, _headers = get_eula_acceptance_with_http_info(opts)
      data
    end

    # Return the acceptance status of end user license agreement 
    # Return the acceptance status of end user license agreement 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EULAAcceptance, Fixnum, Hash)>] EULAAcceptance data, response status code and response headers
    def get_eula_acceptance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_eula_acceptance ...'
      end
      # resource path
      local_var_path = '/eula/acceptance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EULAAcceptance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_eula_acceptance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the content of end user license agreement 
    # Return the content of end user license agreement in the specified format. By default, it's pure string without line break 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :value_format End User License Agreement content output format
    # @return [EULAContent]
    def get_eula_content(opts = {})
      data, _status_code, _headers = get_eula_content_with_http_info(opts)
      data
    end

    # Return the content of end user license agreement 
    # Return the content of end user license agreement in the specified format. By default, it&#39;s pure string without line break 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :value_format End User License Agreement content output format
    # @return [Array<(EULAContent, Fixnum, Hash)>] EULAContent data, response status code and response headers
    def get_eula_content_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_eula_content ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_eula_content, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_eula_content, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/eula/content'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'value_format'] = opts[:'value_format'] if !opts[:'value_format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EULAContent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_eula_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateway firewall dependent services
    # Get the list of gateway firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [DependentServices]
    def get_gateway_firewall_dependent_services(opts = {})
      data, _status_code, _headers = get_gateway_firewall_dependent_services_with_http_info(opts)
      data
    end

    # Get the list of gateway firewall dependent services
    # Get the list of gateway firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependentServices, Fixnum, Hash)>] DependentServices data, response status code and response headers
    def get_gateway_firewall_dependent_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_gateway_firewall_dependent_services ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/gateway/dependent-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DependentServices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_gateway_firewall_dependent_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SettingsApi.get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def get_global_ids_signature(signature_id, opts = {})
      data, _status_code, _headers = get_global_ids_signature_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def get_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.get_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the group of interest more characters need to be entered.
    # Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the group of interest more characters need to be entered. <br> vIDM is deprecated by vIDB.  Use API POST /api/v1/trust-management/oidc-uris/{id}/search.
    # @param search_string Search string to search for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VidmInfoListResult]
    def get_group_vidm_search_result(search_string, opts = {})
      data, _status_code, _headers = get_group_vidm_search_result_with_http_info(search_string, opts)
      data
    end

    # Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the group of interest more characters need to be entered.
    # Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the group of interest more characters need to be entered. &lt;br&gt; vIDM is deprecated by vIDB.  Use API POST /api/v1/trust-management/oidc-uris/{id}/search.
    # @param search_string Search string to search for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VidmInfoListResult, Fixnum, Hash)>] VidmInfoListResult data, response status code and response headers
    def get_group_vidm_search_result_with_http_info(search_string, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_group_vidm_search_result ...'
      end
      # verify the required parameter 'search_string' is set
      if @api_client.config.client_side_validation && search_string.nil?
        fail ArgumentError, "Missing the required parameter 'search_string' when calling SettingsApi.get_group_vidm_search_result"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_group_vidm_search_result, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_group_vidm_search_result, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/vidm/groups'

      # query parameters
      query_params = {}
      query_params[:'search_string'] = search_string
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VidmInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_group_vidm_search_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling SettingsApi.get_group_vm_details"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionStatus]
    def get_idfw_status_for_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_idfw_status_for_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling SettingsApi.get_idfw_status_for_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_idfw_status_for_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionListResult]
    def get_idfw_status_for_all_compute_collections(opts = {})
      data, _status_code, _headers = get_idfw_status_for_all_compute_collections_with_http_info(opts)
      data
    end

    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def get_idfw_status_for_all_compute_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_idfw_status_for_all_compute_collections ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_idfw_status_for_all_compute_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_config_id User entered ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsClusterConfig]
    def get_ids_cluster_config(cluster_config_id, opts = {})
      data, _status_code, _headers = get_ids_cluster_config_with_http_info(cluster_config_id, opts)
      data
    end

    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_config_id User entered ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def get_ids_cluster_config_with_http_info(cluster_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling SettingsApi.get_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def get_ids_custom_signature(version_id, sig_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_with_http_info(version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def get_ids_custom_signature_with_http_info(version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_custom_signature ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling SettingsApi.get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def get_ids_custom_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def get_ids_custom_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def get_ids_custom_signatures_diff(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signatures_diff_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def get_ids_custom_signatures_diff_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSignatureStatus]
    def get_ids_signature_status(opts = {})
      data, _status_code, _headers = get_ids_signature_status_with_http_info(opts)
      data
    end

    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSignatureStatus, Fixnum, Hash)>] IdsSignatureStatus data, response status code and response headers
    def get_ids_signature_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_signature_status ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_signature_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def get_ids_signature_threshold_config(signature_id, opts = {})
      data, _status_code, _headers = get_ids_signature_threshold_config_with_http_info(signature_id, opts)
      data
    end

    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def get_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.get_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSignatureVersion]
    def get_ids_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSignatureVersion, Fixnum, Hash)>] IdsSignatureVersion data, response status code and response headers
    def get_ids_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.get_ids_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureVersionListResult]
    def get_ids_signature_versions(opts = {})
      data, _status_code, _headers = get_ids_signature_versions_with_http_info(opts)
      data
    end

    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureVersionListResult, Fixnum, Hash)>] IdsSignatureVersionListResult data, response status code and response headers
    def get_ids_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_ids_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_ids_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def get_ids_standalone_host_config(opts = {})
      data, _status_code, _headers = get_ids_standalone_host_config_with_http_info(opts)
      data
    end

    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def get_ids_standalone_host_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_ids_standalone_host_config ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Additional API to read service insertion exclude list without filtering out the system owned members
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def get_internal_si_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_si_exclude_list_with_http_info(opts)
      data
    end

    # Additional API to read service insertion exclude list without filtering out the system owned members
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def get_internal_si_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_internal_si_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_internal_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the name and role information of the user.
    # This API will return the name and role information of the user invoking this API request on the particular project. The permissions parameter of the NsxRole has been deprecated. The response will contain the roles_for_paths to indicate roles of the user at various paths . 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @return [UserInfo]
    def get_multitenant_current_user_info(org_id, project_id, opts = {})
      data, _status_code, _headers = get_multitenant_current_user_info_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the name and role information of the user.
    # This API will return the name and role information of the user invoking this API request on the particular project. The permissions parameter of the NsxRole has been deprecated. The response will contain the roles_for_paths to indicate roles of the user at various paths . 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInfo, Fixnum, Hash)>] UserInfo data, response status code and response headers
    def get_multitenant_current_user_info_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_multitenant_current_user_info ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.get_multitenant_current_user_info"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.get_multitenant_current_user_info"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/user-info'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_multitenant_current_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the name and role information of the user.
    # This API will return the name and role information of the user invoking this API request on the particular project. The permissions parameter of the NsxRole has been deprecated. The response will contain the roles_for_paths to indicate roles of the user at various paths . 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [UserInfo]
    def get_multitenant_current_user_info_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_multitenant_current_user_info_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get the name and role information of the user.
    # This API will return the name and role information of the user invoking this API request on the particular project. The permissions parameter of the NsxRole has been deprecated. The response will contain the roles_for_paths to indicate roles of the user at various paths . 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInfo, Fixnum, Hash)>] UserInfo data, response status code and response headers
    def get_multitenant_current_user_info_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_multitenant_current_user_info_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.get_multitenant_current_user_info_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.get_multitenant_current_user_info_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SettingsApi.get_multitenant_current_user_info_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/user-info'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_multitenant_current_user_info_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of Object-level RBAC entries.
    # Get list of Object-level RBAC entries.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :inheritance_disabled Does children of this object inherit this rule (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path_prefix Path prefix
    # @option opts [String] :role_name Role name
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ObjectRolePermissionGroupListResult]
    def get_object_permissions(opts = {})
      data, _status_code, _headers = get_object_permissions_with_http_info(opts)
      data
    end

    # Get list of Object-level RBAC entries.
    # Get list of Object-level RBAC entries.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :inheritance_disabled Does children of this object inherit this rule
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path_prefix Path prefix
    # @option opts [String] :role_name Role name
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ObjectRolePermissionGroupListResult, Fixnum, Hash)>] ObjectRolePermissionGroupListResult data, response status code and response headers
    def get_object_permissions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_object_permissions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_object_permissions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_object_permissions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/object-permissions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'inheritance_disabled'] = opts[:'inheritance_disabled'] if !opts[:'inheritance_disabled'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path_prefix'] = opts[:'path_prefix'] if !opts[:'path_prefix'].nil?
      query_params[:'role_name'] = opts[:'role_name'] if !opts[:'role_name'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObjectRolePermissionGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_object_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_pmaas_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_pmaas_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_pmaas_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_pmaas_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_pmaas_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get registration access token
    # Get registration access token <br> Use API POST /api/v1/aaa/registration-token/retrieve
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def get_registration_token(token, opts = {})
      data, _status_code, _headers = get_registration_token_with_http_info(token, opts)
      data
    end

    # Get registration access token
    # Get registration access token &lt;br&gt; Use API POST /api/v1/aaa/registration-token/retrieve
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def get_registration_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_registration_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling SettingsApi.get_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user/group's role information
    # Get user/group's role information
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBinding]
    def get_role_binding(binding_id, opts = {})
      data, _status_code, _headers = get_role_binding_with_http_info(binding_id, opts)
      data
    end

    # Get user/group&#39;s role information
    # Get user/group&#39;s role information
    # @param binding_id User/Group&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def get_role_binding_with_http_info(binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_role_binding ...'
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.get_role_binding"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_role_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_role_binding, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/aaa/role-bindings/{binding-id}'.sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user/group's role information from CSP
    # Get user/group's role information from CSP
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBinding]
    def get_role_binding_multitenancy_project(org_id, project_id, binding_id, opts = {})
      data, _status_code, _headers = get_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts)
      data
    end

    # Get user/group&#39;s role information from CSP
    # Get user/group&#39;s role information from CSP
    # @param org_id 
    # @param project_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def get_role_binding_multitenancy_project_with_http_info(org_id, project_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_role_binding_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.get_role_binding_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.get_role_binding_multitenancy_project"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.get_role_binding_multitenancy_project"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_role_binding_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_role_binding_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_role_binding_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user/group's role information from CSP
    # Get user/group's role information from CSP
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBinding]
    def get_role_binding_multitenancy_vpc(org_id, project_id, vpc_id, binding_id, opts = {})
      data, _status_code, _headers = get_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts)
      data
    end

    # Get user/group&#39;s role information from CSP
    # Get user/group&#39;s role information from CSP
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def get_role_binding_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_role_binding_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.get_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.get_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SettingsApi.get_role_binding_multitenancy_vpc"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.get_role_binding_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_role_binding_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_role_binding_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_role_binding_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get role information
    # Get role information
    # @param role Role id
    # @param [Hash] opts the optional parameters
    # @return [RoleWithFeatures]
    def get_role_info(role, opts = {})
      data, _status_code, _headers = get_role_info_with_http_info(role, opts)
      data
    end

    # Get role information
    # Get role information
    # @param role Role id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleWithFeatures, Fixnum, Hash)>] RoleWithFeatures data, response status code and response headers
    def get_role_info_with_http_info(role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_role_info ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling SettingsApi.get_role_info"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_role_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Default API to read service insertion exclude list with system owned members filtered out
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def get_si_exclude_list(opts = {})
      data, _status_code, _headers = get_si_exclude_list_with_http_info(opts)
      data
    end

    # Default API to read service insertion exclude list with system owned members filtered out
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def get_si_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_si_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get service insertion configuration status
    # Get the current service insertion status configuration.
    # @param [Hash] opts the optional parameters
    # @return [PolicySIStatusConfiguration]
    def get_si_status(opts = {})
      data, _status_code, _headers = get_si_status_with_http_info(opts)
      data
    end

    # Get service insertion configuration status
    # Get the current service insertion status configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIStatusConfiguration, Fixnum, Hash)>] PolicySIStatusConfiguration data, response status code and response headers
    def get_si_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_si_status ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIStatusConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_si_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def get_standalone_host_idfw_configuration(opts = {})
      data, _status_code, _headers = get_standalone_host_idfw_configuration_with_http_info(opts)
      data
    end

    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def get_standalone_host_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_standalone_host_idfw_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserStats]
    def get_user_login_events(user_id, opts = {})
      data, _status_code, _headers = get_user_login_events_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_login_events_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_user_login_events ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SettingsApi.get_user_login_events"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_user_login_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling SettingsApi.get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def get_user_session_data(opts = {})
      data, _status_code, _headers = get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_user_session_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user of interest more characters need to be entered.
    # Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user of interest more characters need to be entered. <br> vIDM is deprecated by vIDB.  Use API POST /api/v1/trust-management/oidc-uris/{id}/search.
    # @param search_string Search string to search for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VidmInfoListResult]
    def get_user_vidm_search_result(search_string, opts = {})
      data, _status_code, _headers = get_user_vidm_search_result_with_http_info(search_string, opts)
      data
    end

    # Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user of interest more characters need to be entered.
    # Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user of interest more characters need to be entered. &lt;br&gt; vIDM is deprecated by vIDB.  Use API POST /api/v1/trust-management/oidc-uris/{id}/search.
    # @param search_string Search string to search for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VidmInfoListResult, Fixnum, Hash)>] VidmInfoListResult data, response status code and response headers
    def get_user_vidm_search_result_with_http_info(search_string, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_user_vidm_search_result ...'
      end
      # verify the required parameter 'search_string' is set
      if @api_client.config.client_side_validation && search_string.nil?
        fail ArgumentError, "Missing the required parameter 'search_string' when calling SettingsApi.get_user_vidm_search_result"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_user_vidm_search_result, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_user_vidm_search_result, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/vidm/users'

      # query parameters
      query_params = {}
      query_params[:'search_string'] = search_string
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VidmInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_user_vidm_search_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user/group of interest more characters need to be entered.
    # Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user/group of interest more characters need to be entered. <br> vIDM is deprecated by vIDB.  Use API POST /api/v1/trust-management/oidc-uris/{id}/search.
    # @param search_string Search string to search for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VidmInfoListResult]
    def get_vidm_search_result(search_string, opts = {})
      data, _status_code, _headers = get_vidm_search_result_with_http_info(search_string, opts)
      data
    end

    # Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user/group of interest more characters need to be entered.
    # Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API. This API will return as many results that vIDM returns to NSX during the search query. vIDM may not send all results at once so to zero in on the user/group of interest more characters need to be entered. &lt;br&gt; vIDM is deprecated by vIDB.  Use API POST /api/v1/trust-management/oidc-uris/{id}/search.
    # @param search_string Search string to search for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VidmInfoListResult, Fixnum, Hash)>] VidmInfoListResult data, response status code and response headers
    def get_vidm_search_result_with_http_info(search_string, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_vidm_search_result ...'
      end
      # verify the required parameter 'search_string' is set
      if @api_client.config.client_side_validation && search_string.nil?
        fail ArgumentError, "Missing the required parameter 'search_string' when calling SettingsApi.get_vidm_search_result"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_vidm_search_result, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.get_vidm_search_result, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/vidm/search'

      # query parameters
      query_params = {}
      query_params[:'search_string'] = search_string
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VidmInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_vidm_search_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_delete_draft(draft_id, opts = {})
      global_infra_delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_delete_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def global_infra_filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling SettingsApi.global_infra_filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def global_infra_get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def global_infra_get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.global_infra_get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def global_infra_get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def global_infra_get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def global_infra_get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.global_infra_get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def global_infra_get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SettingsApi.global_infra_get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def global_infra_get_global_ids_signature_gm(signature_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_global_ids_signature_gm ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.global_infra_get_global_ids_signature_gm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_global_ids_signature_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def global_infra_get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = global_infra_get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def global_infra_get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling SettingsApi.global_infra_get_group_vm_details"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def global_infra_get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = global_infra_get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def global_infra_get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS signature version site mapping on GM
    # Read IDS signature version site mapping on GM 
    # @param mapping_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSiteVersionMapping]
    def global_infra_get_ids_site_version_mapping(mapping_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_site_version_mapping_with_http_info(mapping_id, opts)
      data
    end

    # Read IDS signature version site mapping on GM
    # Read IDS signature version site mapping on GM 
    # @param mapping_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSiteVersionMapping, Fixnum, Hash)>] IdsSiteVersionMapping data, response status code and response headers
    def global_infra_get_ids_site_version_mapping_with_http_info(mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_ids_site_version_mapping ...'
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling SettingsApi.global_infra_get_ids_site_version_mapping"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/site-version-mappings/{mapping-id}'.sub('{' + 'mapping-id' + '}', mapping_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSiteVersionMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_ids_site_version_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def global_infra_get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def global_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def global_infra_get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def global_infra_get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.global_infra_get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def global_infra_get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def global_infra_get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling SettingsApi.global_infra_get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def global_infra_get_user_session_data(opts = {})
      data, _status_code, _headers = global_infra_get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def global_infra_get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_get_user_session_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def global_infra_list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = global_infra_list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def global_infra_list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def global_infra_list_drafts(opts = {})
      data, _status_code, _headers = global_infra_list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def global_infra_list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def global_infra_list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = global_infra_list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def global_infra_list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def global_infra_list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = global_infra_list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def global_infra_list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def global_infra_list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.global_infra_list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def global_infra_list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def global_infra_list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.global_infra_list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signature version site mappings on GM
    # List signature version site mappings on GM. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSiteVersionMappingListResult]
    def global_infra_list_ids_site_version_mapping(opts = {})
      data, _status_code, _headers = global_infra_list_ids_site_version_mapping_with_http_info(opts)
      data
    end

    # List IDS signature version site mappings on GM
    # List signature version site mappings on GM. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSiteVersionMappingListResult, Fixnum, Hash)>] IdsSiteVersionMappingListResult data, response status code and response headers
    def global_infra_list_ids_site_version_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_ids_site_version_mapping ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_ids_site_version_mapping, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_ids_site_version_mapping, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/site-version-mappings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSiteVersionMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_ids_site_version_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def global_infra_list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def global_infra_list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_draft(draft_id, policy_draft, opts = {})
      global_infra_patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SettingsApi.global_infra_patch_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_publish_draft(draft_id, infra, opts = {})
      global_infra_publish_draft_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_publish_draft_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_publish_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling SettingsApi.global_infra_publish_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def global_infra_put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = global_infra_put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def global_infra_put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SettingsApi.global_infra_put_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def global_infra_read_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def global_infra_read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.global_infra_read_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def global_infra_read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def global_infra_read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.global_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def global_infra_read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SettingsApi.global_infra_read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.global_infra_read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.global_infra_test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SettingsApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#global_infra_test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeClusterIdfwConfigurationListResult]
    def list_compute_cluster_idfw_configuration(opts = {})
      data, _status_code, _headers = list_compute_cluster_idfw_configuration_with_http_info(opts)
      data
    end

    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeClusterIdfwConfigurationListResult, Fixnum, Hash)>] ComputeClusterIdfwConfigurationListResult data, response status code and response headers
    def list_compute_cluster_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_compute_cluster_idfw_configuration ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_compute_cluster_idfw_configuration, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_compute_cluster_idfw_configuration, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def list_drafts(opts = {})
      data, _status_code, _headers = list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List RBAC features
    # List all the RBAC features and their properties. 
    # @param [Hash] opts the optional parameters
    # @return [FeaturePermissionListResult]
    def list_features(opts = {})
      data, _status_code, _headers = list_features_with_http_info(opts)
      data
    end

    # List RBAC features
    # List all the RBAC features and their properties. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeaturePermissionListResult, Fixnum, Hash)>] FeaturePermissionListResult data, response status code and response headers
    def list_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_features ...'
      end
      # resource path
      local_var_path = '/aaa/features-with-properties'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeaturePermissionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupMemberListResults]
    def list_firewall_identity_store_group_member_groups(firewall_identity_store_id, group_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts)
      data
    end

    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupMemberListResults, Fixnum, Hash)>] DirectoryGroupMemberListResults data, response status code and response headers
    def list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_firewall_identity_store_group_member_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.list_firewall_identity_store_group_member_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SettingsApi.list_firewall_identity_store_group_member_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_store_group_member_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_store_group_member_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups/{group-id}/member-groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupMemberListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_firewall_identity_store_group_member_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryLdapServerListResults]
    def list_firewall_identity_store_ldap_servers(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryLdapServerListResults, Fixnum, Hash)>] DirectoryLdapServerListResults data, response status code and response headers
    def list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_firewall_identity_store_ldap_servers ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.list_firewall_identity_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_firewall_identity_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryDomainListResults]
    def list_firewall_identity_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryDomainListResults, Fixnum, Hash)>] DirectoryDomainListResults data, response status code and response headers
    def list_firewall_identity_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_firewall_identity_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_firewall_identity_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_firewall_identity_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_global_ids_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_global_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_global_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_global_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_children(identity_firewall_store_id, group_id, include_users, opts = {})
      data, _status_code, _headers = list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts)
      data
    end

    # List group&#39;s children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_group_children ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.list_group_children"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SettingsApi.list_group_children"
      end
      # verify the required parameter 'include_users' is set
      if @api_client.config.client_side_validation && include_users.nil?
        fail ArgumentError, "Missing the required parameter 'include_users' when calling SettingsApi.list_group_children"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/children'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include_users'] = include_users

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_group_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_parent_groups(identity_firewall_store_id, group_id, opts = {})
      data, _status_code, _headers = list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts)
      data
    end

    # List group&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_group_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.list_group_parent_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SettingsApi.list_group_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_group_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwTransportNodeStatusListResult]
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling SettingsApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_idfw_status_for_all_transport_nodes_in_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsClusterConfigListResult]
    def list_ids_cluster_configs(opts = {})
      data, _status_code, _headers = list_ids_cluster_configs_with_http_info(opts)
      data
    end

    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsClusterConfigListResult, Fixnum, Hash)>] IdsClusterConfigListResult data, response status code and response headers
    def list_ids_cluster_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_ids_cluster_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_cluster_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_cluster_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_ids_cluster_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def list_ids_custom_signature_versions(opts = {})
      data, _status_code, _headers = list_ids_custom_signature_versions_with_http_info(opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def list_ids_custom_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_ids_custom_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def list_ids_custom_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_custom_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def list_ids_custom_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for 'System' signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsThresholdConfigListResult]
    def list_ids_signature_threshold_configs(opts = {})
      data, _status_code, _headers = list_ids_signature_threshold_configs_with_http_info(opts)
      data
    end

    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for &#39;System&#39; signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsThresholdConfigListResult, Fixnum, Hash)>] IdsThresholdConfigListResult data, response status code and response headers
    def list_ids_signature_threshold_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_ids_signature_threshold_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_signature_threshold_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_signature_threshold_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_ids_signature_threshold_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LDAP identity sources
    # Return a list of all configured LDAP identity sources.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LdapIdentitySourceListResult]
    def list_ldap_identity_sources(opts = {})
      data, _status_code, _headers = list_ldap_identity_sources_with_http_info(opts)
      data
    end

    # List LDAP identity sources
    # Return a list of all configured LDAP identity sources.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LdapIdentitySourceListResult, Fixnum, Hash)>] LdapIdentitySourceListResult data, response status code and response headers
    def list_ldap_identity_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_ldap_identity_sources ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ldap_identity_sources, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_ldap_identity_sources, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/ldap-identity-sources'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapIdentitySourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_ldap_identity_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBindingListResult]
    def list_role_bindings_multitenancy_project(org_id, project_id, opts = {})
      data, _status_code, _headers = list_role_bindings_multitenancy_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBindingListResult, Fixnum, Hash)>] RoleBindingListResult data, response status code and response headers
    def list_role_bindings_multitenancy_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_role_bindings_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.list_role_bindings_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.list_role_bindings_multitenancy_project"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_role_bindings_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_role_bindings_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_role_bindings_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [RoleBindingListResult]
    def list_role_bindings_multitenancy_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_role_bindings_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get all users and groups with their roles
    # Get all users and groups with their roles from CSP. If the root_path is provided then only return role bindings that start-with or are sub-trees of the provided root path. Also filter the roles_for_paths such that only those roles_for_paths appear that start-with or are sub-tree of the provided root path. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :identity_source_id Identity source ID
    # @option opts [String] :identity_source_type Identity source type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :name User/Group name
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :path Exact path of the context
    # @option opts [String] :role Role ID
    # @option opts [String] :root_path Prefix path of the context
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type
    # @return [Array<(RoleBindingListResult, Fixnum, Hash)>] RoleBindingListResult data, response status code and response headers
    def list_role_bindings_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_role_bindings_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.list_role_bindings_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.list_role_bindings_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SettingsApi.list_role_bindings_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && opts[:'identity_source_type'] && !['VIDM', 'LDAP', 'OIDC'].include?(opts[:'identity_source_type'])
        fail ArgumentError, 'invalid value for "identity_source_type", must be one of VIDM, LDAP, OIDC'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_role_bindings_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_role_bindings_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['remote_user', 'remote_group', 'local_user', 'principal_identity'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of remote_user, remote_group, local_user, principal_identity'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/role-bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'identity_source_id'] = opts[:'identity_source_id'] if !opts[:'identity_source_id'].nil?
      query_params[:'identity_source_type'] = opts[:'identity_source_type'] if !opts[:'identity_source_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_role_bindings_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles with features and their permissions
    # Get information about all roles with features and their permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleWithFeaturesListResult]
    def list_roles_info(opts = {})
      data, _status_code, _headers = list_roles_info_with_http_info(opts)
      data
    end

    # Get information about all roles with features and their permissions
    # Get information about all roles with features and their permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleWithFeaturesListResult, Fixnum, Hash)>] RoleWithFeaturesListResult data, response status code and response headers
    def list_roles_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_roles_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_roles_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_roles_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/aaa/roles-with-feature-permissions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithFeaturesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_roles_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleListResult]
    def list_roles_of_org_multitenancy_project(org_id, project_id, opts = {})
      data, _status_code, _headers = list_roles_of_org_multitenancy_project_with_http_info(org_id, project_id, opts)
      data
    end

    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleListResult, Fixnum, Hash)>] RoleListResult data, response status code and response headers
    def list_roles_of_org_multitenancy_project_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_roles_of_org_multitenancy_project ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.list_roles_of_org_multitenancy_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.list_roles_of_org_multitenancy_project"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_roles_of_org_multitenancy_project, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_roles_of_org_multitenancy_project, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['ROOT', 'ORG', 'PROJECT', 'VPC'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ROOT, ORG, PROJECT, VPC'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/aaa/roles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_roles_of_org_multitenancy_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoleListResult]
    def list_roles_of_org_multitenancy_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_roles_of_org_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get information about all roles
    # Get information about all roles
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope List only the roles which are applicable for this scope.
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoleListResult, Fixnum, Hash)>] RoleListResult data, response status code and response headers
    def list_roles_of_org_multitenancy_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_roles_of_org_multitenancy_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.list_roles_of_org_multitenancy_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.list_roles_of_org_multitenancy_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SettingsApi.list_roles_of_org_multitenancy_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_roles_of_org_multitenancy_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_roles_of_org_multitenancy_vpc, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['ROOT', 'ORG', 'PROJECT', 'VPC'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ROOT, ORG, PROJECT, VPC'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/aaa/roles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_roles_of_org_multitenancy_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List user's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_user_parent_groups(identity_firewall_store_id, user_id, opts = {})
      data, _status_code, _headers = list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts)
      data
    end

    # List user&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_user_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.list_user_parent_groups"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SettingsApi.list_user_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users/{user-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_user_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_users_by_user_name(identity_firewall_store_id, filter_value, opts = {})
      data, _status_code, _headers = list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts)
      data
    end

    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_users_by_user_name ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.list_users_by_user_name"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling SettingsApi.list_users_by_user_name"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_users_by_user_name, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.list_users_by_user_name, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_users_by_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_idfw_status_by_transport_node(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts)
      data
    end

    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_virtual_machine_idfw_status_by_transport_node ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling SettingsApi.list_virtual_machine_idfw_status_by_transport_node"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_virtual_machine_idfw_status_by_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def make_version_as_active(ids_signature_version, opts = {})
      make_version_as_active_with_http_info(ids_signature_version, opts)
      nil
    end

    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def make_version_as_active_with_http_info(ids_signature_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.make_version_as_active ...'
      end
      # verify the required parameter 'ids_signature_version' is set
      if @api_client.config.client_side_validation && ids_signature_version.nil?
        fail ArgumentError, "Missing the required parameter 'ids_signature_version' when calling SettingsApi.make_version_as_active"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions?action=make_active_version'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_signature_version)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#make_version_as_active\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SettingsApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_draft(org_id, project_id, draft_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_draft_with_http_info(org_id, project_id, draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_delete_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures(org_id, project_id, version_id, include, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling SettingsApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/aggregated'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature(org_id, project_id, version_id, sig_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/complete'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def orgs_org_id_projects_project_id_infra_list_drafts(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_drafts_with_http_info(org_id, project_id, opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_drafts_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_list_drafts ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_drafts"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_drafts"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers_with_http_info(org_id, project_id, opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_draft(org_id, project_id, draft_id, policy_draft, opts = {})
      orgs_org_id_projects_project_id_infra_patch_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_patch_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_patch_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_patch_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SettingsApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_publish_draft(org_id, project_id, draft_id, infra, opts = {})
      orgs_org_id_projects_project_id_infra_publish_draft_with_http_info(org_id, project_id, draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_publish_draft_with_http_info(org_id, project_id, draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_publish_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling SettingsApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}?action=publish'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def orgs_org_id_projects_project_id_infra_put_draft(org_id, project_id, draft_id, policy_draft, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_put_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SettingsApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def orgs_org_id_projects_project_id_infra_read_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_read_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_read_security_feature(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_read_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SettingsApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      nil
    end

    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SettingsApi.patch_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling SettingsApi.patch_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SettingsApi.patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_draft(draft_id, policy_draft, opts = {})
      patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SettingsApi.patch_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_exclude_list(policy_exclude_list, opts = {})
      patch_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SettingsApi.patch_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_global_ids_signature(signature_id, global_ids_signature, opts = {})
      patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      nil
    end

    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.patch_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling SettingsApi.patch_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_cluster_config(cluster_config_id, ids_cluster_config, opts = {})
      patch_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts)
      nil
    end

    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling SettingsApi.patch_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling SettingsApi.patch_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      nil
    end

    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.patch_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling SettingsApi.patch_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      nil
    end

    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling SettingsApi.patch_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SettingsApi.patch_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SettingsApi.patch_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def patch_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.patch_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling SettingsApi.patch_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def patch_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling SettingsApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_pmaas_exclude_list(policy_exclude_list, opts = {})
      patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SettingsApi.patch_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SettingsApi.patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def patch_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = patch_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def patch_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SettingsApi.patch_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch service insertion exclusion list for security policy
    # Patch service insertion exclusion list for security policy. 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_si_exclude_list(policy_si_exclude_list, opts = {})
      patch_si_exclude_list_with_http_info(policy_si_exclude_list, opts)
      nil
    end

    # Patch service insertion exclusion list for security policy
    # Patch service insertion exclusion list for security policy. 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_si_exclude_list_with_http_info(policy_si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_si_exclude_list ...'
      end
      # verify the required parameter 'policy_si_exclude_list' is set
      if @api_client.config.client_side_validation && policy_si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_exclude_list' when calling SettingsApi.patch_si_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_si_status(policy_si_status_configuration, opts = {})
      patch_si_status_with_http_info(policy_si_status_configuration, opts)
      nil
    end

    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_si_status_with_http_info(policy_si_status_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_si_status ...'
      end
      # verify the required parameter 'policy_si_status_configuration' is set
      if @api_client.config.client_side_validation && policy_si_status_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_status_configuration' when calling SettingsApi.patch_si_status"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_status_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_si_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      nil
    end

    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling SettingsApi.patch_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def patch_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SettingsApi.patch_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling SettingsApi.patch_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.patch_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SettingsApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SettingsApi.patch_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#patch_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_login_logout_events(login_logout_event_collection, opts = {})
      post_login_logout_events_with_http_info(login_logout_event_collection, opts)
      nil
    end

    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_login_logout_events_with_http_info(login_logout_event_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.post_login_logout_events ...'
      end
      # verify the required parameter 'login_logout_event_collection' is set
      if @api_client.config.client_side_validation && login_logout_event_collection.nil?
        fail ArgumentError, "Missing the required parameter 'login_logout_event_collection' when calling SettingsApi.post_login_logout_events"
      end
      # resource path
      local_var_path = '/system/input/login-logout-events'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(login_logout_event_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#post_login_logout_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test the configuration of an existing LDAP identity source
    # Attempt to connect to an existing LDAP identity source and report any errors encountered.
    # @param ldap_identity_source_id 
    # @param [Hash] opts the optional parameters
    # @return [LdapIdentitySourceProbeResults]
    def probe_configured_ldap_identity_source(ldap_identity_source_id, opts = {})
      data, _status_code, _headers = probe_configured_ldap_identity_source_with_http_info(ldap_identity_source_id, opts)
      data
    end

    # Test the configuration of an existing LDAP identity source
    # Attempt to connect to an existing LDAP identity source and report any errors encountered.
    # @param ldap_identity_source_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapIdentitySourceProbeResults, Fixnum, Hash)>] LdapIdentitySourceProbeResults data, response status code and response headers
    def probe_configured_ldap_identity_source_with_http_info(ldap_identity_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.probe_configured_ldap_identity_source ...'
      end
      # verify the required parameter 'ldap_identity_source_id' is set
      if @api_client.config.client_side_validation && ldap_identity_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source_id' when calling SettingsApi.probe_configured_ldap_identity_source"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources/{ldap-identity-source-id}?action=probe'.sub('{' + 'ldap-identity-source-id' + '}', ldap_identity_source_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapIdentitySourceProbeResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#probe_configured_ldap_identity_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test an LDAP server
    # Attempt to connect to an LDAP server and ensure that the server can be contacted using the given URL and authentication credentials.
    # @param identity_source_ldap_server 
    # @param [Hash] opts the optional parameters
    # @return [IdentitySourceLdapServerProbeResult]
    def probe_identity_source_ldap_server(identity_source_ldap_server, opts = {})
      data, _status_code, _headers = probe_identity_source_ldap_server_with_http_info(identity_source_ldap_server, opts)
      data
    end

    # Test an LDAP server
    # Attempt to connect to an LDAP server and ensure that the server can be contacted using the given URL and authentication credentials.
    # @param identity_source_ldap_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentitySourceLdapServerProbeResult, Fixnum, Hash)>] IdentitySourceLdapServerProbeResult data, response status code and response headers
    def probe_identity_source_ldap_server_with_http_info(identity_source_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.probe_identity_source_ldap_server ...'
      end
      # verify the required parameter 'identity_source_ldap_server' is set
      if @api_client.config.client_side_validation && identity_source_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_source_ldap_server' when calling SettingsApi.probe_identity_source_ldap_server"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources?action=probe_ldap_server'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_source_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentitySourceLdapServerProbeResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#probe_identity_source_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Probe an LDAP identity source
    # Verify that the configuration of an LDAP identity source is correct before actually creating the source.
    # @param ldap_identity_source 
    # @param [Hash] opts the optional parameters
    # @return [LdapIdentitySourceProbeResults]
    def probe_unconfigured_ldap_identity_source(ldap_identity_source, opts = {})
      data, _status_code, _headers = probe_unconfigured_ldap_identity_source_with_http_info(ldap_identity_source, opts)
      data
    end

    # Probe an LDAP identity source
    # Verify that the configuration of an LDAP identity source is correct before actually creating the source.
    # @param ldap_identity_source 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapIdentitySourceProbeResults, Fixnum, Hash)>] LdapIdentitySourceProbeResults data, response status code and response headers
    def probe_unconfigured_ldap_identity_source_with_http_info(ldap_identity_source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.probe_unconfigured_ldap_identity_source ...'
      end
      # verify the required parameter 'ldap_identity_source' is set
      if @api_client.config.client_side_validation && ldap_identity_source.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source' when calling SettingsApi.probe_unconfigured_ldap_identity_source"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources?action=probe_identity_source'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ldap_identity_source)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapIdentitySourceProbeResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#probe_unconfigured_ldap_identity_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_draft(draft_id, infra, opts = {})
      publish_draft_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_draft_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.publish_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling SettingsApi.publish_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def put_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      data, _status_code, _headers = put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      data
    end

    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.put_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SettingsApi.put_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling SettingsApi.put_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#put_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def put_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SettingsApi.put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SettingsApi.put_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.put_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SettingsApi.put_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#put_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_pmaas_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.put_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SettingsApi.put_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#put_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def put_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      data, _status_code, _headers = put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      data
    end

    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.put_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling SettingsApi.put_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#put_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def read_draft(draft_id, opts = {})
      data, _status_code, _headers = read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SettingsApi.read_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def read_firewall_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.read_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def read_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.read_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.read_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def read_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.read_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.read_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_infra_segment_security_feature(segment_id, opts = {})
      data, _status_code, _headers = read_infra_segment_security_feature_with_http_info(segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_infra_segment_security_feature_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SettingsApi.read_infra_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_infra_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_infra_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a single LDAP identity source
    # Return details about one LDAP identity source
    # @param ldap_identity_source_id 
    # @param [Hash] opts the optional parameters
    # @return [LdapIdentitySource]
    def read_ldap_identity_source(ldap_identity_source_id, opts = {})
      data, _status_code, _headers = read_ldap_identity_source_with_http_info(ldap_identity_source_id, opts)
      data
    end

    # Read a single LDAP identity source
    # Return details about one LDAP identity source
    # @param ldap_identity_source_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapIdentitySource, Fixnum, Hash)>] LdapIdentitySource data, response status code and response headers
    def read_ldap_identity_source_with_http_info(ldap_identity_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_ldap_identity_source ...'
      end
      # verify the required parameter 'ldap_identity_source_id' is set
      if @api_client.config.client_side_validation && ldap_identity_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source_id' when calling SettingsApi.read_ldap_identity_source"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources/{ldap-identity-source-id}'.sub('{' + 'ldap-identity-source-id' + '}', ldap_identity_source_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapIdentitySource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_ldap_identity_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SettingsApi.read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_tier1_segment_security_feature(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.read_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SettingsApi.read_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SettingsApi.read_tier1_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_tier1_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.read_tier1_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#read_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store(identity_firewall_store_id, opts = {})
      remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.remove_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.remove_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#remove_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.remove_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.remove_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.remove_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#remove_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.remove_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.remove_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.remove_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#remove_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete registration access token
    # Delete registration access token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_registration_token(reg_token_query, opts = {})
      remove_registration_token_with_http_info(reg_token_query, opts)
      nil
    end

    # Delete registration access token
    # Delete registration access token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_registration_token_with_http_info(reg_token_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.remove_registration_token ...'
      end
      # verify the required parameter 'reg_token_query' is set
      if @api_client.config.client_side_validation && reg_token_query.nil?
        fail ArgumentError, "Missing the required parameter 'reg_token_query' when calling SettingsApi.remove_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reg_token_query)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#remove_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def replace_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.replace_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.replace_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling SettingsApi.replace_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#replace_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def replace_or_create_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.replace_or_create_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SettingsApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'identity_firewall_store_event_log_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_event_log_server' when calling SettingsApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#replace_or_create_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def replace_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.replace_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SettingsApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling SettingsApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#replace_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds (default to 0)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def request_firewall_identity_store_sync(firewall_identity_store_id, action, opts = {})
      request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts)
      nil
    end

    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.request_firewall_identity_store_sync ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.request_firewall_identity_store_sync"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SettingsApi.request_firewall_identity_store_sync"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['FULL_SYNC', 'DELTA_SYNC', 'STOP_SYNC'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of FULL_SYNC, DELTA_SYNC, STOP_SYNC"
      end
      if @api_client.config.client_side_validation && !opts[:'delay'].nil? && opts[:'delay'] < 0
        fail ArgumentError, 'invalid value for "opts[:"delay"]" when calling SettingsApi.request_firewall_identity_store_sync, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#request_firewall_identity_store_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get registration access token
    # Get the roles associated with the given registration token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def retrieve_registration_token(reg_token_query, opts = {})
      data, _status_code, _headers = retrieve_registration_token_with_http_info(reg_token_query, opts)
      data
    end

    # Get registration access token
    # Get the roles associated with the given registration token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def retrieve_registration_token_with_http_info(reg_token_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.retrieve_registration_token ...'
      end
      # verify the required parameter 'reg_token_query' is set
      if @api_client.config.client_side_validation && reg_token_query.nil?
        fail ArgumentError, "Missing the required parameter 'reg_token_query' when calling SettingsApi.retrieve_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/retrieve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reg_token_query)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#retrieve_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSize]
    def scan_firewall_identity_store_size(directory_domain, opts = {})
      data, _status_code, _headers = scan_firewall_identity_store_size_with_http_info(directory_domain, opts)
      data
    end

    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSize, Fixnum, Hash)>] DirectoryDomainSize data, response status code and response headers
    def scan_firewall_identity_store_size_with_http_info(directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.scan_firewall_identity_store_size ...'
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling SettingsApi.scan_firewall_identity_store_size"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-size'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSize')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#scan_firewall_identity_store_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupListResults]
    def search_firewall_identity_groups(firewall_identity_store_id, filter_value, opts = {})
      data, _status_code, _headers = search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts)
      data
    end

    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupListResults, Fixnum, Hash)>] DirectoryGroupListResults data, response status code and response headers
    def search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.search_firewall_identity_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.search_firewall_identity_groups"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling SettingsApi.search_firewall_identity_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.search_firewall_identity_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SettingsApi.search_firewall_identity_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#search_firewall_identity_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search the LDAP identity source
    # Search the LDAP identity source for users and groups that match the given filter_value. In most cases, the LDAP source performs a case-insensitive search.
    # @param ldap_identity_source_id 
    # @param filter_value Search filter value
    # @param [Hash] opts the optional parameters
    # @return [LdapIdentitySourceSearchResultList]
    def search_ldap_identity_source(ldap_identity_source_id, filter_value, opts = {})
      data, _status_code, _headers = search_ldap_identity_source_with_http_info(ldap_identity_source_id, filter_value, opts)
      data
    end

    # Search the LDAP identity source
    # Search the LDAP identity source for users and groups that match the given filter_value. In most cases, the LDAP source performs a case-insensitive search.
    # @param ldap_identity_source_id 
    # @param filter_value Search filter value
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapIdentitySourceSearchResultList, Fixnum, Hash)>] LdapIdentitySourceSearchResultList data, response status code and response headers
    def search_ldap_identity_source_with_http_info(ldap_identity_source_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.search_ldap_identity_source ...'
      end
      # verify the required parameter 'ldap_identity_source_id' is set
      if @api_client.config.client_side_validation && ldap_identity_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_identity_source_id' when calling SettingsApi.search_ldap_identity_source"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling SettingsApi.search_ldap_identity_source"
      end
      # resource path
      local_var_path = '/aaa/ldap-identity-sources/{ldap-identity-source-id}/search'.sub('{' + 'ldap-identity-source-id' + '}', ldap_identity_source_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapIdentitySourceSearchResultList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#search_ldap_identity_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Synchronize VCF licenses from all registered vCenters 
    # Synchronize VCF licenses from all registered vCenters and update licenses in NSX. This API will not return synchronized VCF licenses and just update them in NSX. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sync_vcf_licenses(opts = {})
      sync_vcf_licenses_with_http_info(opts)
      nil
    end

    # Synchronize VCF licenses from all registered vCenters 
    # Synchronize VCF licenses from all registered vCenters and update licenses in NSX. This API will not return synchronized VCF licenses and just update them in NSX. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def sync_vcf_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.sync_vcf_licenses ...'
      end
      # resource path
      local_var_path = '/licenses/vcf/action/sync'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#sync_vcf_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SettingsApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SettingsApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SettingsApi.test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def update_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      data, _status_code, _headers = update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      data
    end

    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SettingsApi.update_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling SettingsApi.update_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_ids_signatures(opts = {})
      update_ids_signatures_with_http_info(opts)
      nil
    end

    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_ids_signatures ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures?action=update_signatures'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/update object permission mappings
    # Create/update object permission mappings
    # @param object_role_permission_group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_object_permissions(object_role_permission_group, opts = {})
      update_object_permissions_with_http_info(object_role_permission_group, opts)
      nil
    end

    # Create/update object permission mappings
    # Create/update object permission mappings
    # @param object_role_permission_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_object_permissions_with_http_info(object_role_permission_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_object_permissions ...'
      end
      # verify the required parameter 'object_role_permission_group' is set
      if @api_client.config.client_side_validation && object_role_permission_group.nil?
        fail ArgumentError, "Missing the required parameter 'object_role_permission_group' when calling SettingsApi.update_object_permissions"
      end
      # resource path
      local_var_path = '/aaa/object-permissions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(object_role_permission_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_object_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def update_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SettingsApi.update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SettingsApi.update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set role assignment permission configuration
    # Provides a means to allow or disallow project administrators and VPC administrators to assign roles to other users on projects and VPCs. 
    # @param role role id (either \&quot;project_admin\&quot; or \&quot;vpc_admin\&quot;)
    # @param role_assignment_permission_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_role_assignment_config(role, role_assignment_permission_config, opts = {})
      update_role_assignment_config_with_http_info(role, role_assignment_permission_config, opts)
      nil
    end

    # Set role assignment permission configuration
    # Provides a means to allow or disallow project administrators and VPC administrators to assign roles to other users on projects and VPCs. 
    # @param role role id (either \&quot;project_admin\&quot; or \&quot;vpc_admin\&quot;)
    # @param role_assignment_permission_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_role_assignment_config_with_http_info(role, role_assignment_permission_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_role_assignment_config ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling SettingsApi.update_role_assignment_config"
      end
      # verify the required parameter 'role_assignment_permission_config' is set
      if @api_client.config.client_side_validation && role_assignment_permission_config.nil?
        fail ArgumentError, "Missing the required parameter 'role_assignment_permission_config' when calling SettingsApi.update_role_assignment_config"
      end
      # resource path
      local_var_path = '/aaa/roles/{role}/role-assignment-permission-config'.sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_assignment_permission_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_role_assignment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update User or Group's roles
    # This API is used to update a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. This API will merge the existing roles_for_paths with the newly provided roles_for_paths excluding roles_for_paths those are marked for deletion. 
    # @param binding_id User/Group&#39;s id
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [RoleBinding]
    def update_role_binding(binding_id, role_binding, opts = {})
      data, _status_code, _headers = update_role_binding_with_http_info(binding_id, role_binding, opts)
      data
    end

    # Update User or Group&#39;s roles
    # This API is used to update a user/group any role(s) of choice. It is recommended to use the new property roles_for_paths instead of roles. When using the roles_for_paths, set the read_roles_for_paths as true. User has union of all the roles assigned to it on a particular path and its sub-tree. User name is dealt case-insensitively. This API will merge the existing roles_for_paths with the newly provided roles_for_paths excluding roles_for_paths those are marked for deletion. 
    # @param binding_id User/Group&#39;s id
    # @param role_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleBinding, Fixnum, Hash)>] RoleBinding data, response status code and response headers
    def update_role_binding_with_http_info(binding_id, role_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_role_binding ...'
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SettingsApi.update_role_binding"
      end
      # verify the required parameter 'role_binding' is set
      if @api_client.config.client_side_validation && role_binding.nil?
        fail ArgumentError, "Missing the required parameter 'role_binding' when calling SettingsApi.update_role_binding"
      end
      # resource path
      local_var_path = '/aaa/role-bindings/{binding-id}'.sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_role_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion exclusion list
    # Update the exclusion list for service insertion policy 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def update_si_exclude_list(policy_si_exclude_list, opts = {})
      data, _status_code, _headers = update_si_exclude_list_with_http_info(policy_si_exclude_list, opts)
      data
    end

    # Update service insertion exclusion list
    # Update the exclusion list for service insertion policy 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def update_si_exclude_list_with_http_info(policy_si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_si_exclude_list ...'
      end
      # verify the required parameter 'policy_si_exclude_list' is set
      if @api_client.config.client_side_validation && policy_si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_exclude_list' when calling SettingsApi.update_si_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIStatusConfiguration]
    def update_si_status(policy_si_status_configuration, opts = {})
      data, _status_code, _headers = update_si_status_with_http_info(policy_si_status_configuration, opts)
      data
    end

    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIStatusConfiguration, Fixnum, Hash)>] PolicySIStatusConfiguration data, response status code and response headers
    def update_si_status_with_http_info(policy_si_status_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_si_status ...'
      end
      # verify the required parameter 'policy_si_status_configuration' is set
      if @api_client.config.client_side_validation && policy_si_status_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_status_configuration' when calling SettingsApi.update_si_status"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_status_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIStatusConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_si_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [nil]
    def upload_ids_custom_signatures(version_id, file, opts = {})
      upload_ids_custom_signatures_with_http_info(version_id, file, opts)
      nil
    end

    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_ids_custom_signatures_with_http_info(version_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.upload_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SettingsApi.upload_ids_custom_signatures"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SettingsApi.upload_ids_custom_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/upload-custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'version_name'] = opts[:'version_name'] if !opts[:'version_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#upload_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a new feature permission set
    # Validate the permissions of an incoming role. Also, recommend the permissions which need to be corrected. 
    # @param feature_permission_array 
    # @param [Hash] opts the optional parameters
    # @return [RecommendedFeaturePermissionListResult]
    def validate_and_recommend_permissions(feature_permission_array, opts = {})
      data, _status_code, _headers = validate_and_recommend_permissions_with_http_info(feature_permission_array, opts)
      data
    end

    # Validate a new feature permission set
    # Validate the permissions of an incoming role. Also, recommend the permissions which need to be corrected. 
    # @param feature_permission_array 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecommendedFeaturePermissionListResult, Fixnum, Hash)>] RecommendedFeaturePermissionListResult data, response status code and response headers
    def validate_and_recommend_permissions_with_http_info(feature_permission_array, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.validate_and_recommend_permissions ...'
      end
      # verify the required parameter 'feature_permission_array' is set
      if @api_client.config.client_side_validation && feature_permission_array.nil?
        fail ArgumentError, "Missing the required parameter 'feature_permission_array' when calling SettingsApi.validate_and_recommend_permissions"
      end
      # resource path
      local_var_path = '/aaa/roles?action=validate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(feature_permission_array)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecommendedFeaturePermissionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#validate_and_recommend_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param 'enforcement_point_path' would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServerStatus]
    def verify_firewall_identity_store_event_log_server(directory_event_log_server, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts)
      data
    end

    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param &#39;enforcement_point_path&#39; would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServerStatus, Fixnum, Hash)>] DirectoryEventLogServerStatus data, response status code and response headers
    def verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.verify_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling SettingsApi.verify_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-event-log-servers/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#verify_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServerStatus]
    def verify_firewall_identity_store_ldap_server(directory_ldap_server, action, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts)
      data
    end

    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServerStatus, Fixnum, Hash)>] DirectoryLdapServerStatus data, response status code and response headers
    def verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.verify_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SettingsApi.verify_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SettingsApi.verify_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-ldap-server'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#verify_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
