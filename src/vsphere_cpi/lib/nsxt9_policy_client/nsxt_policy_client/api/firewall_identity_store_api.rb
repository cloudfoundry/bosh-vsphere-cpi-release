=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class FirewallIdentityStoreApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def create_or_patch_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.create_or_patch_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.create_or_patch_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling FirewallIdentityStoreApi.create_or_patch_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#create_or_patch_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_patch_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.create_or_patch_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling FirewallIdentityStoreApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#create_or_patch_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def create_or_replace_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.create_or_replace_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#create_or_replace_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def create_or_replace_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#create_or_replace_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_replace_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling FirewallIdentityStoreApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#create_or_replace_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store(firewall_identity_store_id, opts = {})
      delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.delete_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.delete_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#delete_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.delete_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.delete_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.delete_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#delete_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.delete_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.delete_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.delete_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#delete_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units(directory_ldap_server, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts)
      data
    end

    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.fetch_firewall_identity_store_org_units ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling FirewallIdentityStoreApi.fetch_firewall_identity_store_org_units"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores-org-units'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#fetch_firewall_identity_store_org_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units_for_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.fetch_firewall_identity_store_org_units_for_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.fetch_firewall_identity_store_org_units_for_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/org-units'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#fetch_firewall_identity_store_org_units_for_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling FirewallIdentityStoreApi.get_group_vm_details"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionStatus]
    def get_idfw_status_for_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_idfw_status_for_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling FirewallIdentityStoreApi.get_idfw_status_for_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_idfw_status_for_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionListResult]
    def get_idfw_status_for_all_compute_collections(opts = {})
      data, _status_code, _headers = get_idfw_status_for_all_compute_collections_with_http_info(opts)
      data
    end

    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def get_idfw_status_for_all_compute_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_idfw_status_for_all_compute_collections ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_idfw_status_for_all_compute_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserStats]
    def get_user_login_events(user_id, opts = {})
      data, _status_code, _headers = get_user_login_events_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_login_events_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_user_login_events ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling FirewallIdentityStoreApi.get_user_login_events"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_user_login_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling FirewallIdentityStoreApi.get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def get_user_session_data(opts = {})
      data, _status_code, _headers = get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.get_user_session_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def global_infra_get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.global_infra_get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def global_infra_get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def global_infra_get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def global_infra_get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.global_infra_get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def global_infra_get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = global_infra_get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def global_infra_get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling FirewallIdentityStoreApi.global_infra_get_group_vm_details"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def global_infra_get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = global_infra_get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def global_infra_get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def global_infra_get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling FirewallIdentityStoreApi.global_infra_get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def global_infra_get_user_session_data(opts = {})
      data, _status_code, _headers = global_infra_get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def global_infra_get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_get_user_session_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def global_infra_list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = global_infra_list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def global_infra_list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.global_infra_list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.global_infra_list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def global_infra_list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.global_infra_list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.global_infra_list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.global_infra_list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.global_infra_test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling FirewallIdentityStoreApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#global_infra_test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupMemberListResults]
    def list_firewall_identity_store_group_member_groups(firewall_identity_store_id, group_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts)
      data
    end

    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupMemberListResults, Fixnum, Hash)>] DirectoryGroupMemberListResults data, response status code and response headers
    def list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_firewall_identity_store_group_member_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.list_firewall_identity_store_group_member_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling FirewallIdentityStoreApi.list_firewall_identity_store_group_member_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_store_group_member_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_store_group_member_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups/{group-id}/member-groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupMemberListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_firewall_identity_store_group_member_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryLdapServerListResults]
    def list_firewall_identity_store_ldap_servers(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryLdapServerListResults, Fixnum, Hash)>] DirectoryLdapServerListResults data, response status code and response headers
    def list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_firewall_identity_store_ldap_servers ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.list_firewall_identity_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_firewall_identity_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryDomainListResults]
    def list_firewall_identity_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryDomainListResults, Fixnum, Hash)>] DirectoryDomainListResults data, response status code and response headers
    def list_firewall_identity_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_firewall_identity_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_firewall_identity_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_firewall_identity_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_children(identity_firewall_store_id, group_id, include_users, opts = {})
      data, _status_code, _headers = list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts)
      data
    end

    # List group&#39;s children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_group_children ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.list_group_children"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling FirewallIdentityStoreApi.list_group_children"
      end
      # verify the required parameter 'include_users' is set
      if @api_client.config.client_side_validation && include_users.nil?
        fail ArgumentError, "Missing the required parameter 'include_users' when calling FirewallIdentityStoreApi.list_group_children"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/children'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include_users'] = include_users

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_group_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_parent_groups(identity_firewall_store_id, group_id, opts = {})
      data, _status_code, _headers = list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts)
      data
    end

    # List group&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_group_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.list_group_parent_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling FirewallIdentityStoreApi.list_group_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_group_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwTransportNodeStatusListResult]
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling FirewallIdentityStoreApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_idfw_status_for_all_transport_nodes_in_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List user's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_user_parent_groups(identity_firewall_store_id, user_id, opts = {})
      data, _status_code, _headers = list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts)
      data
    end

    # List user&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_user_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.list_user_parent_groups"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling FirewallIdentityStoreApi.list_user_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users/{user-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_user_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_users_by_user_name(identity_firewall_store_id, filter_value, opts = {})
      data, _status_code, _headers = list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts)
      data
    end

    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_users_by_user_name ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.list_users_by_user_name"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling FirewallIdentityStoreApi.list_users_by_user_name"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_users_by_user_name, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.list_users_by_user_name, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_users_by_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_idfw_status_by_transport_node(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts)
      data
    end

    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.list_virtual_machine_idfw_status_by_transport_node ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling FirewallIdentityStoreApi.list_virtual_machine_idfw_status_by_transport_node"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#list_virtual_machine_idfw_status_by_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def patch_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.patch_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.patch_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling FirewallIdentityStoreApi.patch_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#patch_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def patch_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.patch_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling FirewallIdentityStoreApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#patch_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def read_firewall_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.read_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.read_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#read_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def read_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.read_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.read_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.read_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#read_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def read_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.read_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.read_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.read_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#read_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store(identity_firewall_store_id, opts = {})
      remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.remove_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.remove_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#remove_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.remove_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.remove_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.remove_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#remove_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.remove_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.remove_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.remove_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#remove_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def replace_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.replace_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#replace_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def replace_or_create_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'identity_firewall_store_event_log_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_event_log_server' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#replace_or_create_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def replace_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling FirewallIdentityStoreApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#replace_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds (default to 0)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def request_firewall_identity_store_sync(firewall_identity_store_id, action, opts = {})
      request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts)
      nil
    end

    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.request_firewall_identity_store_sync ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.request_firewall_identity_store_sync"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling FirewallIdentityStoreApi.request_firewall_identity_store_sync"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['FULL_SYNC', 'DELTA_SYNC', 'STOP_SYNC'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of FULL_SYNC, DELTA_SYNC, STOP_SYNC"
      end
      if @api_client.config.client_side_validation && !opts[:'delay'].nil? && opts[:'delay'] < 0
        fail ArgumentError, 'invalid value for "opts[:"delay"]" when calling FirewallIdentityStoreApi.request_firewall_identity_store_sync, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#request_firewall_identity_store_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSize]
    def scan_firewall_identity_store_size(directory_domain, opts = {})
      data, _status_code, _headers = scan_firewall_identity_store_size_with_http_info(directory_domain, opts)
      data
    end

    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSize, Fixnum, Hash)>] DirectoryDomainSize data, response status code and response headers
    def scan_firewall_identity_store_size_with_http_info(directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.scan_firewall_identity_store_size ...'
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling FirewallIdentityStoreApi.scan_firewall_identity_store_size"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-size'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSize')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#scan_firewall_identity_store_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupListResults]
    def search_firewall_identity_groups(firewall_identity_store_id, filter_value, opts = {})
      data, _status_code, _headers = search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts)
      data
    end

    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupListResults, Fixnum, Hash)>] DirectoryGroupListResults data, response status code and response headers
    def search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.search_firewall_identity_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.search_firewall_identity_groups"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling FirewallIdentityStoreApi.search_firewall_identity_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.search_firewall_identity_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FirewallIdentityStoreApi.search_firewall_identity_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#search_firewall_identity_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling FirewallIdentityStoreApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling FirewallIdentityStoreApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling FirewallIdentityStoreApi.test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param 'enforcement_point_path' would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServerStatus]
    def verify_firewall_identity_store_event_log_server(directory_event_log_server, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts)
      data
    end

    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param &#39;enforcement_point_path&#39; would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServerStatus, Fixnum, Hash)>] DirectoryEventLogServerStatus data, response status code and response headers
    def verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.verify_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling FirewallIdentityStoreApi.verify_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-event-log-servers/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#verify_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServerStatus]
    def verify_firewall_identity_store_ldap_server(directory_ldap_server, action, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts)
      data
    end

    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServerStatus, Fixnum, Hash)>] DirectoryLdapServerStatus data, response status code and response headers
    def verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallIdentityStoreApi.verify_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling FirewallIdentityStoreApi.verify_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling FirewallIdentityStoreApi.verify_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-ldap-server'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallIdentityStoreApi#verify_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
