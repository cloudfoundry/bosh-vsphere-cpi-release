=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class HealthcheckApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new manual health check config
    # Create a new manual health check config with essential properties. It's disallowed to create new one until the count of in-progress manual health check is less than 50. A manual health check will be deleted automatically after finished for 24 hours. 
    # @param manual_health_check_id 
    # @param policy_manual_health_check 
    # @param [Hash] opts the optional parameters
    # @return [PolicyManualHealthCheck]
    def create_manual_health_check_config(manual_health_check_id, policy_manual_health_check, opts = {})
      data, _status_code, _headers = create_manual_health_check_config_with_http_info(manual_health_check_id, policy_manual_health_check, opts)
      data
    end

    # Create a new manual health check config
    # Create a new manual health check config with essential properties. It&#39;s disallowed to create new one until the count of in-progress manual health check is less than 50. A manual health check will be deleted automatically after finished for 24 hours. 
    # @param manual_health_check_id 
    # @param policy_manual_health_check 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyManualHealthCheck, Fixnum, Hash)>] PolicyManualHealthCheck data, response status code and response headers
    def create_manual_health_check_config_with_http_info(manual_health_check_id, policy_manual_health_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.create_manual_health_check_config ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling HealthcheckApi.create_manual_health_check_config"
      end
      # verify the required parameter 'policy_manual_health_check' is set
      if @api_client.config.client_side_validation && policy_manual_health_check.nil?
        fail ArgumentError, "Missing the required parameter 'policy_manual_health_check' when calling HealthcheckApi.create_manual_health_check_config"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_manual_health_check)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheck')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#create_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing manual health check
    # Delete an existing manual health check by ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_manual_health_check_config(manual_health_check_id, opts = {})
      delete_manual_health_check_config_with_http_info(manual_health_check_id, opts)
      nil
    end

    # Delete an existing manual health check
    # Delete an existing manual health check by ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_manual_health_check_config_with_http_info(manual_health_check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.delete_manual_health_check_config ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling HealthcheckApi.delete_manual_health_check_config"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#delete_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get automatic health check toggle
    # Get detailed info for automatic health check toggle.
    # @param [Hash] opts the optional parameters
    # @return [AutomaticHealthCheckToggle]
    def get_auto_health_check_toggle(opts = {})
      data, _status_code, _headers = get_auto_health_check_toggle_with_http_info(opts)
      data
    end

    # Get automatic health check toggle
    # Get detailed info for automatic health check toggle.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomaticHealthCheckToggle, Fixnum, Hash)>] AutomaticHealthCheckToggle data, response status code and response headers
    def get_auto_health_check_toggle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.get_auto_health_check_toggle ...'
      end
      # resource path
      local_var_path = '/infra/auto-health-check-toggle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutomaticHealthCheckToggle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#get_auto_health_check_toggle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get automatic health checks
    # Get health check performed by system automatically for all transport zones or a specific transport zone. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_zone_path Policy path of the transport zone.
    # @return [PolicyAutomaticHealthCheckListResult]
    def get_auto_health_checks(opts = {})
      data, _status_code, _headers = get_auto_health_checks_with_http_info(opts)
      data
    end

    # Get automatic health checks
    # Get health check performed by system automatically for all transport zones or a specific transport zone. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_zone_path Policy path of the transport zone.
    # @return [Array<(PolicyAutomaticHealthCheckListResult, Fixnum, Hash)>] PolicyAutomaticHealthCheckListResult data, response status code and response headers
    def get_auto_health_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.get_auto_health_checks ...'
      end
      # resource path
      local_var_path = '/infra/auto-health-checks'

      # query parameters
      query_params = {}
      query_params[:'transport_zone_path'] = opts[:'transport_zone_path'] if !opts[:'transport_zone_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAutomaticHealthCheckListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#get_auto_health_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a manual health check config
    # Get manual health check config with the specified identifier. 
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyManualHealthCheck]
    def get_manual_health_check_config(manual_health_check_id, opts = {})
      data, _status_code, _headers = get_manual_health_check_config_with_http_info(manual_health_check_id, opts)
      data
    end

    # Get a manual health check config
    # Get manual health check config with the specified identifier. 
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyManualHealthCheck, Fixnum, Hash)>] PolicyManualHealthCheck data, response status code and response headers
    def get_manual_health_check_config_with_http_info(manual_health_check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.get_manual_health_check_config ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling HealthcheckApi.get_manual_health_check_config"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheck')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#get_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get result for the specified manual health check ID
    # Get the manual health check result with the specified ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyManualHealthCheckResult]
    def get_manual_health_check_result(manual_health_check_id, opts = {})
      data, _status_code, _headers = get_manual_health_check_result_with_http_info(manual_health_check_id, opts)
      data
    end

    # Get result for the specified manual health check ID
    # Get the manual health check result with the specified ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyManualHealthCheckResult, Fixnum, Hash)>] PolicyManualHealthCheckResult data, response status code and response headers
    def get_manual_health_check_result_with_http_info(manual_health_check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.get_manual_health_check_result ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling HealthcheckApi.get_manual_health_check_result"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}/result'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheckResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#get_manual_health_check_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all the manual health check config entities
    # Get a list of all the manual health check entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyManualHealthCheckList]
    def list_manual_health_check_config(opts = {})
      data, _status_code, _headers = list_manual_health_check_config_with_http_info(opts)
      data
    end

    # List all the manual health check config entities
    # Get a list of all the manual health check entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyManualHealthCheckList, Fixnum, Hash)>] PolicyManualHealthCheckList data, response status code and response headers
    def list_manual_health_check_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.list_manual_health_check_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HealthcheckApi.list_manual_health_check_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HealthcheckApi.list_manual_health_check_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/manual-health-checks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheckList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#list_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update automatic health check toggle
    # Change status of automatic health check toggle to enabled/disabled.
    # @param automatic_health_check_toggle 
    # @param [Hash] opts the optional parameters
    # @return [AutomaticHealthCheckToggle]
    def update_auto_health_check_toggle(automatic_health_check_toggle, opts = {})
      data, _status_code, _headers = update_auto_health_check_toggle_with_http_info(automatic_health_check_toggle, opts)
      data
    end

    # Update automatic health check toggle
    # Change status of automatic health check toggle to enabled/disabled.
    # @param automatic_health_check_toggle 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomaticHealthCheckToggle, Fixnum, Hash)>] AutomaticHealthCheckToggle data, response status code and response headers
    def update_auto_health_check_toggle_with_http_info(automatic_health_check_toggle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HealthcheckApi.update_auto_health_check_toggle ...'
      end
      # verify the required parameter 'automatic_health_check_toggle' is set
      if @api_client.config.client_side_validation && automatic_health_check_toggle.nil?
        fail ArgumentError, "Missing the required parameter 'automatic_health_check_toggle' when calling HealthcheckApi.update_auto_health_check_toggle"
      end
      # resource path
      local_var_path = '/infra/auto-health-check-toggle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(automatic_health_check_toggle)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutomaticHealthCheckToggle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HealthcheckApi#update_auto_health_check_toggle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
