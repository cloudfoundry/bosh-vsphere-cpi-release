=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class EastWestSecurityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicyContainerCluster]
    def add_container_cluster_span(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      data, _status_code, _headers = add_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts)
      data
    end

    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicyContainerCluster, Fixnum, Hash)>] SecurityPolicyContainerCluster data, response status code and response headers
    def add_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.add_container_cluster_span ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.add_container_cluster_span"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.add_container_cluster_span"
      end
      # verify the required parameter 'container_cluster_id' is set
      if @api_client.config.client_side_validation && container_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_id' when calling EastWestSecurityApi.add_container_cluster_span"
      end
      # verify the required parameter 'security_policy_container_cluster' is set
      if @api_client.config.client_side_validation && security_policy_container_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_container_cluster' when calling EastWestSecurityApi.add_container_cluster_span"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{container-cluster-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'container-cluster-id' + '}', container_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy_container_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyContainerCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#add_container_cluster_span\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def cancel_export_task(opts = {})
      data, _status_code, _headers = cancel_export_task_with_http_info(opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def cancel_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.cancel_export_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def cancel_import_task(opts = {})
      data, _status_code, _headers = cancel_import_task_with_http_info(opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def cancel_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.cancel_import_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/import?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def create_or_patch_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.create_or_patch_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.create_or_patch_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling EastWestSecurityApi.create_or_patch_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#create_or_patch_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_patch_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.create_or_patch_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling EastWestSecurityApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#create_or_patch_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def create_or_replace_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.create_or_replace_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#create_or_replace_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def create_or_replace_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.create_or_replace_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#create_or_replace_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_replace_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.create_or_replace_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling EastWestSecurityApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#create_or_replace_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cluster_container_for_security_policy(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      delete_cluster_container_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cluster_container_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_cluster_container_for_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.delete_cluster_container_for_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.delete_cluster_container_for_security_policy"
      end
      # verify the required parameter 'antrea_cluster_1' is set
      if @api_client.config.client_side_validation && antrea_cluster_1.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_cluster_1' when calling EastWestSecurityApi.delete_cluster_container_for_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{antrea-cluster-1}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'antrea-cluster-1' + '}', antrea_cluster_1.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_cluster_container_for_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete CommunicationEntry
    # Delete CommunicationEntry  <br> This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_entry(domain_id, communication_map_id, communication_entry_id, opts = {})
      delete_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts)
      nil
    end

    # Delete CommunicationEntry
    # Delete CommunicationEntry  &lt;br&gt; This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling EastWestSecurityApi.delete_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a communication map from this domain
    # Deletes the communication map along with all the communication entries  <br> This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_map_for_domain(domain_id, communication_map_id, opts = {})
      delete_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts)
      nil
    end

    # Deletes a communication map from this domain
    # Deletes the communication map along with all the communication entries  &lt;br&gt; This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.delete_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.delete_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_cluster_idfw_configuration(cluster_id, opts = {})
      delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      nil
    end

    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling EastWestSecurityApi.delete_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_draft(draft_id, opts = {})
      delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.delete_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store(firewall_identity_store_id, opts = {})
      delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.delete_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.delete_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.delete_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.delete_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.delete_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.delete_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.delete_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_exported_file(opts = {})
      download_exported_file_with_http_info(opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_exported_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.download_exported_file ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export?action=download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units(directory_ldap_server, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts)
      data
    end

    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.fetch_firewall_identity_store_org_units ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling EastWestSecurityApi.fetch_firewall_identity_store_org_units"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores-org-units'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#fetch_firewall_identity_store_org_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units_for_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.fetch_firewall_identity_store_org_units_for_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.fetch_firewall_identity_store_org_units_for_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/org-units'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#fetch_firewall_identity_store_org_units_for_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling EastWestSecurityApi.filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def get_compute_cluster_idfw_configuration(cluster_id, opts = {})
      data, _status_code, _headers = get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      data
    end

    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling EastWestSecurityApi.get_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def get_dfw_firewall_configuration(opts = {})
      data, _status_code, _headers = get_dfw_firewall_configuration_with_http_info(opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def get_dfw_firewall_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_dfw_firewall_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of distributed firewall dependent services
    # Get the list of distributed firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [DependentServices]
    def get_distributed_firewall_dependent_services(opts = {})
      data, _status_code, _headers = get_distributed_firewall_dependent_services_with_http_info(opts)
      data
    end

    # Get the list of distributed firewall dependent services
    # Get the list of distributed firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependentServices, Fixnum, Hash)>] DependentServices data, response status code and response headers
    def get_distributed_firewall_dependent_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_distributed_firewall_dependent_services ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/dependent-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DependentServices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_distributed_firewall_dependent_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def get_export_task(opts = {})
      data, _status_code, _headers = get_export_task_with_http_info(opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def get_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_export_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EastWestSecurityApi.get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling EastWestSecurityApi.get_group_vm_details"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionStatus]
    def get_idfw_status_for_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_idfw_status_for_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling EastWestSecurityApi.get_idfw_status_for_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_idfw_status_for_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionListResult]
    def get_idfw_status_for_all_compute_collections(opts = {})
      data, _status_code, _headers = get_idfw_status_for_all_compute_collections_with_http_info(opts)
      data
    end

    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def get_idfw_status_for_all_compute_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_idfw_status_for_all_compute_collections ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_idfw_status_for_all_compute_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSignatureVersion]
    def get_ids_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSignatureVersion, Fixnum, Hash)>] IdsSignatureVersion data, response status code and response headers
    def get_ids_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_ids_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling EastWestSecurityApi.get_ids_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_ids_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def get_import_task(opts = {})
      data, _status_code, _headers = get_import_task_with_http_info(opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def get_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_import_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # It returns the exclusion IP list present in the default malicious group
    # Querying the API on GM with a valid enforcement point path, the API will return the list of exclusion IPs from the default malicious IP group of the site represented by the enforcement point path. In the absence of an enforcement point path, the API returns the exclusion IPs present in the global default malicious IP group of GM. Querying the API on LM, the api will return a list of exclusion IP addresses present in the local default malicious ip group. The API will not consider the IP addresses present in the user created malicious group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPReputationExclusionList]
    def get_ip_reputation_exclusion_list(opts = {})
      data, _status_code, _headers = get_ip_reputation_exclusion_list_with_http_info(opts)
      data
    end

    # It returns the exclusion IP list present in the default malicious group
    # Querying the API on GM with a valid enforcement point path, the API will return the list of exclusion IPs from the default malicious IP group of the site represented by the enforcement point path. In the absence of an enforcement point path, the API returns the exclusion IPs present in the global default malicious IP group of GM. Querying the API on LM, the api will return a list of exclusion IP addresses present in the local default malicious ip group. The API will not consider the IP addresses present in the user created malicious group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPReputationExclusionList, Fixnum, Hash)>] IPReputationExclusionList data, response status code and response headers
    def get_ip_reputation_exclusion_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_ip_reputation_exclusion_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.get_ip_reputation_exclusion_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.get_ip_reputation_exclusion_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-reputation-exclusion-list'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationExclusionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_ip_reputation_exclusion_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_pmaas_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_pmaas_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_pmaas_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_pmaas_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_pmaas_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallIpReputationConfig]
    def get_policy_firewall_ip_reputation_config(opts = {})
      data, _status_code, _headers = get_policy_firewall_ip_reputation_config_with_http_info(opts)
      data
    end

    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def get_policy_firewall_ip_reputation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_policy_firewall_ip_reputation_config ...'
      end
      # resource path
      local_var_path = '/infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_rule_statistics(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.get_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.get_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.get_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_security_policy_statistics(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.get_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.get_security_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def get_standalone_host_idfw_configuration(opts = {})
      data, _status_code, _headers = get_standalone_host_idfw_configuration_with_http_info(opts)
      data
    end

    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def get_standalone_host_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_standalone_host_idfw_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserStats]
    def get_user_login_events(user_id, opts = {})
      data, _status_code, _headers = get_user_login_events_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_login_events_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_user_login_events ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling EastWestSecurityApi.get_user_login_events"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_user_login_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling EastWestSecurityApi.get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def get_user_session_data(opts = {})
      data, _status_code, _headers = get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.get_user_session_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_cancel_export_task(opts = {})
      data, _status_code, _headers = global_infra_cancel_export_task_with_http_info(opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_cancel_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_cancel_export_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def global_infra_cancel_import_task(opts = {})
      data, _status_code, _headers = global_infra_cancel_import_task_with_http_info(opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def global_infra_cancel_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_cancel_import_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/import?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_delete_draft(draft_id, opts = {})
      global_infra_delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_delete_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_download_exported_file(opts = {})
      global_infra_download_exported_file_with_http_info(opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_download_exported_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_download_exported_file ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export?action=download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def global_infra_filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling EastWestSecurityApi.global_infra_filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def global_infra_get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_get_export_task(opts = {})
      data, _status_code, _headers = global_infra_get_export_task_with_http_info(opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_get_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_export_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def global_infra_get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.global_infra_get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def global_infra_get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def global_infra_get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def global_infra_get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.global_infra_get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def global_infra_get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EastWestSecurityApi.global_infra_get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def global_infra_get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = global_infra_get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def global_infra_get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling EastWestSecurityApi.global_infra_get_group_vm_details"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def global_infra_get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = global_infra_get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def global_infra_get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def global_infra_get_import_task(opts = {})
      data, _status_code, _headers = global_infra_get_import_task_with_http_info(opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def global_infra_get_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_import_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IP reputation site mapping on GM.
    # Read IP reputation site mapping details for a given site. 
    # @param mapping_id mapping ID
    # @param [Hash] opts the optional parameters
    # @return [IPReputationSiteMapping]
    def global_infra_get_ip_reputation_site_mapping(mapping_id, opts = {})
      data, _status_code, _headers = global_infra_get_ip_reputation_site_mapping_with_http_info(mapping_id, opts)
      data
    end

    # Read IP reputation site mapping on GM.
    # Read IP reputation site mapping details for a given site. 
    # @param mapping_id mapping ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPReputationSiteMapping, Fixnum, Hash)>] IPReputationSiteMapping data, response status code and response headers
    def global_infra_get_ip_reputation_site_mapping_with_http_info(mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_ip_reputation_site_mapping ...'
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling EastWestSecurityApi.global_infra_get_ip_reputation_site_mapping"
      end
      # resource path
      local_var_path = '/global-infra/ip-reputation-site-mappings/{mapping-id}'.sub('{' + 'mapping-id' + '}', mapping_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationSiteMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_ip_reputation_site_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def global_infra_get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def global_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallIpReputationConfig]
    def global_infra_get_policy_firewall_ip_reputation_config(opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_ip_reputation_config_with_http_info(opts)
      data
    end

    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def global_infra_get_policy_firewall_ip_reputation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_policy_firewall_ip_reputation_config ...'
      end
      # resource path
      local_var_path = '/global-infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def global_infra_get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def global_infra_get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.global_infra_get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def global_infra_get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def global_infra_get_rule_statistics(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def global_infra_get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.global_infra_get_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.global_infra_get_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.global_infra_get_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def global_infra_get_security_policy_statistics(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.global_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.global_infra_get_security_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def global_infra_get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling EastWestSecurityApi.global_infra_get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def global_infra_get_user_session_data(opts = {})
      data, _status_code, _headers = global_infra_get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def global_infra_get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_get_user_session_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_invoke_export_task(export_request_parameter, opts = {})
      data, _status_code, _headers = global_infra_invoke_export_task_with_http_info(export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_invoke_export_task_with_http_info(export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_invoke_export_task ...'
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling EastWestSecurityApi.global_infra_invoke_export_task"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def global_infra_list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = global_infra_list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def global_infra_list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def global_infra_list_drafts(opts = {})
      data, _status_code, _headers = global_infra_list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def global_infra_list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def global_infra_list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = global_infra_list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def global_infra_list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def global_infra_list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.global_infra_list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IP reputation site mapping for all sites.
    # List IP reputation site mapping details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPReputationSiteMappingListResult]
    def global_infra_list_ip_reputation_site_mapping(opts = {})
      data, _status_code, _headers = global_infra_list_ip_reputation_site_mapping_with_http_info(opts)
      data
    end

    # List IP reputation site mapping for all sites.
    # List IP reputation site mapping details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPReputationSiteMappingListResult, Fixnum, Hash)>] IPReputationSiteMappingListResult data, response status code and response headers
    def global_infra_list_ip_reputation_site_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_ip_reputation_site_mapping ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_ip_reputation_site_mapping, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_ip_reputation_site_mapping, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ip-reputation-site-mappings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationSiteMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_ip_reputation_site_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def global_infra_list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def global_infra_list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def global_infra_list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def global_infra_list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.global_infra_list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def global_infra_list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def global_infra_list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.global_infra_list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.global_infra_list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.global_infra_list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_draft(draft_id, policy_draft, opts = {})
      global_infra_patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling EastWestSecurityApi.global_infra_patch_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action 'enable_auto_download', to deactivate use action 'disable_auto_download' and to trigger a download use action 'download'. For Global Manager, the only action that is supported is action=download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyFirewallIpReputationConfig]
    def global_infra_post_policy_firewall_ip_reputation_config(operation, opts = {})
      data, _status_code, _headers = global_infra_post_policy_firewall_ip_reputation_config_with_http_info(operation, opts)
      data
    end

    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action &#39;enable_auto_download&#39;, to deactivate use action &#39;disable_auto_download&#39; and to trigger a download use action &#39;download&#39;. For Global Manager, the only action that is supported is action&#x3D;download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def global_infra_post_policy_firewall_ip_reputation_config_with_http_info(operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_post_policy_firewall_ip_reputation_config ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling EastWestSecurityApi.global_infra_post_policy_firewall_ip_reputation_config"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['enable_auto_download', 'disable_auto_download', 'download'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of enable_auto_download, disable_auto_download, download"
      end
      # resource path
      local_var_path = '/global-infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}
      query_params[:'operation'] = operation
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_post_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_publish_draft(draft_id, infra, opts = {})
      global_infra_publish_draft_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_publish_draft_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_publish_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling EastWestSecurityApi.global_infra_publish_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def global_infra_put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = global_infra_put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def global_infra_put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling EastWestSecurityApi.global_infra_put_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def global_infra_read_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def global_infra_read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.global_infra_read_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def global_infra_read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def global_infra_read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.global_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.global_infra_read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def global_infra_read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def global_infra_read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.global_infra_read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.global_infra_read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.global_infra_read_security_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_rule_stats(category, opts = {})
      global_infra_reset_rule_stats_with_http_info(category, opts)
      nil
    end

    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_rule_stats_with_http_info(category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_reset_rule_stats ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling EastWestSecurityApi.global_infra_reset_rule_stats"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['DFW', 'EDGE', 'BRIDGEFIREWALL'].include?(category)
        fail ArgumentError, "invalid value for 'category', must be one of DFW, EDGE, BRIDGEFIREWALL"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = category
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_reset_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.global_infra_test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling EastWestSecurityApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#global_infra_test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs (default to ABORT)
    # @return [NetworkPolicyImportResponse]
    def import_k8s_n_pto_dfw(network_policy_import_request, opts = {})
      data, _status_code, _headers = import_k8s_n_pto_dfw_with_http_info(network_policy_import_request, opts)
      data
    end

    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs
    # @return [Array<(NetworkPolicyImportResponse, Fixnum, Hash)>] NetworkPolicyImportResponse data, response status code and response headers
    def import_k8s_n_pto_dfw_with_http_info(network_policy_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.import_k8s_n_pto_dfw ...'
      end
      # verify the required parameter 'network_policy_import_request' is set
      if @api_client.config.client_side_validation && network_policy_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_import_request' when calling EastWestSecurityApi.import_k8s_n_pto_dfw"
      end
      if @api_client.config.client_side_validation && opts[:'on_error'] && !['ABORT', 'CONTINUE'].include?(opts[:'on_error'])
        fail ArgumentError, 'invalid value for "on_error", must be one of ABORT, CONTINUE'
      end
      # resource path
      local_var_path = '/infra/import-k8s-np-to-dfw'

      # query parameters
      query_params = {}
      query_params[:'on_error'] = opts[:'on_error'] if !opts[:'on_error'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_policy_import_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkPolicyImportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#import_k8s_n_pto_dfw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def invoke_export_task(export_request_parameter, opts = {})
      data, _status_code, _headers = invoke_export_task_with_http_info(export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def invoke_export_task_with_http_info(export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.invoke_export_task ...'
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling EastWestSecurityApi.invoke_export_task"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List CommunicationEntries
    # List CommunicationEntries  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationEntryListResult]
    def list_communication_entry(domain_id, communication_map_id, opts = {})
      data, _status_code, _headers = list_communication_entry_with_http_info(domain_id, communication_map_id, opts)
      data
    end

    # List CommunicationEntries
    # List CommunicationEntries  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationEntryListResult, Fixnum, Hash)>] CommunicationEntryListResult data, response status code and response headers
    def list_communication_entry_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.list_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.list_communication_entry"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_communication_entry, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_communication_entry, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List communication maps
    # List all communication maps for a domain.  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationMapListResult]
    def list_communication_maps_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_communication_maps_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List communication maps
    # List all communication maps for a domain.  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationMapListResult, Fixnum, Hash)>] CommunicationMapListResult data, response status code and response headers
    def list_communication_maps_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_communication_maps_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.list_communication_maps_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_communication_maps_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_communication_maps_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_communication_maps_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeClusterIdfwConfigurationListResult]
    def list_compute_cluster_idfw_configuration(opts = {})
      data, _status_code, _headers = list_compute_cluster_idfw_configuration_with_http_info(opts)
      data
    end

    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeClusterIdfwConfigurationListResult, Fixnum, Hash)>] ComputeClusterIdfwConfigurationListResult data, response status code and response headers
    def list_compute_cluster_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_compute_cluster_idfw_configuration ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_compute_cluster_idfw_configuration, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_compute_cluster_idfw_configuration, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all container cluster span of a security policy
    # List all container cluster span of a security policy 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyContainerClusterListResult]
    def list_container_clusters_for_security_policy(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_container_clusters_for_security_policy_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List all container cluster span of a security policy
    # List all container cluster span of a security policy 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyContainerClusterListResult, Fixnum, Hash)>] SecurityPolicyContainerClusterListResult data, response status code and response headers
    def list_container_clusters_for_security_policy_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_container_clusters_for_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.list_container_clusters_for_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.list_container_clusters_for_security_policy"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_container_clusters_for_security_policy, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_container_clusters_for_security_policy, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyContainerClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_container_clusters_for_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def list_drafts(opts = {})
      data, _status_code, _headers = list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupMemberListResults]
    def list_firewall_identity_store_group_member_groups(firewall_identity_store_id, group_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts)
      data
    end

    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupMemberListResults, Fixnum, Hash)>] DirectoryGroupMemberListResults data, response status code and response headers
    def list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_firewall_identity_store_group_member_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.list_firewall_identity_store_group_member_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EastWestSecurityApi.list_firewall_identity_store_group_member_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_store_group_member_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_store_group_member_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups/{group-id}/member-groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupMemberListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_firewall_identity_store_group_member_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryLdapServerListResults]
    def list_firewall_identity_store_ldap_servers(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryLdapServerListResults, Fixnum, Hash)>] DirectoryLdapServerListResults data, response status code and response headers
    def list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_firewall_identity_store_ldap_servers ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.list_firewall_identity_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_firewall_identity_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryDomainListResults]
    def list_firewall_identity_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryDomainListResults, Fixnum, Hash)>] DirectoryDomainListResults data, response status code and response headers
    def list_firewall_identity_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_firewall_identity_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_firewall_identity_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_firewall_identity_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_children(identity_firewall_store_id, group_id, include_users, opts = {})
      data, _status_code, _headers = list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts)
      data
    end

    # List group&#39;s children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_group_children ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.list_group_children"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EastWestSecurityApi.list_group_children"
      end
      # verify the required parameter 'include_users' is set
      if @api_client.config.client_side_validation && include_users.nil?
        fail ArgumentError, "Missing the required parameter 'include_users' when calling EastWestSecurityApi.list_group_children"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/children'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include_users'] = include_users

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_group_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_parent_groups(identity_firewall_store_id, group_id, opts = {})
      data, _status_code, _headers = list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts)
      data
    end

    # List group&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_group_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.list_group_parent_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EastWestSecurityApi.list_group_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_group_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwTransportNodeStatusListResult]
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling EastWestSecurityApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_idfw_status_for_all_transport_nodes_in_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List user's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_user_parent_groups(identity_firewall_store_id, user_id, opts = {})
      data, _status_code, _headers = list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts)
      data
    end

    # List user&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_user_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.list_user_parent_groups"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling EastWestSecurityApi.list_user_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users/{user-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_user_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_users_by_user_name(identity_firewall_store_id, filter_value, opts = {})
      data, _status_code, _headers = list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts)
      data
    end

    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_users_by_user_name ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.list_users_by_user_name"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling EastWestSecurityApi.list_users_by_user_name"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_users_by_user_name, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.list_users_by_user_name, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_users_by_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_idfw_status_by_transport_node(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts)
      data
    end

    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.list_virtual_machine_idfw_status_by_transport_node ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling EastWestSecurityApi.list_virtual_machine_idfw_status_by_transport_node"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#list_virtual_machine_idfw_status_by_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_cancel_export_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_cancel_export_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_cancel_export_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_cancel_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_cancel_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_cancel_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export?action=cancel'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def orgs_org_id_projects_project_id_infra_cancel_import_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_cancel_import_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_cancel_import_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_cancel_import_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_cancel_import_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_cancel_import_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/import?action=cancel'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_draft(org_id, project_id, draft_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_draft_with_http_info(org_id, project_id, draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_download_exported_file(org_id, project_id, opts = {})
      orgs_org_id_projects_project_id_infra_download_exported_file_with_http_info(org_id, project_id, opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_download_exported_file_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_download_exported_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_download_exported_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_download_exported_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export?action=download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/aggregated'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_get_export_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_export_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_export_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def orgs_org_id_projects_project_id_infra_get_import_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_import_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_import_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_import_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_import_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_import_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/import'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/complete'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_rule_statistics(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_rule_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_rule_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_security_policy_statistics(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_security_policy_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_security_policy_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_get_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs (default to ABORT)
    # @return [NetworkPolicyImportResponse]
    def orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw(org_id, project_id, network_policy_import_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw_with_http_info(org_id, project_id, network_policy_import_request, opts)
      data
    end

    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs
    # @return [Array<(NetworkPolicyImportResponse, Fixnum, Hash)>] NetworkPolicyImportResponse data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw_with_http_info(org_id, project_id, network_policy_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      # verify the required parameter 'network_policy_import_request' is set
      if @api_client.config.client_side_validation && network_policy_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_import_request' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      if @api_client.config.client_side_validation && opts[:'on_error'] && !['ABORT', 'CONTINUE'].include?(opts[:'on_error'])
        fail ArgumentError, 'invalid value for "on_error", must be one of ABORT, CONTINUE'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/import-k8s-np-to-dfw'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'on_error'] = opts[:'on_error'] if !opts[:'on_error'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_policy_import_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkPolicyImportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_invoke_export_task(org_id, project_id, export_request_parameter, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_invoke_export_task_with_http_info(org_id, project_id, export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_invoke_export_task_with_http_info(org_id, project_id, export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def orgs_org_id_projects_project_id_infra_list_drafts(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_drafts_with_http_info(org_id, project_id, opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_drafts_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_drafts ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_drafts"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_drafts"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers_with_http_info(org_id, project_id, opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_security_policies_for_domain(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_security_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_security_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def orgs_org_id_projects_project_id_infra_list_security_rules(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_security_rules_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_security_rules_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_draft(org_id, project_id, draft_id, policy_draft, opts = {})
      orgs_org_id_projects_project_id_infra_patch_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_publish_draft(org_id, project_id, draft_id, infra, opts = {})
      orgs_org_id_projects_project_id_infra_publish_draft_with_http_info(org_id, project_id, draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_publish_draft_with_http_info(org_id, project_id, draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_publish_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}?action=publish'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def orgs_org_id_projects_project_id_infra_put_draft(org_id, project_id, draft_id, policy_draft, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def orgs_org_id_projects_project_id_infra_read_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_read_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_read_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_revise_security_policies(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_security_policies_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_security_policies_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_revise_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_revise_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_revise_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_update_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_update_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EastWestSecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#orgs_org_id_projects_project_id_infra_update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a CommunicationEntry
    # Patch the CommunicationEntry. If a communication entry for the given communication-entry-id is not present, the object will get created and if it is present it will be updated. This is a full replace   <br> This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      patch_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      nil
    end

    # Patch a CommunicationEntry
    # Patch the CommunicationEntry. If a communication entry for the given communication-entry-id is not present, the object will get created and if it is present it will be updated. This is a full replace   &lt;br&gt; This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling EastWestSecurityApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling EastWestSecurityApi.patch_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch communication map
    # Patch the communication map for a domain. If a communication map for the given communication-map-id is not present, the object will get created and if it is present it will be updated. This is a full replace  <br> This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_communication_map_for_domain(domain_id, communication_map_id, communication_map, opts = {})
      patch_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts)
      nil
    end

    # Patch communication map
    # Patch the communication map for a domain. If a communication map for the given communication-map-id is not present, the object will get created and if it is present it will be updated. This is a full replace  &lt;br&gt; This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.patch_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.patch_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling EastWestSecurityApi.patch_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      nil
    end

    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling EastWestSecurityApi.patch_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling EastWestSecurityApi.patch_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_container_cluster_span(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      patch_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts)
      nil
    end

    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_container_cluster_span ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.patch_container_cluster_span"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.patch_container_cluster_span"
      end
      # verify the required parameter 'container_cluster_id' is set
      if @api_client.config.client_side_validation && container_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_id' when calling EastWestSecurityApi.patch_container_cluster_span"
      end
      # verify the required parameter 'security_policy_container_cluster' is set
      if @api_client.config.client_side_validation && security_policy_container_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_container_cluster' when calling EastWestSecurityApi.patch_container_cluster_span"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{container-cluster-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'container-cluster-id' + '}', container_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy_container_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_container_cluster_span\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling EastWestSecurityApi.patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_draft(draft_id, policy_draft, opts = {})
      patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling EastWestSecurityApi.patch_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_exclude_list(policy_exclude_list, opts = {})
      patch_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling EastWestSecurityApi.patch_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def patch_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.patch_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling EastWestSecurityApi.patch_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def patch_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling EastWestSecurityApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_pmaas_exclude_list(policy_exclude_list, opts = {})
      patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling EastWestSecurityApi.patch_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling EastWestSecurityApi.patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EastWestSecurityApi.patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EastWestSecurityApi.patch_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      nil
    end

    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.patch_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling EastWestSecurityApi.patch_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#patch_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_login_logout_events(login_logout_event_collection, opts = {})
      post_login_logout_events_with_http_info(login_logout_event_collection, opts)
      nil
    end

    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_login_logout_events_with_http_info(login_logout_event_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.post_login_logout_events ...'
      end
      # verify the required parameter 'login_logout_event_collection' is set
      if @api_client.config.client_side_validation && login_logout_event_collection.nil?
        fail ArgumentError, "Missing the required parameter 'login_logout_event_collection' when calling EastWestSecurityApi.post_login_logout_events"
      end
      # resource path
      local_var_path = '/system/input/login-logout-events'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(login_logout_event_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#post_login_logout_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action 'enable_auto_download', to deactivate use action 'disable_auto_download' and to trigger a download use action 'download'. For Global Manager, the only action that is supported is action=download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyFirewallIpReputationConfig]
    def post_policy_firewall_ip_reputation_config(operation, opts = {})
      data, _status_code, _headers = post_policy_firewall_ip_reputation_config_with_http_info(operation, opts)
      data
    end

    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action &#39;enable_auto_download&#39;, to deactivate use action &#39;disable_auto_download&#39; and to trigger a download use action &#39;download&#39;. For Global Manager, the only action that is supported is action&#x3D;download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def post_policy_firewall_ip_reputation_config_with_http_info(operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.post_policy_firewall_ip_reputation_config ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling EastWestSecurityApi.post_policy_firewall_ip_reputation_config"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['enable_auto_download', 'disable_auto_download', 'download'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of enable_auto_download, disable_auto_download, download"
      end
      # resource path
      local_var_path = '/infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}
      query_params[:'operation'] = operation
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#post_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_draft(draft_id, infra, opts = {})
      publish_draft_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_draft_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.publish_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling EastWestSecurityApi.publish_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def put_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      data, _status_code, _headers = put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      data
    end

    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.put_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling EastWestSecurityApi.put_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling EastWestSecurityApi.put_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#put_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def put_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling EastWestSecurityApi.put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling EastWestSecurityApi.put_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.put_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling EastWestSecurityApi.put_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#put_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_pmaas_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.put_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling EastWestSecurityApi.put_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#put_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def put_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      data, _status_code, _headers = put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      data
    end

    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.put_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling EastWestSecurityApi.put_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#put_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read CommunicationEntry
    # Read CommunicationEntry  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def read_communication_entry(domain_id, communication_map_id, communication_entry_id, opts = {})
      data, _status_code, _headers = read_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts)
      data
    end

    # Read CommunicationEntry
    # Read CommunicationEntry  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def read_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.read_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.read_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling EastWestSecurityApi.read_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read communication-map
    # Read communication-map for a domain.  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def read_communication_map_for_domain(domain_id, communication_map_id, opts = {})
      data, _status_code, _headers = read_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts)
      data
    end

    # Read communication-map
    # Read communication-map for a domain.  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def read_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.read_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.read_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read container cluster for a security policy
    # Read container cluster for a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicyContainerCluster]
    def read_container_cluster_span_for_security_policy(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      data, _status_code, _headers = read_container_cluster_span_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts)
      data
    end

    # Read container cluster for a security policy
    # Read container cluster for a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicyContainerCluster, Fixnum, Hash)>] SecurityPolicyContainerCluster data, response status code and response headers
    def read_container_cluster_span_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_container_cluster_span_for_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.read_container_cluster_span_for_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.read_container_cluster_span_for_security_policy"
      end
      # verify the required parameter 'antrea_cluster_1' is set
      if @api_client.config.client_side_validation && antrea_cluster_1.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_cluster_1' when calling EastWestSecurityApi.read_container_cluster_span_for_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{antrea-cluster-1}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'antrea-cluster-1' + '}', antrea_cluster_1.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyContainerCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_container_cluster_span_for_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def read_draft(draft_id, opts = {})
      data, _status_code, _headers = read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling EastWestSecurityApi.read_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def read_firewall_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.read_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def read_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.read_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.read_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def read_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.read_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.read_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.read_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store(identity_firewall_store_id, opts = {})
      remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.remove_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.remove_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#remove_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.remove_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.remove_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.remove_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#remove_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.remove_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.remove_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.remove_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#remove_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def replace_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.replace_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#replace_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def replace_or_create_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.replace_or_create_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'identity_firewall_store_event_log_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_event_log_server' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#replace_or_create_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def replace_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.replace_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling EastWestSecurityApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#replace_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds (default to 0)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def request_firewall_identity_store_sync(firewall_identity_store_id, action, opts = {})
      request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts)
      nil
    end

    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.request_firewall_identity_store_sync ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.request_firewall_identity_store_sync"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling EastWestSecurityApi.request_firewall_identity_store_sync"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['FULL_SYNC', 'DELTA_SYNC', 'STOP_SYNC'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of FULL_SYNC, DELTA_SYNC, STOP_SYNC"
      end
      if @api_client.config.client_side_validation && !opts[:'delay'].nil? && opts[:'delay'] < 0
        fail ArgumentError, 'invalid value for "opts[:"delay"]" when calling EastWestSecurityApi.request_firewall_identity_store_sync, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#request_firewall_identity_store_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_rule_stats(category, opts = {})
      reset_rule_stats_with_http_info(category, opts)
      nil
    end

    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_rule_stats_with_http_info(category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.reset_rule_stats ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling EastWestSecurityApi.reset_rule_stats"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['DFW', 'EDGE', 'BRIDGEFIREWALL'].include?(category)
        fail ArgumentError, "invalid value for 'category', must be one of DFW, EDGE, BRIDGEFIREWALL"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = category
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#reset_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of communication entry
    # This is used to re-order a communictation entry within a communication map.  <br> This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id?action=revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [CommunicationEntry]
    def revise_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      data, _status_code, _headers = revise_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      data
    end

    # Revise the positioning of communication entry
    # This is used to re-order a communictation entry within a communication map.  &lt;br&gt; This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id?action&#x3D;revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def revise_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.revise_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.revise_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.revise_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling EastWestSecurityApi.revise_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling EastWestSecurityApi.revise_communication_entry"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#revise_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of communication maps
    # This is used to set a precedence of a communication map w.r.t others.  <br> This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id?action=revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [CommunicationMap]
    def revise_communication_maps(domain_id, communication_map_id, communication_map, opts = {})
      data, _status_code, _headers = revise_communication_maps_with_http_info(domain_id, communication_map_id, communication_map, opts)
      data
    end

    # Revise the positioning of communication maps
    # This is used to set a precedence of a communication map w.r.t others.  &lt;br&gt; This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id?action&#x3D;revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def revise_communication_maps_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.revise_communication_maps ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.revise_communication_maps"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.revise_communication_maps"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling EastWestSecurityApi.revise_communication_maps"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#revise_communication_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_security_policies(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_security_policies_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_security_policies_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.revise_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.revise_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.revise_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EastWestSecurityApi.revise_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#revise_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.revise_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.revise_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.revise_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.revise_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EastWestSecurityApi.revise_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#revise_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSize]
    def scan_firewall_identity_store_size(directory_domain, opts = {})
      data, _status_code, _headers = scan_firewall_identity_store_size_with_http_info(directory_domain, opts)
      data
    end

    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSize, Fixnum, Hash)>] DirectoryDomainSize data, response status code and response headers
    def scan_firewall_identity_store_size_with_http_info(directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.scan_firewall_identity_store_size ...'
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling EastWestSecurityApi.scan_firewall_identity_store_size"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-size'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSize')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#scan_firewall_identity_store_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupListResults]
    def search_firewall_identity_groups(firewall_identity_store_id, filter_value, opts = {})
      data, _status_code, _headers = search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts)
      data
    end

    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupListResults, Fixnum, Hash)>] DirectoryGroupListResults data, response status code and response headers
    def search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.search_firewall_identity_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.search_firewall_identity_groups"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling EastWestSecurityApi.search_firewall_identity_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.search_firewall_identity_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EastWestSecurityApi.search_firewall_identity_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#search_firewall_identity_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling EastWestSecurityApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling EastWestSecurityApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling EastWestSecurityApi.test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API.  <br> This API is deprecated. Please use the following API instead PUT /infra/domains/domain-id/security-policies/securit-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def update_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      data, _status_code, _headers = update_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      data
    end

    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API.  &lt;br&gt; This API is deprecated. Please use the following API instead PUT /infra/domains/domain-id/security-policies/securit-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def update_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.update_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.update_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling EastWestSecurityApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling EastWestSecurityApi.update_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#update_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update communication map
    # Create or Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced.  <br> This API is deprecated. Please use the following API instead. PUT /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def update_communication_map_for_domain(domain_id, communication_map_id, communication_map, opts = {})
      data, _status_code, _headers = update_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts)
      data
    end

    # Create or Update communication map
    # Create or Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced.  &lt;br&gt; This API is deprecated. Please use the following API instead. PUT /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def update_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.update_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling EastWestSecurityApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling EastWestSecurityApi.update_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#update_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def update_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling EastWestSecurityApi.update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling EastWestSecurityApi.update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.update_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling EastWestSecurityApi.update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.update_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling EastWestSecurityApi.update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling EastWestSecurityApi.update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling EastWestSecurityApi.update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling EastWestSecurityApi.update_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param 'enforcement_point_path' would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServerStatus]
    def verify_firewall_identity_store_event_log_server(directory_event_log_server, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts)
      data
    end

    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param &#39;enforcement_point_path&#39; would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServerStatus, Fixnum, Hash)>] DirectoryEventLogServerStatus data, response status code and response headers
    def verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.verify_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling EastWestSecurityApi.verify_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-event-log-servers/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#verify_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServerStatus]
    def verify_firewall_identity_store_ldap_server(directory_ldap_server, action, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts)
      data
    end

    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServerStatus, Fixnum, Hash)>] DirectoryLdapServerStatus data, response status code and response headers
    def verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EastWestSecurityApi.verify_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling EastWestSecurityApi.verify_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling EastWestSecurityApi.verify_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-ldap-server'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EastWestSecurityApi#verify_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
