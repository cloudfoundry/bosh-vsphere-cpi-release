=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class HostTransportNodeProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update a Host Transport Node Profile
    # Host transport node profile captures the configuration needed to create a host transport node. A host transport node profile can be attached to compute collections for automatic host transport node creation of member hosts.  When configurations of a host transport node profile(TNP) are updated, all the host transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
    # @param transport_node_profile_id 
    # @param policy_host_transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership (default to false)
    # @return [PolicyHostTransportNodeProfile]
    def create_or_update_policy_host_transport_node_profile(transport_node_profile_id, policy_host_transport_node_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, policy_host_transport_node_profile, opts)
      data
    end

    # Update a Host Transport Node Profile
    # Host transport node profile captures the configuration needed to create a host transport node. A host transport node profile can be attached to compute collections for automatic host transport node creation of member hosts.  When configurations of a host transport node profile(TNP) are updated, all the host transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
    # @param transport_node_profile_id 
    # @param policy_host_transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership
    # @return [Array<(PolicyHostTransportNodeProfile, Fixnum, Hash)>] PolicyHostTransportNodeProfile data, response status code and response headers
    def create_or_update_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, policy_host_transport_node_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostTransportNodeProfilesApi.create_or_update_policy_host_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling HostTransportNodeProfilesApi.create_or_update_policy_host_transport_node_profile"
      end
      # verify the required parameter 'policy_host_transport_node_profile' is set
      if @api_client.config.client_side_validation && policy_host_transport_node_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_host_transport_node_profile' when calling HostTransportNodeProfilesApi.create_or_update_policy_host_transport_node_profile"
      end
      # resource path
      local_var_path = '/infra/host-transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override_nsx_ownership'] = opts[:'override_nsx_ownership'] if !opts[:'override_nsx_ownership'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_host_transport_node_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostTransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostTransportNodeProfilesApi#create_or_update_policy_host_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Host Transport Node Profile
    # Deletes the specified host transport node profile. A host transport node profile can be deleted only when it is not attached to any compute collection. 
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_host_transport_node_profile(transport_node_profile_id, opts = {})
      delete_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, opts)
      nil
    end

    # Delete a Host Transport Node Profile
    # Deletes the specified host transport node profile. A host transport node profile can be deleted only when it is not attached to any compute collection. 
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_host_transport_node_profile_with_http_info(transport_node_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostTransportNodeProfilesApi.delete_policy_host_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling HostTransportNodeProfilesApi.delete_policy_host_transport_node_profile"
      end
      # resource path
      local_var_path = '/infra/host-transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostTransportNodeProfilesApi#delete_policy_host_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Node
    # Returns information about a specified host transport node profile.
    # @param host_transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyHostTransportNodeProfile]
    def get_policy_host_transport_node_profile(host_transport_node_profile_id, opts = {})
      data, _status_code, _headers = get_policy_host_transport_node_profile_with_http_info(host_transport_node_profile_id, opts)
      data
    end

    # Get a Transport Node
    # Returns information about a specified host transport node profile.
    # @param host_transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyHostTransportNodeProfile, Fixnum, Hash)>] PolicyHostTransportNodeProfile data, response status code and response headers
    def get_policy_host_transport_node_profile_with_http_info(host_transport_node_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostTransportNodeProfilesApi.get_policy_host_transport_node_profile ...'
      end
      # verify the required parameter 'host_transport_node_profile_id' is set
      if @api_client.config.client_side_validation && host_transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_profile_id' when calling HostTransportNodeProfilesApi.get_policy_host_transport_node_profile"
      end
      # resource path
      local_var_path = '/infra/host-transport-node-profiles/{host-transport-node-profile-id}'.sub('{' + 'host-transport-node-profile-id' + '}', host_transport_node_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostTransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostTransportNodeProfilesApi#get_policy_host_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Host Transport Nodes
    # Returns information about all host transport node profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyHostTransportNodeProfileListResult]
    def list_policy_host_transport_node_profiles(opts = {})
      data, _status_code, _headers = list_policy_host_transport_node_profiles_with_http_info(opts)
      data
    end

    # List Host Transport Nodes
    # Returns information about all host transport node profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyHostTransportNodeProfileListResult, Fixnum, Hash)>] PolicyHostTransportNodeProfileListResult data, response status code and response headers
    def list_policy_host_transport_node_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostTransportNodeProfilesApi.list_policy_host_transport_node_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HostTransportNodeProfilesApi.list_policy_host_transport_node_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HostTransportNodeProfilesApi.list_policy_host_transport_node_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/host-transport-node-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostTransportNodeProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostTransportNodeProfilesApi#list_policy_host_transport_node_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
