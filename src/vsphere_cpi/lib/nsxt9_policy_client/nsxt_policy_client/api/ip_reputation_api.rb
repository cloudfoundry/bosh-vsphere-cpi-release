=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IPReputationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # It returns the exclusion IP list present in the default malicious group
    # Querying the API on GM with a valid enforcement point path, the API will return the list of exclusion IPs from the default malicious IP group of the site represented by the enforcement point path. In the absence of an enforcement point path, the API returns the exclusion IPs present in the global default malicious IP group of GM. Querying the API on LM, the api will return a list of exclusion IP addresses present in the local default malicious ip group. The API will not consider the IP addresses present in the user created malicious group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPReputationExclusionList]
    def get_ip_reputation_exclusion_list(opts = {})
      data, _status_code, _headers = get_ip_reputation_exclusion_list_with_http_info(opts)
      data
    end

    # It returns the exclusion IP list present in the default malicious group
    # Querying the API on GM with a valid enforcement point path, the API will return the list of exclusion IPs from the default malicious IP group of the site represented by the enforcement point path. In the absence of an enforcement point path, the API returns the exclusion IPs present in the global default malicious IP group of GM. Querying the API on LM, the api will return a list of exclusion IP addresses present in the local default malicious ip group. The API will not consider the IP addresses present in the user created malicious group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPReputationExclusionList, Fixnum, Hash)>] IPReputationExclusionList data, response status code and response headers
    def get_ip_reputation_exclusion_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.get_ip_reputation_exclusion_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPReputationApi.get_ip_reputation_exclusion_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPReputationApi.get_ip_reputation_exclusion_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-reputation-exclusion-list'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationExclusionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#get_ip_reputation_exclusion_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallIpReputationConfig]
    def get_policy_firewall_ip_reputation_config(opts = {})
      data, _status_code, _headers = get_policy_firewall_ip_reputation_config_with_http_info(opts)
      data
    end

    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def get_policy_firewall_ip_reputation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.get_policy_firewall_ip_reputation_config ...'
      end
      # resource path
      local_var_path = '/infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#get_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IP reputation site mapping on GM.
    # Read IP reputation site mapping details for a given site. 
    # @param mapping_id mapping ID
    # @param [Hash] opts the optional parameters
    # @return [IPReputationSiteMapping]
    def global_infra_get_ip_reputation_site_mapping(mapping_id, opts = {})
      data, _status_code, _headers = global_infra_get_ip_reputation_site_mapping_with_http_info(mapping_id, opts)
      data
    end

    # Read IP reputation site mapping on GM.
    # Read IP reputation site mapping details for a given site. 
    # @param mapping_id mapping ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPReputationSiteMapping, Fixnum, Hash)>] IPReputationSiteMapping data, response status code and response headers
    def global_infra_get_ip_reputation_site_mapping_with_http_info(mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.global_infra_get_ip_reputation_site_mapping ...'
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling IPReputationApi.global_infra_get_ip_reputation_site_mapping"
      end
      # resource path
      local_var_path = '/global-infra/ip-reputation-site-mappings/{mapping-id}'.sub('{' + 'mapping-id' + '}', mapping_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationSiteMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#global_infra_get_ip_reputation_site_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallIpReputationConfig]
    def global_infra_get_policy_firewall_ip_reputation_config(opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_ip_reputation_config_with_http_info(opts)
      data
    end

    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def global_infra_get_policy_firewall_ip_reputation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.global_infra_get_policy_firewall_ip_reputation_config ...'
      end
      # resource path
      local_var_path = '/global-infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#global_infra_get_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IP reputation site mapping for all sites.
    # List IP reputation site mapping details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPReputationSiteMappingListResult]
    def global_infra_list_ip_reputation_site_mapping(opts = {})
      data, _status_code, _headers = global_infra_list_ip_reputation_site_mapping_with_http_info(opts)
      data
    end

    # List IP reputation site mapping for all sites.
    # List IP reputation site mapping details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPReputationSiteMappingListResult, Fixnum, Hash)>] IPReputationSiteMappingListResult data, response status code and response headers
    def global_infra_list_ip_reputation_site_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.global_infra_list_ip_reputation_site_mapping ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPReputationApi.global_infra_list_ip_reputation_site_mapping, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPReputationApi.global_infra_list_ip_reputation_site_mapping, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ip-reputation-site-mappings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationSiteMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#global_infra_list_ip_reputation_site_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action 'enable_auto_download', to deactivate use action 'disable_auto_download' and to trigger a download use action 'download'. For Global Manager, the only action that is supported is action=download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyFirewallIpReputationConfig]
    def global_infra_post_policy_firewall_ip_reputation_config(operation, opts = {})
      data, _status_code, _headers = global_infra_post_policy_firewall_ip_reputation_config_with_http_info(operation, opts)
      data
    end

    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action &#39;enable_auto_download&#39;, to deactivate use action &#39;disable_auto_download&#39; and to trigger a download use action &#39;download&#39;. For Global Manager, the only action that is supported is action&#x3D;download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def global_infra_post_policy_firewall_ip_reputation_config_with_http_info(operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.global_infra_post_policy_firewall_ip_reputation_config ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling IPReputationApi.global_infra_post_policy_firewall_ip_reputation_config"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['enable_auto_download', 'disable_auto_download', 'download'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of enable_auto_download, disable_auto_download, download"
      end
      # resource path
      local_var_path = '/global-infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}
      query_params[:'operation'] = operation
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#global_infra_post_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action 'enable_auto_download', to deactivate use action 'disable_auto_download' and to trigger a download use action 'download'. For Global Manager, the only action that is supported is action=download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyFirewallIpReputationConfig]
    def post_policy_firewall_ip_reputation_config(operation, opts = {})
      data, _status_code, _headers = post_policy_firewall_ip_reputation_config_with_http_info(operation, opts)
      data
    end

    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action &#39;enable_auto_download&#39;, to deactivate use action &#39;disable_auto_download&#39; and to trigger a download use action &#39;download&#39;. For Global Manager, the only action that is supported is action&#x3D;download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def post_policy_firewall_ip_reputation_config_with_http_info(operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPReputationApi.post_policy_firewall_ip_reputation_config ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling IPReputationApi.post_policy_firewall_ip_reputation_config"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['enable_auto_download', 'disable_auto_download', 'download'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of enable_auto_download, disable_auto_download, download"
      end
      # resource path
      local_var_path = '/infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}
      query_params[:'operation'] = operation
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPReputationApi#post_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
