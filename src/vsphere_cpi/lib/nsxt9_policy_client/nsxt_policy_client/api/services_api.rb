=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, merge with the existing L2Vpn. This is a patch. This API is deprecated. Please use PATCH /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in an L2VPNSession being internally created/patched: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      create_or_patch_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts)
      nil
    end

    # Create or patch an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, merge with the existing L2Vpn. This is a patch. This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in an L2VPNSession being internally created/patched: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling ServicesApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'l2_vpn' is set
      if @api_client.config.client_side_validation && l2_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn' when calling ServicesApi.create_or_patch_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0 locale service.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the   new VPN path instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_service(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0 locale service.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the   new VPN path instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_patch_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_patch_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_patch_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for given locale service under Tier-0.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_patch_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_patch_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_l2_vpn_service(tier_0_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-0
    # Create or patch L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_patch_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_patch_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for a given locale service under Tier-1.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_patch_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1 locale service.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1 locale service.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_patch_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_l2_vpn_service(tier_1_id, service_id, l2_vpn_service, opts = {})
      create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_patch_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_patch_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, update the existing L2Vpn. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in an L2VPNSession being internally created/updated: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [L2Vpn]
    def create_or_replace_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      data, _status_code, _headers = create_or_replace_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts)
      data
    end

    # Create or replace an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, update the existing L2Vpn. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in an L2VPNSession being internally created/updated: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2Vpn, Fixnum, Hash)>] L2Vpn data, response status code and response headers
    def create_or_replace_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_replace_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling ServicesApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'l2_vpn' is set
      if @api_client.config.client_side_validation && l2_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn' when calling ServicesApi.create_or_replace_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_replace_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0 locale service. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_l2_vpn_service(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0 locale service. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_update_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_update_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_update_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for given locale service under Tier-0. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for given locale service under Tier-0. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_update_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under given Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under given Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_update_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0. Revision is optional for creation and required for update.
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_tier0_vpn_l2_vpn_service(tier_0_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-0
    # Create or fully replace L2VPN service for given Tier-0. Revision is optional for creation and required for update.
    # @param tier_0_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.create_or_update_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_update_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for a given locale service under Tier-1. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for a given locale service under Tier-1. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_update_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1 locale service. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1 locale service. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_update_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def create_or_update_tier1_vpn_l2_vpn_service(tier_1_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def create_or_update_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.create_or_update_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.create_or_update_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#create_or_update_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an L2Vpn
    # Delete the L2Vpn with the given id. This API is deprecated. Please use DELETE /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in the L2VPNSession being deleted: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      delete_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      nil
    end

    # Delete an L2Vpn
    # Delete the L2Vpn with the given id. This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in the L2VPNSession being deleted: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.delete_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.delete_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling ServicesApi.delete_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0 locale service.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      delete_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0 locale service.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.delete_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.delete_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_entry(service_id, service_entry_id, opts = {})
      delete_service_entry_with_http_info(service_id, service_entry_id, opts)
      nil
    end

    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.delete_service_entry"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_for_tenant(service_id, opts = {})
      delete_service_for_tenant_with_http_info(service_id, opts)
      nil
    end

    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_service_for_tenant"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for given locale service under Tier-0.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      delete_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.delete_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.delete_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, opts = {})
      delete_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.delete_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_l2_vpn_service(tier_0_id, service_id, opts = {})
      delete_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-0
    # Delete L2VPN service for given Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.delete_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for a given locale service under Tier-1.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/psec-vpn-services/&lt;service-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      delete_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/psec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.delete_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.delete_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1 locale service.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      delete_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1 locale service.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.delete_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.delete_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, opts = {})
      delete_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_l2_vpn_service(tier_1_id, service_id, opts = {})
      delete_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.delete_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.delete_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#delete_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0 locale service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_l2_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0 locale service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_l2_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.get_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.get_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service for given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier0_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier0_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier0_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.get_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.get_tier0_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier0_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier0_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier0_vpn_ip_sec_vpn_service(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier0_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.get_tier0_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier0_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier0_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_tier0_vpn_l2_vpn_service(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-0
    # Get L2VPN service for given Tier-0
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_tier0_vpn_l2_vpn_service_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier0_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.get_tier0_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier0_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier0_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier1_ip_sec_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier1_ip_sec_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier1_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.get_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.get_tier1_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier1_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier1_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1 locale service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_tier1_l2_vpn_service(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1 locale service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_tier1_l2_vpn_service_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier1_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.get_tier1_l2_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.get_tier1_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier1_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier1_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_tier1_vpn_ip_sec_vpn_service(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def get_tier1_vpn_l2_vpn_service(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def get_tier1_vpn_l2_vpn_service_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.get_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.get_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#get_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceEntryListResult]
    def global_infra_list_service_entries(service_id, opts = {})
      data, _status_code, _headers = global_infra_list_service_entries_with_http_info(service_id, opts)
      data
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceEntryListResult, Fixnum, Hash)>] ServiceEntryListResult data, response status code and response headers
    def global_infra_list_service_entries_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.global_infra_list_service_entries ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.global_infra_list_service_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.global_infra_list_service_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.global_infra_list_service_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#global_infra_list_service_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceListResult]
    def global_infra_list_services_for_tenant(opts = {})
      data, _status_code, _headers = global_infra_list_services_for_tenant_with_http_info(opts)
      data
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceListResult, Fixnum, Hash)>] ServiceListResult data, response status code and response headers
    def global_infra_list_services_for_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.global_infra_list_services_for_tenant ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.global_infra_list_services_for_tenant, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.global_infra_list_services_for_tenant, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#global_infra_list_services_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def global_infra_read_service_entry(service_id, service_entry_id, opts = {})
      data, _status_code, _headers = global_infra_read_service_entry_with_http_info(service_id, service_entry_id, opts)
      data
    end

    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def global_infra_read_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.global_infra_read_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.global_infra_read_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.global_infra_read_service_entry"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#global_infra_read_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def global_infra_read_service_for_tenant(service_id, opts = {})
      data, _status_code, _headers = global_infra_read_service_for_tenant_with_http_info(service_id, opts)
      data
    end

    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def global_infra_read_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.global_infra_read_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.global_infra_read_service_for_tenant"
      end
      # resource path
      local_var_path = '/global-infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#global_infra_read_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_l2_vpn_services(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l2_vpn_services_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_l2_vpn_services_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.list_l2_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.list_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List L2Vpns
    # Paginated list of L2Vpns. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions instead. If used, this deprecated API will only return L2Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-context/ l2vpns/<l2vpn-id> APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VpnListResult]
    def list_l2_vpns(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l2_vpns_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List L2Vpns
    # Paginated list of L2Vpns. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions instead. If used, this deprecated API will only return L2Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-context/ l2vpns/&lt;l2vpn-id&gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VpnListResult, Fixnum, Hash)>] L2VpnListResult data, response status code and response headers
    def list_l2_vpns_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_l2_vpns ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.list_l2_vpns"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.list_l2_vpns"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_l2_vpns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_l2_vpns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_l2_vpns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceEntryListResult]
    def list_service_entries(service_id, opts = {})
      data, _status_code, _headers = list_service_entries_with_http_info(service_id, opts)
      data
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceEntryListResult, Fixnum, Hash)>] ServiceEntryListResult data, response status code and response headers
    def list_service_entries_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_service_entries ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.list_service_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_service_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_service_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_service_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceListResult]
    def list_services_for_tenant(opts = {})
      data, _status_code, _headers = list_services_for_tenant_with_http_info(opts)
      data
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceListResult, Fixnum, Hash)>] ServiceListResult data, response status code and response headers
    def list_services_for_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_services_for_tenant ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_services_for_tenant, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_services_for_tenant, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_services_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given locale service under Tier-0. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier0_ip_sec_vpn_services(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_services_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given locale service under Tier-0. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_services_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier0_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.list_tier0_ip_sec_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.list_tier0_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier0_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier0_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier0_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given Tier-0. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier0_vpn_ip_sec_vpn_services(tier_0_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_ip_sec_vpn_services_with_http_info(tier_0_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for given Tier-0. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier0_vpn_ip_sec_vpn_services_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier0_vpn_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.list_tier0_vpn_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier0_vpn_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier0_vpn_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier0_vpn_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_tier0_vpn_l2_vpn_services(tier_0_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_l2_vpn_services_with_http_info(tier_0_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-0
    # Get paginated list of all L2VPN services under Tier-0.
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_tier0_vpn_l2_vpn_services_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier0_vpn_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.list_tier0_vpn_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier0_vpn_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier0_vpn_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier0_vpn_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier1_ip_sec_vpn_services(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_services_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_services_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier1_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.list_tier1_ip_sec_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.list_tier1_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier1_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_tier1_l2_vpn_services(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier1_l2_vpn_services_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_tier1_l2_vpn_services_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier1_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.list_tier1_l2_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.list_tier1_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier1_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_tier1_vpn_ip_sec_vpn_services(tier_1_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_ip_sec_vpn_services_with_http_info(tier_1_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_tier1_vpn_ip_sec_vpn_services_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier1_vpn_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.list_tier1_vpn_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_vpn_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_vpn_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier1_vpn_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def list_tier1_vpn_l2_vpn_services(tier_1_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_l2_vpn_services_with_http_info(tier_1_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def list_tier1_vpn_l2_vpn_services_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.list_tier1_vpn_l2_vpn_services ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.list_tier1_vpn_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_vpn_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.list_tier1_vpn_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#list_tier1_vpn_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts)
      nil
    end

    # Create or patch L2VPN service under Tier-1
    # Create or patch L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts)
      data
    end

    # Create or fully replace L2VPN service under Tier-1
    # Create or fully replace L2VPN service for given Tier-1. Revision is optional for creation and required for update.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param l2_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, l2_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'l2_vpn_service' is set
      if @api_client.config.client_side_validation && l2_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_service' when calling ServicesApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service entry
    # Delete Service entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_service_entry(org_id, project_id, service_id, service_entry_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, opts)
      nil
    end

    # Delete Service entry
    # Delete Service entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_entry"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_delete_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service
    # Delete Service
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_service_for_tenant(org_id, project_id, service_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_service_for_tenant_with_http_info(org_id, project_id, service_id, opts)
      nil
    end

    # Delete Service
    # Delete Service
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_service_for_tenant_with_http_info(org_id, project_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_for_tenant ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_for_tenant"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_for_tenant"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_service_for_tenant"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_delete_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete given IPSec VPN service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      nil
    end

    # Delete L2VPN service under Tier-1
    # Delete L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get given IPSec VPN service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNService]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN service under Tier-1
    # Get L2VPN service for given Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNService, Fixnum, Hash)>] L2VPNService data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceEntryListResult]
    def orgs_org_id_projects_project_id_infra_list_service_entries(org_id, project_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_service_entries_with_http_info(org_id, project_id, service_id, opts)
      data
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceEntryListResult, Fixnum, Hash)>] ServiceEntryListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_service_entries_with_http_info(org_id, project_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_list_service_entries ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_service_entries"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_service_entries"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_service_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_service_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_service_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}/service-entries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_list_service_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Services for infra
    # Paginated list of Services for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceListResult]
    def orgs_org_id_projects_project_id_infra_list_services_for_tenant(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_services_for_tenant_with_http_info(org_id, project_id, opts)
      data
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :default_service Fetch all default services
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceListResult, Fixnum, Hash)>] ServiceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_services_for_tenant_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_list_services_for_tenant ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_services_for_tenant"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_services_for_tenant"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_services_for_tenant, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_services_for_tenant, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'default_service'] = opts[:'default_service'] if !opts[:'default_service'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_list_services_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNServiceListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get L2VPN service list result under Tier-1
    # Get paginated list of all L2VPN services under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNServiceListResult, Fixnum, Hash)>] L2VPNServiceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServicesApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_service_entry(org_id, project_id, service_id, service_entry_id, service_entry, opts = {})
      orgs_org_id_projects_project_id_infra_patch_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, service_entry, opts)
      nil
    end

    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_entry"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_patch_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_service_for_tenant(org_id, project_id, service_id, service, opts = {})
      orgs_org_id_projects_project_id_infra_patch_service_for_tenant_with_http_info(org_id, project_id, service_id, service, opts)
      nil
    end

    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_service_for_tenant_with_http_info(org_id, project_id, service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_for_tenant ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_for_tenant"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_for_tenant"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling ServicesApi.orgs_org_id_projects_project_id_infra_patch_service_for_tenant"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_patch_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Service entry
    # Service entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def orgs_org_id_projects_project_id_infra_read_service_entry(org_id, project_id, service_id, service_entry_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, opts)
      data
    end

    # Service entry
    # Service entry
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_read_service_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_entry"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_read_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a service
    # Read a service
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def orgs_org_id_projects_project_id_infra_read_service_for_tenant(org_id, project_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_service_for_tenant_with_http_info(org_id, project_id, service_id, opts)
      data
    end

    # Read a service
    # Read a service
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_service_for_tenant_with_http_info(org_id, project_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_read_service_for_tenant ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_for_tenant"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_for_tenant"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_read_service_for_tenant"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_read_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def orgs_org_id_projects_project_id_infra_update_service_entry(org_id, project_id, service_id, service_entry_id, service_entry, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, service_entry, opts)
      data
    end

    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_service_entry_with_http_info(org_id, project_id, service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_update_service_entry ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_entry"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_entry"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_entry"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_update_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def orgs_org_id_projects_project_id_infra_update_service_for_tenant(org_id, project_id, service_id, service, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_service_for_tenant_with_http_info(org_id, project_id, service_id, service, opts)
      data
    end

    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_service_for_tenant_with_http_info(org_id, project_id, service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.orgs_org_id_projects_project_id_infra_update_service_for_tenant ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_for_tenant"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_for_tenant"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling ServicesApi.orgs_org_id_projects_project_id_infra_update_service_for_tenant"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/services/{service-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#orgs_org_id_projects_project_id_infra_update_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_entry(service_id, service_entry_id, service_entry, opts = {})
      patch_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts)
      nil
    end

    # Patch a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.patch_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.patch_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.patch_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling ServicesApi.patch_service_entry"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#patch_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_for_tenant(service_id, service, opts = {})
      patch_service_for_tenant_with_http_info(service_id, service, opts)
      nil
    end

    # Patch a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_for_tenant_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.patch_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.patch_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling ServicesApi.patch_service_for_tenant"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#patch_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L2Vpn
    # Read the L2Vpn with the given id. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/L2VPN_<l2vpn-id> instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L2Vpn]
    def read_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Read an L2Vpn
    # Read the L2Vpn with the given id. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2Vpn, Fixnum, Hash)>] L2Vpn data, response status code and response headers
    def read_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.read_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.read_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.read_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling ServicesApi.read_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#read_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L2Vpn Context
    # Read L2Vpn Context. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VpnContext]
    def read_l2_vpn_context(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_context_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read an L2Vpn Context
    # Read L2Vpn Context. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VpnContext, Fixnum, Hash)>] L2VpnContext data, response status code and response headers
    def read_l2_vpn_context_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.read_l2_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.read_l2_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.read_l2_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnContext')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#read_l2_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Peer Config for L2Vpn
    # Get peer config for the L2Vpn to configure the remote side of the tunnel. - no enforcement point path specified: L2Vpn Peer Codes will be evaluated on each enforcement point. - {enforcement_point_path}: L2Vpn Peer Codes are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/L2VPN_<l2vpn-id>/peer-config  instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VpnPeerConfig]
    def read_l2_vpn_peer_config(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Get Peer Config for L2Vpn
    # Get peer config for the L2Vpn to configure the remote side of the tunnel. - no enforcement point path specified: L2Vpn Peer Codes will be evaluated on each enforcement point. - {enforcement_point_path}: L2Vpn Peer Codes are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt;/peer-config  instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VpnPeerConfig, Fixnum, Hash)>] AggregateL2VpnPeerConfig data, response status code and response headers
    def read_l2_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.read_l2_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.read_l2_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.read_l2_vpn_peer_config"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling ServicesApi.read_l2_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#read_l2_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the L3Vpn Context
    # Read the L3Vpn Context under tier-0. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [L3VpnContext]
    def read_l3_vpn_context(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read the L3Vpn Context
    # Read the L3Vpn Context under tier-0. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/ &amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3VpnContext, Fixnum, Hash)>] L3VpnContext data, response status code and response headers
    def read_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.read_l3_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling ServicesApi.read_l3_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling ServicesApi.read_l3_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3VpnContext')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#read_l3_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def read_service_entry(service_id, service_entry_id, opts = {})
      data, _status_code, _headers = read_service_entry_with_http_info(service_id, service_entry_id, opts)
      data
    end

    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def read_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.read_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.read_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.read_service_entry"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#read_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def read_service_for_tenant(service_id, opts = {})
      data, _status_code, _headers = read_service_for_tenant_with_http_info(service_id, opts)
      data
    end

    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def read_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.read_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.read_service_for_tenant"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#read_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def update_service_entry(service_id, service_entry_id, service_entry, opts = {})
      data, _status_code, _headers = update_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts)
      data
    end

    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def update_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.update_service_entry ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.update_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling ServicesApi.update_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling ServicesApi.update_service_entry"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}/service-entries/{service-entry-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#update_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def update_service_for_tenant(service_id, service, opts = {})
      data, _status_code, _headers = update_service_for_tenant_with_http_info(service_id, service, opts)
      data
    end

    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def update_service_for_tenant_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.update_service_for_tenant ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServicesApi.update_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling ServicesApi.update_service_for_tenant"
      end
      # resource path
      local_var_path = '/infra/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#update_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
