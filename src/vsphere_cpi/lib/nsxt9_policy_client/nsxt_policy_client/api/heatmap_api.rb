=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class HeatmapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create container cluster status
    # Create container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param container_cluster_status 
    # @param [Hash] opts the optional parameters
    # @return [ContainerClusterStatus]
    def add_container_cluster_status(site_id, enforcement_point_id, container_cluster_status, opts = {})
      data, _status_code, _headers = add_container_cluster_status_with_http_info(site_id, enforcement_point_id, container_cluster_status, opts)
      data
    end

    # Create container cluster status
    # Create container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param container_cluster_status 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerClusterStatus, Fixnum, Hash)>] ContainerClusterStatus data, response status code and response headers
    def add_container_cluster_status_with_http_info(site_id, enforcement_point_id, container_cluster_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.add_container_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.add_container_cluster_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.add_container_cluster_status"
      end
      # verify the required parameter 'container_cluster_status' is set
      if @api_client.config.client_side_validation && container_cluster_status.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_status' when calling HeatmapApi.add_container_cluster_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster-ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(container_cluster_status)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#add_container_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete container cluster status
    # Delete container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_container_cluster_status(site_id, enforcement_point_id, cluster_id, opts = {})
      delete_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts)
      nil
    end

    # Delete container cluster status
    # Delete container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.delete_container_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.delete_container_cluster_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.delete_container_cluster_status"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling HeatmapApi.delete_container_cluster_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster/{cluster-id}/ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#delete_container_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the details of latency status for all appliances 
    # Get the details of latency status for all appliances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ApplianceLatencyListResult]
    def get_all_appliance_latency_data(opts = {})
      data, _status_code, _headers = get_all_appliance_latency_data_with_http_info(opts)
      data
    end

    # Get the details of latency status for all appliances 
    # Get the details of latency status for all appliances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ApplianceLatencyListResult, Fixnum, Hash)>] ApplianceLatencyListResult data, response status code and response headers
    def get_all_appliance_latency_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_all_appliance_latency_data ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_all_appliance_latency_data, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_all_appliance_latency_data, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/appliances/latency/status'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplianceLatencyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_all_appliance_latency_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached. 
    # Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_type Transport node type
    # @return [HeatMapTransportZoneStatus]
    def get_all_tns_status(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_all_tns_status_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached. 
    # Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_type Transport node type
    # @return [Array<(HeatMapTransportZoneStatus, Fixnum, Hash)>] HeatMapTransportZoneStatus data, response status code and response headers
    def get_all_tns_status_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_all_tns_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_all_tns_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_all_tns_status"
      end
      if @api_client.config.client_side_validation && opts[:'node_type'] && !['HOST', 'EDGE'].include?(opts[:'node_type'])
        fail ArgumentError, 'invalid value for "node_type", must be one of HOST, EDGE'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes-aggstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_all_tns_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all transport zone status. The service layer does not support source = realtime or cached. 
    # Get high-level summary of all transport zone status. The service layer does not support source = realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @return [HeatMapTransportNodesAggregateStatus]
    def get_all_tz_status(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_all_tz_status_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get high-level summary of all transport zone status. The service layer does not support source &#x3D; realtime or cached. 
    # Get high-level summary of all transport zone status. The service layer does not support source &#x3D; realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(HeatMapTransportNodesAggregateStatus, Fixnum, Hash)>] HeatMapTransportNodesAggregateStatus data, response status code and response headers
    def get_all_tz_status_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_all_tz_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_all_tz_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_all_tz_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones-aggstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportNodesAggregateStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_all_tz_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the container cluster status by given id
    # Get the container cluster status by given id
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [ContainerClusterSummary]
    def get_container_cluster_status(site_id, enforcement_point_id, cluster_id, opts = {})
      data, _status_code, _headers = get_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts)
      data
    end

    # Get the container cluster status by given id
    # Get the container cluster status by given id
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerClusterSummary, Fixnum, Hash)>] ContainerClusterSummary data, response status code and response headers
    def get_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_container_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_container_cluster_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_container_cluster_status"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling HeatmapApi.get_container_cluster_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster/{cluster-id}/ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_container_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the container cluster status
    # Get all the container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Container status type
    # @return [ContainerClusterStatusList]
    def get_container_cluster_status_list(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_container_cluster_status_list_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get all the container cluster status
    # Get all the container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Container status type
    # @return [Array<(ContainerClusterStatusList, Fixnum, Hash)>] ContainerClusterStatusList data, response status code and response headers
    def get_container_cluster_status_list_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_container_cluster_status_list ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_container_cluster_status_list"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_container_cluster_status_list"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_container_cluster_status_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_container_cluster_status_list, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['UNKNOWN', 'HEALTHY', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UNKNOWN, HEALTHY, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster-ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterStatusList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_container_cluster_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport zone
    # Get high-level summary of a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [HeatMapTransportZoneStatus]
    def get_heatmap_tz_status(site_id, enforcement_point_id, zone_id, opts = {})
      data, _status_code, _headers = get_heatmap_tz_status_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      data
    end

    # Get high-level summary of a transport zone
    # Get high-level summary of a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(HeatMapTransportZoneStatus, Fixnum, Hash)>] HeatMapTransportZoneStatus data, response status code and response headers
    def get_heatmap_tz_status_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_heatmap_tz_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_heatmap_tz_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_heatmap_tz_status"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling HeatmapApi.get_heatmap_tz_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_heatmap_tz_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of a transport node
    # Read status of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransportNodeStatus]
    def get_host_tn_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_host_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Read status of a transport node
    # Read status of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransportNodeStatus, Fixnum, Hash)>] TransportNodeStatus data, response status code and response headers
    def get_host_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_host_tn_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_host_tn_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_host_tn_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.get_host_tn_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_host_tn_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport node
    # Get high-level summary of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status pNic/bond status
    # @return [PnicBondStatusListResult]
    def get_pnic_statuses_for_tn(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_pnic_statuses_for_tn_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Get high-level summary of a transport node
    # Get high-level summary of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status pNic/bond status
    # @return [Array<(PnicBondStatusListResult, Fixnum, Hash)>] PnicBondStatusListResult data, response status code and response headers
    def get_pnic_statuses_for_tn_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_pnic_statuses_for_tn ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_pnic_statuses_for_tn"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_pnic_statuses_for_tn"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.get_pnic_statuses_for_tn"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UNKNOWN', 'UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UNKNOWN, UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/pnic-bond-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PnicBondStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_pnic_statuses_for_tn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the container status on given node
    # Get the container status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TnNodeAgentStatusListResult]
    def get_tn_container_agent_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_tn_container_agent_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Get the container status on given node
    # Get the container status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TnNodeAgentStatusListResult, Fixnum, Hash)>] TnNodeAgentStatusListResult data, response status code and response headers
    def get_tn_container_agent_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tn_container_agent_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tn_container_agent_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tn_container_agent_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.get_tn_container_agent_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_tn_container_agent_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_tn_container_agent_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/node-agent-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TnNodeAgentStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tn_container_agent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the container hyperbus status on given node
    # Get the container hyperbus status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [TnHyperbusStatus]
    def get_tn_hyperbus_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_tn_hyperbus_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Get the container hyperbus status on given node
    # Get the container hyperbus status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [Array<(TnHyperbusStatus, Fixnum, Hash)>] TnHyperbusStatus data, response status code and response headers
    def get_tn_hyperbus_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tn_hyperbus_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tn_hyperbus_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tn_hyperbus_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.get_tn_hyperbus_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/hyperbus-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TnHyperbusStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tn_hyperbus_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status json report of transport nodes of all the transport zones
    # Creates a status json report of transport nodes of all the transport zones
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusReportListResult]
    def get_tn_json_report(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_tn_json_report_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Creates a status json report of transport nodes of all the transport zones
    # Creates a status json report of transport nodes of all the transport zones
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusReportListResult, Fixnum, Hash)>] TransportNodeStatusReportListResult data, response status code and response headers
    def get_tn_json_report_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tn_json_report ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tn_json_report"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tn_json_report"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-node-status-report-json'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusReportListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tn_json_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status json report of transport nodes in a transport zone
    # Creates a status json report of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusReportListResult]
    def get_tn_json_report_for_atz(site_id, enforcement_point_id, zone_id, opts = {})
      data, _status_code, _headers = get_tn_json_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      data
    end

    # Creates a status json report of transport nodes in a transport zone
    # Creates a status json report of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusReportListResult, Fixnum, Hash)>] TransportNodeStatusReportListResult data, response status code and response headers
    def get_tn_json_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tn_json_report_for_atz ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tn_json_report_for_atz"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tn_json_report_for_atz"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling HeatmapApi.get_tn_json_report_for_atz"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/transport-node-status-report-json'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusReportListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tn_json_report_for_atz\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status report of transport nodes of all the transport zones
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [nil]
    def get_tn_report(site_id, enforcement_point_id, opts = {})
      get_tn_report_with_http_info(site_id, enforcement_point_id, opts)
      nil
    end

    # Creates a status report of transport nodes of all the transport zones
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_tn_report_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tn_report ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tn_report"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tn_report"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-node-status-report'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tn_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status report of transport nodes in a transport zone
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [nil]
    def get_tn_report_for_atz(site_id, enforcement_point_id, zone_id, opts = {})
      get_tn_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      nil
    end

    # Creates a status report of transport nodes in a transport zone
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_tn_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tn_report_for_atz ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tn_report_for_atz"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tn_report_for_atz"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling HeatmapApi.get_tn_report_for_atz"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/transport-node-status-report'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tn_report_for_atz\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tunnel properties
    # Tunnel properties
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param tunnel_name Tunnel name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TunnelProperties]
    def get_tunnel_by_name(site_id, enforcement_point_id, node_id, tunnel_name, opts = {})
      data, _status_code, _headers = get_tunnel_by_name_with_http_info(site_id, enforcement_point_id, node_id, tunnel_name, opts)
      data
    end

    # Tunnel properties
    # Tunnel properties
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param tunnel_name Tunnel name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TunnelProperties, Fixnum, Hash)>] TunnelProperties data, response status code and response headers
    def get_tunnel_by_name_with_http_info(site_id, enforcement_point_id, node_id, tunnel_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tunnel_by_name ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tunnel_by_name"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tunnel_by_name"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.get_tunnel_by_name"
      end
      # verify the required parameter 'tunnel_name' is set
      if @api_client.config.client_side_validation && tunnel_name.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_name' when calling HeatmapApi.get_tunnel_by_name"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/tunnels/{tunnel-name}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'tunnel-name' + '}', tunnel_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tunnel_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of tunnels
    # List of tunnels
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel as defined in RFC 5880
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :encap Tunnel encapsulation type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :remote_node_id 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Tunnel status
    # @return [TunnelList]
    def get_tunnels(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_tunnels_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # List of tunnels
    # List of tunnels
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel as defined in RFC 5880
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :encap Tunnel encapsulation type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :remote_node_id 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Tunnel status
    # @return [Array<(TunnelList, Fixnum, Hash)>] TunnelList data, response status code and response headers
    def get_tunnels_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.get_tunnels ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.get_tunnels"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.get_tunnels"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.get_tunnels"
      end
      if @api_client.config.client_side_validation && opts[:'bfd_diagnostic_code'] && !['0', 'NO_DIAGNOSTIC', '1', 'CONTROL_DETECTION_TIME_EXPIRED', '2', 'ECHO_FUNCTION_FAILED', '3', 'NEIGHBOR_SIGNALED_SESSION_DOWN', '4', 'FORWARDING_PLANE_RESET', '5', 'PATH_DOWN', '6', 'CONCATENATED_PATH_DOWN', '7', 'ADMINISTRATIVELY_DOWN', '8', 'REVERSE_CONCATENATED_PATH_DOWN'].include?(opts[:'bfd_diagnostic_code'])
        fail ArgumentError, 'invalid value for "bfd_diagnostic_code", must be one of 0, NO_DIAGNOSTIC, 1, CONTROL_DETECTION_TIME_EXPIRED, 2, ECHO_FUNCTION_FAILED, 3, NEIGHBOR_SIGNALED_SESSION_DOWN, 4, FORWARDING_PLANE_RESET, 5, PATH_DOWN, 6, CONCATENATED_PATH_DOWN, 7, ADMINISTRATIVELY_DOWN, 8, REVERSE_CONCATENATED_PATH_DOWN'
      end
      if @api_client.config.client_side_validation && opts[:'encap'] && !['UNKNOWN_ENCAP', 'GENEVE', 'VXLAN'].include?(opts[:'encap'])
        fail ArgumentError, 'invalid value for "encap", must be one of UNKNOWN_ENCAP, GENEVE, VXLAN'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_tunnels, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.get_tunnels, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/tunnels'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bfd_diagnostic_code'] = opts[:'bfd_diagnostic_code'] if !opts[:'bfd_diagnostic_code'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'encap'] = opts[:'encap'] if !opts[:'encap'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'remote_node_id'] = opts[:'remote_node_id'] if !opts[:'remote_node_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#get_tunnels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of all the transport nodes
    # Read status of all the transport nodes
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_host_tn_status(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = list_host_tn_status_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Read status of all the transport nodes
    # Read status of all the transport nodes
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_host_tn_status_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.list_host_tn_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.list_host_tn_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.list_host_tn_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.list_host_tn_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.list_host_tn_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#list_host_tn_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of all transport nodes with tunnel connections to transport node 
    # Read status of all transport nodes with tunnel connections to transport node 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :tunnel_status Tunnel Status
    # @return [TransportNodeStatusListResult]
    def list_remote_tn_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = list_remote_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Read status of all transport nodes with tunnel connections to transport node 
    # Read status of all transport nodes with tunnel connections to transport node 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :tunnel_status Tunnel Status
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_remote_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.list_remote_tn_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.list_remote_tn_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.list_remote_tn_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling HeatmapApi.list_remote_tn_status"
      end
      if @api_client.config.client_side_validation && opts[:'bfd_diagnostic_code'] && !['0', 'NO_DIAGNOSTIC', '1', 'CONTROL_DETECTION_TIME_EXPIRED', '2', 'ECHO_FUNCTION_FAILED', '3', 'NEIGHBOR_SIGNALED_SESSION_DOWN', '4', 'FORWARDING_PLANE_RESET', '5', 'PATH_DOWN', '6', 'CONCATENATED_PATH_DOWN', '7', 'ADMINISTRATIVELY_DOWN', '8', 'REVERSE_CONCATENATED_PATH_DOWN'].include?(opts[:'bfd_diagnostic_code'])
        fail ArgumentError, 'invalid value for "bfd_diagnostic_code", must be one of 0, NO_DIAGNOSTIC, 1, CONTROL_DETECTION_TIME_EXPIRED, 2, ECHO_FUNCTION_FAILED, 3, NEIGHBOR_SIGNALED_SESSION_DOWN, 4, FORWARDING_PLANE_RESET, 5, PATH_DOWN, 6, CONCATENATED_PATH_DOWN, 7, ADMINISTRATIVELY_DOWN, 8, REVERSE_CONCATENATED_PATH_DOWN'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.list_remote_tn_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.list_remote_tn_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'tunnel_status'] && !['UP', 'DOWN'].include?(opts[:'tunnel_status'])
        fail ArgumentError, 'invalid value for "tunnel_status", must be one of UP, DOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/remote-transport-node-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bfd_diagnostic_code'] = opts[:'bfd_diagnostic_code'] if !opts[:'bfd_diagnostic_code'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'tunnel_status'] = opts[:'tunnel_status'] if !opts[:'tunnel_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#list_remote_tn_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of transport nodes in a transport zone
    # Read status of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_tn_status_for_tz(site_id, enforcement_point_id, zone_id, opts = {})
      data, _status_code, _headers = list_tn_status_for_tz_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      data
    end

    # Read status of transport nodes in a transport zone
    # Read status of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_tn_status_for_tz_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HeatmapApi.list_tn_status_for_tz ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling HeatmapApi.list_tn_status_for_tz"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling HeatmapApi.list_tn_status_for_tz"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling HeatmapApi.list_tn_status_for_tz"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.list_tn_status_for_tz, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HeatmapApi.list_tn_status_for_tz, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/transport-node-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HeatmapApi#list_tn_status_for_tz\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
