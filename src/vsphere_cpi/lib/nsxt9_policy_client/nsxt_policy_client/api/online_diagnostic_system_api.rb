=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class OnlineDiagnosticSystemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocationArtifactBatchResult]
    def create_ods_invocation_artifact_in_batch_request(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      data, _status_code, _headers = create_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts)
      data
    end

    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocationArtifactBatchResult, Fixnum, Hash)>] OdsRunbookInvocationArtifactBatchResult data, response status code and response headers
    def create_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.create_ods_invocation_artifact_in_batch_request ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OnlineDiagnosticSystemApi.create_ods_invocation_artifact_in_batch_request"
      end
      # verify the required parameter 'ods_runbook_invocation_artifact_batch_request' is set
      if @api_client.config.client_side_validation && ods_runbook_invocation_artifact_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_invocation_artifact_batch_request' when calling OnlineDiagnosticSystemApi.create_ods_invocation_artifact_in_batch_request"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_invocation_artifact_batch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationArtifactBatchResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#create_ods_invocation_artifact_in_batch_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a runbook invocation
    # Create an Online Diagnostic System Runbook invocation. If an invocation with <invocation-id> already exists, throw an exception. Otherwise, create a new runbook invocation. A runbook invocation along with its report and status will be deleted automatically after 2 hours, if it is not deleted by delete API. 
    # @param invocation_id 
    # @param ods_runbook_invocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_ods_runbook_invocation(invocation_id, ods_runbook_invocation, opts = {})
      create_ods_runbook_invocation_with_http_info(invocation_id, ods_runbook_invocation, opts)
      nil
    end

    # Create a runbook invocation
    # Create an Online Diagnostic System Runbook invocation. If an invocation with &lt;invocation-id&gt; already exists, throw an exception. Otherwise, create a new runbook invocation. A runbook invocation along with its report and status will be deleted automatically after 2 hours, if it is not deleted by delete API. 
    # @param invocation_id 
    # @param ods_runbook_invocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_ods_runbook_invocation_with_http_info(invocation_id, ods_runbook_invocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.create_ods_runbook_invocation ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling OnlineDiagnosticSystemApi.create_ods_runbook_invocation"
      end
      # verify the required parameter 'ods_runbook_invocation' is set
      if @api_client.config.client_side_validation && ods_runbook_invocation.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_invocation' when calling OnlineDiagnosticSystemApi.create_ods_runbook_invocation"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_invocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#create_ods_runbook_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the Dynamic Runbook Instance
    # Delete the Dynamic Runbook Instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_dynamic_runbook_instance(instance_id, opts = {})
      delete_ods_dynamic_runbook_instance_with_http_info(instance_id, opts)
      nil
    end

    # Delete the Dynamic Runbook Instance
    # Delete the Dynamic Runbook Instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_dynamic_runbook_instance_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.delete_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.delete_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#delete_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a runbook invocation artifact batch request
    # Delete an Online Diagnostic System Runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_invocation_artifact_in_batch_status(request_id, opts = {})
      delete_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts)
      nil
    end

    # Delete a runbook invocation artifact batch request
    # Delete an Online Diagnostic System Runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.delete_ods_invocation_artifact_in_batch_status ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OnlineDiagnosticSystemApi.delete_ods_invocation_artifact_in_batch_status"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#delete_ods_invocation_artifact_in_batch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a runbook invocation
    # Delete an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_runbook_invocation(invocation_id, opts = {})
      delete_ods_runbook_invocation_with_http_info(invocation_id, opts)
      nil
    end

    # Delete a runbook invocation
    # Delete an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_runbook_invocation_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.delete_ods_runbook_invocation ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling OnlineDiagnosticSystemApi.delete_ods_runbook_invocation"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#delete_ods_runbook_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a runbook setting
    # Delete an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_runbook_setting(runbook_setting_id, opts = {})
      delete_ods_runbook_setting_with_http_info(runbook_setting_id, opts)
      nil
    end

    # Delete a runbook setting
    # Delete an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_runbook_setting_with_http_info(runbook_setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.delete_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling OnlineDiagnosticSystemApi.delete_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#delete_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Install the Dynamic Runbook package. Please specify the header \"Content-Type: application/octet-stream\" in the http request. 
    # Install the Dynamic Runbook package. Please specify the header \"Content-Type: application/octet-stream\" in the http request. 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstanceState]
    def install_ods_dynamic_runbook(instance_id, opts = {})
      data, _status_code, _headers = install_ods_dynamic_runbook_with_http_info(instance_id, opts)
      data
    end

    # Install the Dynamic Runbook package. Please specify the header \&quot;Content-Type: application/octet-stream\&quot; in the http request. 
    # Install the Dynamic Runbook package. Please specify the header \&quot;Content-Type: application/octet-stream\&quot; in the http request. 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstanceState, Fixnum, Hash)>] OdsDynamicRunbookInstanceState data, response status code and response headers
    def install_ods_dynamic_runbook_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.install_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.install_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/file'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstanceState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#install_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dynamic Runbooks
    # List Online Diagnostic System Dynamic Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsDynamicRunbookListResult]
    def list_ods_dynamic_runbook(opts = {})
      data, _status_code, _headers = list_ods_dynamic_runbook_with_http_info(opts)
      data
    end

    # List Dynamic Runbooks
    # List Online Diagnostic System Dynamic Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsDynamicRunbookListResult, Fixnum, Hash)>] OdsDynamicRunbookListResult data, response status code and response headers
    def list_ods_dynamic_runbook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.list_ods_dynamic_runbook ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_dynamic_runbook, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_dynamic_runbook, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/dynamic-runbooks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#list_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dynamic Runbook Instances
    # List Online Diagnostic System Dynamic Runbooks Instances. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsDynamicdRunbookInstanceListResult]
    def list_ods_dynamic_runbook_instance(opts = {})
      data, _status_code, _headers = list_ods_dynamic_runbook_instance_with_http_info(opts)
      data
    end

    # List Dynamic Runbook Instances
    # List Online Diagnostic System Dynamic Runbooks Instances. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsDynamicdRunbookInstanceListResult, Fixnum, Hash)>] OdsDynamicdRunbookInstanceListResult data, response status code and response headers
    def list_ods_dynamic_runbook_instance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.list_ods_dynamic_runbook_instance ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_dynamic_runbook_instance, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_dynamic_runbook_instance, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicdRunbookInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#list_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Predefined Runbooks
    # List Online Diagnostic System Predefined Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsPredefinedRunbookListResult]
    def list_ods_predefined_runbooks(opts = {})
      data, _status_code, _headers = list_ods_predefined_runbooks_with_http_info(opts)
      data
    end

    # List Predefined Runbooks
    # List Online Diagnostic System Predefined Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsPredefinedRunbookListResult, Fixnum, Hash)>] OdsPredefinedRunbookListResult data, response status code and response headers
    def list_ods_predefined_runbooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.list_ods_predefined_runbooks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_predefined_runbooks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_predefined_runbooks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/pre-defined-runbooks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsPredefinedRunbookListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#list_ods_predefined_runbooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List runbook invocation artifacts
    # Get a paginated list of Online Diagnostic System Runbook invocation artifacts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsRunbookInvocationArtifactListResult]
    def list_ods_runbook_invocation_artifacts(opts = {})
      data, _status_code, _headers = list_ods_runbook_invocation_artifacts_with_http_info(opts)
      data
    end

    # List runbook invocation artifacts
    # Get a paginated list of Online Diagnostic System Runbook invocation artifacts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsRunbookInvocationArtifactListResult, Fixnum, Hash)>] OdsRunbookInvocationArtifactListResult data, response status code and response headers
    def list_ods_runbook_invocation_artifacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.list_ods_runbook_invocation_artifacts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_runbook_invocation_artifacts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_runbook_invocation_artifacts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/runbook-artifacts'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationArtifactListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#list_ods_runbook_invocation_artifacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List runbook invocations
    # Get a paginated list of Online Diagnostic System Runbook invocation entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsRunbookInvocationListResult]
    def list_ods_runbook_invocations(opts = {})
      data, _status_code, _headers = list_ods_runbook_invocations_with_http_info(opts)
      data
    end

    # List runbook invocations
    # Get a paginated list of Online Diagnostic System Runbook invocation entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsRunbookInvocationListResult, Fixnum, Hash)>] OdsRunbookInvocationListResult data, response status code and response headers
    def list_ods_runbook_invocations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.list_ods_runbook_invocations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_runbook_invocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_runbook_invocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/runbook-invocations'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#list_ods_runbook_invocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List runbook settings
    # Get a paginated list of Online Diagnostic System Runbook setting entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsRunbookSettingListResult]
    def list_ods_runbook_settings(opts = {})
      data, _status_code, _headers = list_ods_runbook_settings_with_http_info(opts)
      data
    end

    # List runbook settings
    # Get a paginated list of Online Diagnostic System Runbook setting entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsRunbookSettingListResult, Fixnum, Hash)>] OdsRunbookSettingListResult data, response status code and response headers
    def list_ods_runbook_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.list_ods_runbook_settings ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_runbook_settings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OnlineDiagnosticSystemApi.list_ods_runbook_settings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/runbook-settings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookSettingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#list_ods_runbook_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read help information of a Dynamic Runbook
    # Read help information of an Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookHelpInfo]
    def load_ods_dynamic_runbook_help_info(runbook_id, opts = {})
      data, _status_code, _headers = load_ods_dynamic_runbook_help_info_with_http_info(runbook_id, opts)
      data
    end

    # Read help information of a Dynamic Runbook
    # Read help information of an Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookHelpInfo, Fixnum, Hash)>] OdsRunbookHelpInfo data, response status code and response headers
    def load_ods_dynamic_runbook_help_info_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.load_ods_dynamic_runbook_help_info ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling OnlineDiagnosticSystemApi.load_ods_dynamic_runbook_help_info"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbooks/{runbook-id}/help'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookHelpInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#load_ods_dynamic_runbook_help_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations
    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations. Please add the below header in the http request, if it is not present Accept    application/octet-stream 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def load_ods_invocation_artifact_in_batch(request_id, opts = {})
      load_ods_invocation_artifact_in_batch_with_http_info(request_id, opts)
      nil
    end

    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations
    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations. Please add the below header in the http request, if it is not present Accept    application/octet-stream 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def load_ods_invocation_artifact_in_batch_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.load_ods_invocation_artifact_in_batch ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OnlineDiagnosticSystemApi.load_ods_invocation_artifact_in_batch"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}/artifact'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#load_ods_invocation_artifact_in_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read help information of a Predefined Runbook
    # Read help information of an Online Diagnostic System Predefined runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookHelpInfo]
    def load_ods_predefined_runbook_help_info(runbook_id, opts = {})
      data, _status_code, _headers = load_ods_predefined_runbook_help_info_with_http_info(runbook_id, opts)
      data
    end

    # Read help information of a Predefined Runbook
    # Read help information of an Online Diagnostic System Predefined runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookHelpInfo, Fixnum, Hash)>] OdsRunbookHelpInfo data, response status code and response headers
    def load_ods_predefined_runbook_help_info_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.load_ods_predefined_runbook_help_info ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling OnlineDiagnosticSystemApi.load_ods_predefined_runbook_help_info"
      end
      # resource path
      local_var_path = '/infra/sha/pre-defined-runbooks/{runbook-id}/help'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookHelpInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#load_ods_predefined_runbook_help_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the artifacts generated by an Online Diagnostic System Runbook invocation
    # Download the artifacts generated by an Online Diagnostic System Runbook invocation. Please add the below header in the http request, if it is not present \"Accept: application/octet-stream\" 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def load_ods_runbook_invocation_artifact(invocation_id, opts = {})
      load_ods_runbook_invocation_artifact_with_http_info(invocation_id, opts)
      nil
    end

    # Download the artifacts generated by an Online Diagnostic System Runbook invocation
    # Download the artifacts generated by an Online Diagnostic System Runbook invocation. Please add the below header in the http request, if it is not present \&quot;Accept: application/octet-stream\&quot; 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def load_ods_runbook_invocation_artifact_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.load_ods_runbook_invocation_artifact ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling OnlineDiagnosticSystemApi.load_ods_runbook_invocation_artifact"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}/artifact'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#load_ods_runbook_invocation_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier if not existed, or update an existing Online Diagnostic System Dynamic Runbook Instance otherwise. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstance]
    def patch_ods_dynamic_runbook_instance(instance_id, ods_dynamic_runbook_instance, opts = {})
      data, _status_code, _headers = patch_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts)
      data
    end

    # Create or update a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier if not existed, or update an existing Online Diagnostic System Dynamic Runbook Instance otherwise. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstance, Fixnum, Hash)>] OdsDynamicRunbookInstance data, response status code and response headers
    def patch_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.patch_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.patch_ods_dynamic_runbook_instance"
      end
      # verify the required parameter 'ods_dynamic_runbook_instance' is set
      if @api_client.config.client_side_validation && ods_dynamic_runbook_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ods_dynamic_runbook_instance' when calling OnlineDiagnosticSystemApi.patch_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_dynamic_runbook_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#patch_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ods_invocation_artifact_in_batch_request(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      patch_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts)
      nil
    end

    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.patch_ods_invocation_artifact_in_batch_request ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OnlineDiagnosticSystemApi.patch_ods_invocation_artifact_in_batch_request"
      end
      # verify the required parameter 'ods_runbook_invocation_artifact_batch_request' is set
      if @api_client.config.client_side_validation && ods_runbook_invocation_artifact_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_invocation_artifact_batch_request' when calling OnlineDiagnosticSystemApi.patch_ods_invocation_artifact_in_batch_request"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_invocation_artifact_batch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#patch_ods_invocation_artifact_in_batch_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier if not existed, update an existing Online Diagnostic System runbook profile otherwise. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ods_runbook_setting(runbook_setting_id, ods_runbook_setting, opts = {})
      patch_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts)
      nil
    end

    # Create or update a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier if not existed, update an existing Online Diagnostic System runbook profile otherwise. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.patch_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling OnlineDiagnosticSystemApi.patch_ods_runbook_setting"
      end
      # verify the required parameter 'ods_runbook_setting' is set
      if @api_client.config.client_side_validation && ods_runbook_setting.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_setting' when calling OnlineDiagnosticSystemApi.patch_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#patch_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Dynamic Runbook
    # Read Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbook]
    def read_ods_dynamic_runbook(runbook_id, opts = {})
      data, _status_code, _headers = read_ods_dynamic_runbook_with_http_info(runbook_id, opts)
      data
    end

    # Read a Dynamic Runbook
    # Read Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbook, Fixnum, Hash)>] OdsDynamicRunbook data, response status code and response headers
    def read_ods_dynamic_runbook_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling OnlineDiagnosticSystemApi.read_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbooks/{runbook-id}'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Dynamic Runbook Instance
    # Read Online Diagnostic System Dynamic Runbook Instance. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstance]
    def read_ods_dynamic_runbook_instance(instance_id, opts = {})
      data, _status_code, _headers = read_ods_dynamic_runbook_instance_with_http_info(instance_id, opts)
      data
    end

    # Read a Dynamic Runbook Instance
    # Read Online Diagnostic System Dynamic Runbook Instance. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstance, Fixnum, Hash)>] OdsDynamicRunbookInstance data, response status code and response headers
    def read_ods_dynamic_runbook_instance_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.read_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Dynamic Runbook Instance state
    # Read Online Diagnostic System Dynamic Runbook Instance state 
    # @param instance_id Identifier of a Dynamic Runbook Instance state
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstanceState]
    def read_ods_dynamic_runbook_instance_state(instance_id, opts = {})
      data, _status_code, _headers = read_ods_dynamic_runbook_instance_state_with_http_info(instance_id, opts)
      data
    end

    # Read a Dynamic Runbook Instance state
    # Read Online Diagnostic System Dynamic Runbook Instance state 
    # @param instance_id Identifier of a Dynamic Runbook Instance state
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstanceState, Fixnum, Hash)>] OdsDynamicRunbookInstanceState data, response status code and response headers
    def read_ods_dynamic_runbook_instance_state_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_dynamic_runbook_instance_state ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.read_ods_dynamic_runbook_instance_state"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/state'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstanceState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_dynamic_runbook_instance_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the status of a runbook invocation batch request
    # Read the status of a runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocationArtifactBatchResult]
    def read_ods_invocation_artifact_in_batch_status(request_id, opts = {})
      data, _status_code, _headers = read_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts)
      data
    end

    # Read the status of a runbook invocation batch request
    # Read the status of a runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocationArtifactBatchResult, Fixnum, Hash)>] OdsRunbookInvocationArtifactBatchResult data, response status code and response headers
    def read_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_invocation_artifact_in_batch_status ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling OnlineDiagnosticSystemApi.read_ods_invocation_artifact_in_batch_status"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationArtifactBatchResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_invocation_artifact_in_batch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Predefined Runbook
    # Read Online Diagnostic System Predefined Runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsPredefinedRunbook]
    def read_ods_predefined_runbook(runbook_id, opts = {})
      data, _status_code, _headers = read_ods_predefined_runbook_with_http_info(runbook_id, opts)
      data
    end

    # Read a Predefined Runbook
    # Read Online Diagnostic System Predefined Runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsPredefinedRunbook, Fixnum, Hash)>] OdsPredefinedRunbook data, response status code and response headers
    def read_ods_predefined_runbook_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_predefined_runbook ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling OnlineDiagnosticSystemApi.read_ods_predefined_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/pre-defined-runbooks/{runbook-id}'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsPredefinedRunbook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_predefined_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a runbook invocation
    # Read an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocation]
    def read_ods_runbook_invocation(invocation_id, opts = {})
      data, _status_code, _headers = read_ods_runbook_invocation_with_http_info(invocation_id, opts)
      data
    end

    # Read a runbook invocation
    # Read an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocation, Fixnum, Hash)>] OdsRunbookInvocation data, response status code and response headers
    def read_ods_runbook_invocation_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_runbook_invocation ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling OnlineDiagnosticSystemApi.read_ods_runbook_invocation"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_runbook_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the report of a runbook invocation
    # Read the report of an Online Diagnostic System Runbook invocation. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocationReport]
    def read_ods_runbook_invocation_report(invocation_id, opts = {})
      data, _status_code, _headers = read_ods_runbook_invocation_report_with_http_info(invocation_id, opts)
      data
    end

    # Read the report of a runbook invocation
    # Read the report of an Online Diagnostic System Runbook invocation. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocationReport, Fixnum, Hash)>] OdsRunbookInvocationReport data, response status code and response headers
    def read_ods_runbook_invocation_report_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_runbook_invocation_report ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling OnlineDiagnosticSystemApi.read_ods_runbook_invocation_report"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}/report'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_runbook_invocation_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a runbook setting
    # Read an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookSetting]
    def read_ods_runbook_setting(runbook_setting_id, opts = {})
      data, _status_code, _headers = read_ods_runbook_setting_with_http_info(runbook_setting_id, opts)
      data
    end

    # Read a runbook setting
    # Read an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookSetting, Fixnum, Hash)>] OdsRunbookSetting data, response status code and response headers
    def read_ods_runbook_setting_with_http_info(runbook_setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.read_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling OnlineDiagnosticSystemApi.read_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#read_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remedy the Dynamic Runbook installation
    # Remedy the Dynamic Runbook installation
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remedy_ods_dynamic_runbook(instance_id, opts = {})
      remedy_ods_dynamic_runbook_with_http_info(instance_id, opts)
      nil
    end

    # Remedy the Dynamic Runbook installation
    # Remedy the Dynamic Runbook installation
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remedy_ods_dynamic_runbook_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.remedy_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.remedy_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/file/action/remedy'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#remedy_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Uninstall the Dynamic Runbook package from the instance
    # Uninstall the Dynamic Runbook package from the instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def uninstall_ods_dynamic_runbook(instance_id, opts = {})
      uninstall_ods_dynamic_runbook_with_http_info(instance_id, opts)
      nil
    end

    # Uninstall the Dynamic Runbook package from the instance
    # Uninstall the Dynamic Runbook package from the instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def uninstall_ods_dynamic_runbook_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.uninstall_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.uninstall_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/file'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#uninstall_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstance]
    def update_ods_dynamic_runbook_instance(instance_id, ods_dynamic_runbook_instance, opts = {})
      data, _status_code, _headers = update_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts)
      data
    end

    # Create a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstance, Fixnum, Hash)>] OdsDynamicRunbookInstance data, response status code and response headers
    def update_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.update_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling OnlineDiagnosticSystemApi.update_ods_dynamic_runbook_instance"
      end
      # verify the required parameter 'ods_dynamic_runbook_instance' is set
      if @api_client.config.client_side_validation && ods_dynamic_runbook_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ods_dynamic_runbook_instance' when calling OnlineDiagnosticSystemApi.update_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_dynamic_runbook_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#update_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookSetting]
    def update_ods_runbook_setting(runbook_setting_id, ods_runbook_setting, opts = {})
      data, _status_code, _headers = update_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts)
      data
    end

    # Create a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookSetting, Fixnum, Hash)>] OdsRunbookSetting data, response status code and response headers
    def update_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnlineDiagnosticSystemApi.update_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling OnlineDiagnosticSystemApi.update_ods_runbook_setting"
      end
      # verify the required parameter 'ods_runbook_setting' is set
      if @api_client.config.client_side_validation && ods_runbook_setting.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_setting' when calling OnlineDiagnosticSystemApi.update_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnlineDiagnosticSystemApi#update_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
