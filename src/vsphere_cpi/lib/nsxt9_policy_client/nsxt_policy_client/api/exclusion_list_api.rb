=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ExclusionListApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling ExclusionListApi.filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Additional API to read service insertion exclude list without filtering out the system owned members
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def get_internal_si_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_si_exclude_list_with_http_info(opts)
      data
    end

    # Additional API to read service insertion exclude list without filtering out the system owned members
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def get_internal_si_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.get_internal_si_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#get_internal_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_pmaas_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_pmaas_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_pmaas_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.get_pmaas_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#get_pmaas_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Default API to read service insertion exclude list with system owned members filtered out
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def get_si_exclude_list(opts = {})
      data, _status_code, _headers = get_si_exclude_list_with_http_info(opts)
      data
    end

    # Default API to read service insertion exclude list with system owned members filtered out
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def get_si_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.get_si_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#get_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def global_infra_filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.global_infra_filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling ExclusionListApi.global_infra_filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#global_infra_filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.global_infra_get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#global_infra_get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.global_infra_get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#global_infra_get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_exclude_list(policy_exclude_list, opts = {})
      patch_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.patch_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling ExclusionListApi.patch_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#patch_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_pmaas_exclude_list(policy_exclude_list, opts = {})
      patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.patch_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling ExclusionListApi.patch_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#patch_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch service insertion exclusion list for security policy
    # Patch service insertion exclusion list for security policy. 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_si_exclude_list(policy_si_exclude_list, opts = {})
      patch_si_exclude_list_with_http_info(policy_si_exclude_list, opts)
      nil
    end

    # Patch service insertion exclusion list for security policy
    # Patch service insertion exclusion list for security policy. 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_si_exclude_list_with_http_info(policy_si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.patch_si_exclude_list ...'
      end
      # verify the required parameter 'policy_si_exclude_list' is set
      if @api_client.config.client_side_validation && policy_si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_exclude_list' when calling ExclusionListApi.patch_si_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#patch_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.put_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling ExclusionListApi.put_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#put_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_pmaas_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.put_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling ExclusionListApi.put_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#put_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion exclusion list
    # Update the exclusion list for service insertion policy 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def update_si_exclude_list(policy_si_exclude_list, opts = {})
      data, _status_code, _headers = update_si_exclude_list_with_http_info(policy_si_exclude_list, opts)
      data
    end

    # Update service insertion exclusion list
    # Update the exclusion list for service insertion policy 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def update_si_exclude_list_with_http_info(policy_si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExclusionListApi.update_si_exclude_list ...'
      end
      # verify the required parameter 'policy_si_exclude_list' is set
      if @api_client.config.client_side_validation && policy_si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_exclude_list' when calling ExclusionListApi.update_si_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExclusionListApi#update_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
