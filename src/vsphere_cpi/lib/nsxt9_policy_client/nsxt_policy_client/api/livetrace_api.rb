=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LivetraceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a livetrace config
    # Delete livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_live_trace_config(livetrace_id, opts = {})
      delete_live_trace_config_with_http_info(livetrace_id, opts)
      nil
    end

    # Delete a livetrace config
    # Delete livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_live_trace_config_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.delete_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.delete_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#delete_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get forward packet capture file for the specified livetrace session
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_live_trace_forward_pkt_cap_file(livetrace_id, opts = {})
      get_live_trace_forward_pkt_cap_file_with_http_info(livetrace_id, opts)
      nil
    end

    # Get forward packet capture file for the specified livetrace session
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_live_trace_forward_pkt_cap_file_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.get_live_trace_forward_pkt_cap_file ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.get_live_trace_forward_pkt_cap_file"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/forward/capturefile'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#get_live_trace_forward_pkt_cap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get reverse packet capture file for the specified livetrace session
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_live_trace_reverse_pkt_cap_file(livetrace_id, opts = {})
      get_live_trace_reverse_pkt_cap_file_with_http_info(livetrace_id, opts)
      nil
    end

    # Get reverse packet capture file for the specified livetrace session
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_live_trace_reverse_pkt_cap_file_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.get_live_trace_reverse_pkt_cap_file ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.get_live_trace_reverse_pkt_cap_file"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/reverse/capturefile'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#get_live_trace_reverse_pkt_cap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List livetrace config entities
    # Get a paginated list of all livetrace config entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LiveTraceConfigListResult]
    def list_live_trace_config(opts = {})
      data, _status_code, _headers = list_live_trace_config_with_http_info(opts)
      data
    end

    # List livetrace config entities
    # Get a paginated list of all livetrace config entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LiveTraceConfigListResult, Fixnum, Hash)>] LiveTraceConfigListResult data, response status code and response headers
    def list_live_trace_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.list_live_trace_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LivetraceApi.list_live_trace_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LivetraceApi.list_live_trace_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/livetraces'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#list_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List livetrace status entities
    # Get a list of all livetrace status entities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [LiveTraceListResult]
    def list_live_trace_status(opts = {})
      data, _status_code, _headers = list_live_trace_status_with_http_info(opts)
      data
    end

    # List livetrace status entities
    # Get a list of all livetrace status entities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(LiveTraceListResult, Fixnum, Hash)>] LiveTraceListResult data, response status code and response headers
    def list_live_trace_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.list_live_trace_status ...'
      end
      # resource path
      local_var_path = '/infra/livetraces/statuses'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#list_live_trace_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_live_trace_config(livetrace_id, live_trace_config, opts = {})
      patch_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts)
      nil
    end

    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.patch_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.patch_live_trace_config"
      end
      # verify the required parameter 'live_trace_config' is set
      if @api_client.config.client_side_validation && live_trace_config.nil?
        fail ArgumentError, "Missing the required parameter 'live_trace_config' when calling LivetraceApi.patch_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(live_trace_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#patch_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a livetrace config
    # Read livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [LiveTraceConfig]
    def read_live_trace_config(livetrace_id, opts = {})
      data, _status_code, _headers = read_live_trace_config_with_http_info(livetrace_id, opts)
      data
    end

    # Read a livetrace config
    # Read livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveTraceConfig, Fixnum, Hash)>] LiveTraceConfig data, response status code and response headers
    def read_live_trace_config_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.read_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.read_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#read_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read livetrace result
    # Read result for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [LiveTraceResult]
    def read_live_trace_result(livetrace_id, opts = {})
      data, _status_code, _headers = read_live_trace_result_with_http_info(livetrace_id, opts)
      data
    end

    # Read livetrace result
    # Read result for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(LiveTraceResult, Fixnum, Hash)>] LiveTraceResult data, response status code and response headers
    def read_live_trace_result_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.read_live_trace_result ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.read_live_trace_result"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/result'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#read_live_trace_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read livetrace status
    # Read status for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [LiveTraceStatus]
    def read_live_trace_status(livetrace_id, opts = {})
      data, _status_code, _headers = read_live_trace_status_with_http_info(livetrace_id, opts)
      data
    end

    # Read livetrace status
    # Read status for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(LiveTraceStatus, Fixnum, Hash)>] LiveTraceStatus data, response status code and response headers
    def read_live_trace_status_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.read_live_trace_status ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.read_live_trace_status"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/status'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#read_live_trace_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart a livetrace session
    # Restart a livetrace session with the same set of parameters used in creating or updating of a livetrace config. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [LiveTraceConfig]
    def restart_livetrace(livetrace_id, opts = {})
      data, _status_code, _headers = restart_livetrace_with_http_info(livetrace_id, opts)
      data
    end

    # Restart a livetrace session
    # Restart a livetrace session with the same set of parameters used in creating or updating of a livetrace config. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(LiveTraceConfig, Fixnum, Hash)>] LiveTraceConfig data, response status code and response headers
    def restart_livetrace_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.restart_livetrace ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.restart_livetrace"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#restart_livetrace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [LiveTraceConfig]
    def update_live_trace_config(livetrace_id, live_trace_config, opts = {})
      data, _status_code, _headers = update_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts)
      data
    end

    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveTraceConfig, Fixnum, Hash)>] LiveTraceConfig data, response status code and response headers
    def update_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivetraceApi.update_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling LivetraceApi.update_live_trace_config"
      end
      # verify the required parameter 'live_trace_config' is set
      if @api_client.config.client_side_validation && live_trace_config.nil?
        fail ArgumentError, "Missing the required parameter 'live_trace_config' when calling LivetraceApi.update_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(live_trace_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivetraceApi#update_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
