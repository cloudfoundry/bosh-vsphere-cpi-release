=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class RealizedStateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [GenericPolicyRealizedResourceListResult]
    def global_infra_list_realized_entities(intent_path, opts = {})
      data, _status_code, _headers = global_infra_list_realized_entities_with_http_info(intent_path, opts)
      data
    end

    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def global_infra_list_realized_entities_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.global_infra_list_realized_entities ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.global_infra_list_realized_entities"
      end
      # resource path
      local_var_path = '/global-infra/realized-state/realized-entities'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#global_infra_list_realized_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &lt;intent_path&gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &lt;intent_path, include_enforced_status&gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag (default to false)
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [ConsolidatedRealizedStatus]
    def global_infra_read_intent_status(intent_path, opts = {})
      data, _status_code, _headers = global_infra_read_intent_status_with_http_info(intent_path, opts)
      data
    end

    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &amp;lt;intent_path&amp;gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &amp;lt;intent_path, include_enforced_status&amp;gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [Array<(ConsolidatedRealizedStatus, Fixnum, Hash)>] ConsolidatedRealizedStatus data, response status code and response headers
    def global_infra_read_intent_status_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.global_infra_read_intent_status ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.global_infra_read_intent_status"
      end
      # resource path
      local_var_path = '/global-infra/realized-state/status'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'include_enforced_status'] = opts[:'include_enforced_status'] if !opts[:'include_enforced_status'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsolidatedRealizedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#global_infra_read_intent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_refresh_realized_state(intent_path, opts = {})
      global_infra_refresh_realized_state_with_http_info(intent_path, opts)
      nil
    end

    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_refresh_realized_state_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.global_infra_refresh_realized_state ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.global_infra_refresh_realized_state"
      end
      # resource path
      local_var_path = '/global-infra/realized-state/realized-entity?action=refresh'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#global_infra_refresh_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All alarms in the system
    # Paginated list of all alarms. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyAlarmResourceListResult]
    def list_alarms(opts = {})
      data, _status_code, _headers = list_alarms_with_http_info(opts)
      data
    end

    # List All alarms in the system
    # Paginated list of all alarms. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyAlarmResourceListResult, Fixnum, Hash)>] PolicyAlarmResourceListResult data, response status code and response headers
    def list_alarms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_alarms ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_alarms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_alarms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/alarms'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAlarmResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Enforcement Points
    # Paginated list of all enforcement points. Returns the populated enforcement points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedEnforcementPointListResult]
    def list_enforcement_point_realized_states(opts = {})
      data, _status_code, _headers = list_enforcement_point_realized_states_with_http_info(opts)
      data
    end

    # List Enforcement Points
    # Paginated list of all enforcement points. Returns the populated enforcement points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedEnforcementPointListResult, Fixnum, Hash)>] RealizedEnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_realized_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_enforcement_point_realized_states ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_enforcement_point_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_enforcement_point_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedEnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_enforcement_point_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Sections
    # Paginated list of all Firewalls. Returns populated Firewalls. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedFirewallSectionListResult]
    def list_firewall_section_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_firewall_section_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List Firewall Sections
    # Paginated list of all Firewalls. Returns populated Firewalls. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedFirewallSectionListResult, Fixnum, Hash)>] RealizedFirewallSectionListResult data, response status code and response headers
    def list_firewall_section_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_firewall_section_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_firewall_section_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_firewall_section_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_firewall_section_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedFirewallSectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_firewall_section_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPSets
    # Paginated list of all Realized IPSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_ip_set_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ip_set_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List IPSets
    # Paginated list of all Realized IPSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_ip_set_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_ip_set_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_ip_set_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_ip_set_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_ip_set_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_ip_set_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List MACSets
    # Paginated list of all Realized MACSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_mac_set_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_mac_set_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List MACSets
    # Paginated list of all Realized MACSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_mac_set_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_mac_set_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_mac_set_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_mac_set_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_mac_set_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_mac_set_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NS Groups
    # Paginated list of all NSGroups. Returns populated NSGroups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_ns_group_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ns_group_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List NS Groups
    # Paginated list of all NSGroups. Returns populated NSGroups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_ns_group_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_ns_group_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_ns_group_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_ns_group_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_ns_group_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_ns_group_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Realized NSServices
    # Paginated list of all Realized NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_ns_service_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ns_service_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List Realized NSServices
    # Paginated list of all Realized NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_ns_service_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_ns_service_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_ns_service_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_ns_service_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_ns_service_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_ns_service_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [GenericPolicyRealizedResourceListResult]
    def list_realized_entities(intent_path, opts = {})
      data, _status_code, _headers = list_realized_entities_with_http_info(intent_path, opts)
      data
    end

    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_realized_entities_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_realized_entities ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.list_realized_entities"
      end
      # resource path
      local_var_path = '/infra/realized-state/realized-entities'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_realized_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Security Groups
    # Paginated list of all Security Groups. Returns populated Security Groups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedSecurityGroupListResult]
    def list_security_group_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_security_group_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List Security Groups
    # Paginated list of all Security Groups. Returns populated Security Groups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedSecurityGroupListResult, Fixnum, Hash)>] RealizedSecurityGroupListResult data, response status code and response headers
    def list_security_group_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_security_group_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_security_group_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_security_group_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_security_group_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedSecurityGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_security_group_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Listing of VIFs on the NSX Manager
    # This API lists VIFs from the specified NSX Manager. 
    # @param enforcement_point_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :lport_attachment_id LPort attachment ID of the VIF.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualNetworkInterfaceListResult]
    def list_vifs_on_enforcement_point(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_vifs_on_enforcement_point_with_http_info(enforcement_point_name, opts)
      data
    end

    # Listing of VIFs on the NSX Manager
    # This API lists VIFs from the specified NSX Manager. 
    # @param enforcement_point_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :lport_attachment_id LPort attachment ID of the VIF.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualNetworkInterfaceListResult, Fixnum, Hash)>] VirtualNetworkInterfaceListResult data, response status code and response headers
    def list_vifs_on_enforcement_point_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.list_vifs_on_enforcement_point ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.list_vifs_on_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_vifs_on_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RealizedStateApi.list_vifs_on_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/vifs'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'lport_attachment_id'] = opts[:'lport_attachment_id'] if !opts[:'lport_attachment_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualNetworkInterfaceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#list_vifs_on_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [GenericPolicyRealizedResourceListResult]
    def orgs_org_id_projects_project_id_infra_list_realized_entities(org_id, project_id, intent_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_realized_entities_with_http_info(org_id, project_id, intent_path, opts)
      data
    end

    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_realized_entities_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.orgs_org_id_projects_project_id_infra_list_realized_entities ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_list_realized_entities"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_list_realized_entities"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_list_realized_entities"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/realized-state/realized-entities'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#orgs_org_id_projects_project_id_infra_list_realized_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &lt;intent_path&gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &lt;intent_path, include_enforced_status&gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag (default to false)
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [ConsolidatedRealizedStatus]
    def orgs_org_id_projects_project_id_infra_read_intent_status(org_id, project_id, intent_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_intent_status_with_http_info(org_id, project_id, intent_path, opts)
      data
    end

    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &amp;lt;intent_path&amp;gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &amp;lt;intent_path, include_enforced_status&amp;gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [Array<(ConsolidatedRealizedStatus, Fixnum, Hash)>] ConsolidatedRealizedStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_intent_status_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.orgs_org_id_projects_project_id_infra_read_intent_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_read_intent_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_read_intent_status"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_read_intent_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/realized-state/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'include_enforced_status'] = opts[:'include_enforced_status'] if !opts[:'include_enforced_status'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsolidatedRealizedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#orgs_org_id_projects_project_id_infra_read_intent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_refresh_realized_state(org_id, project_id, intent_path, opts = {})
      orgs_org_id_projects_project_id_infra_refresh_realized_state_with_http_info(org_id, project_id, intent_path, opts)
      nil
    end

    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_refresh_realized_state_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.orgs_org_id_projects_project_id_infra_refresh_realized_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_refresh_realized_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_refresh_realized_state"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.orgs_org_id_projects_project_id_infra_refresh_realized_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/realized-state/realized-entity?action=refresh'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#orgs_org_id_projects_project_id_infra_refresh_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Enforcement Point
    # Read a Enforcement Point and the complete tree underneath. Returns the populated enforcement point object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedEnforcementPoint]
    def read_enforcement_point_realized_state(enforcement_point_name, opts = {})
      data, _status_code, _headers = read_enforcement_point_realized_state_with_http_info(enforcement_point_name, opts)
      data
    end

    # Read Enforcement Point
    # Read a Enforcement Point and the complete tree underneath. Returns the populated enforcement point object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedEnforcementPoint, Fixnum, Hash)>] RealizedEnforcementPoint data, response status code and response headers
    def read_enforcement_point_realized_state_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_enforcement_point_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_enforcement_point_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedEnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_enforcement_point_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Firewall
    # Read a Firewall and the complete tree underneath. Returns the populated Firewall object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param firewall_section_id Firewall Section Id
    # @param [Hash] opts the optional parameters
    # @return [RealizedFirewallSection]
    def read_firewall_section_realized_state(enforcement_point_name, firewall_section_id, opts = {})
      data, _status_code, _headers = read_firewall_section_realized_state_with_http_info(enforcement_point_name, firewall_section_id, opts)
      data
    end

    # Read Firewall
    # Read a Firewall and the complete tree underneath. Returns the populated Firewall object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param firewall_section_id Firewall Section Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedFirewallSection, Fixnum, Hash)>] RealizedFirewallSection data, response status code and response headers
    def read_firewall_section_realized_state_with_http_info(enforcement_point_name, firewall_section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_firewall_section_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_firewall_section_realized_state"
      end
      # verify the required parameter 'firewall_section_id' is set
      if @api_client.config.client_side_validation && firewall_section_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_id' when calling RealizedStateApi.read_firewall_section_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections/{firewall-section-id}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'firewall-section-id' + '}', firewall_section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedFirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_firewall_section_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &lt;intent_path&gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &lt;intent_path, include_enforced_status&gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag (default to false)
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [ConsolidatedRealizedStatus]
    def read_intent_status(intent_path, opts = {})
      data, _status_code, _headers = read_intent_status_with_http_info(intent_path, opts)
      data
    end

    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &amp;lt;intent_path&amp;gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &amp;lt;intent_path, include_enforced_status&amp;gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [Array<(ConsolidatedRealizedStatus, Fixnum, Hash)>] ConsolidatedRealizedStatus data, response status code and response headers
    def read_intent_status_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_intent_status ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.read_intent_status"
      end
      # resource path
      local_var_path = '/infra/realized-state/status'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'include_enforced_status'] = opts[:'include_enforced_status'] if !opts[:'include_enforced_status'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsolidatedRealizedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_intent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPSet Realized state
    # Read an IPSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param ip_set_name IPSet name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_ip_set_realized_state(enforcement_point_name, ip_set_name, opts = {})
      data, _status_code, _headers = read_ip_set_realized_state_with_http_info(enforcement_point_name, ip_set_name, opts)
      data
    end

    # Read IPSet Realized state
    # Read an IPSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param ip_set_name IPSet name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_ip_set_realized_state_with_http_info(enforcement_point_name, ip_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_ip_set_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_ip_set_realized_state"
      end
      # verify the required parameter 'ip_set_name' is set
      if @api_client.config.client_side_validation && ip_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set_name' when calling RealizedStateApi.read_ip_set_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt/{ip-set-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'ip-set-name' + '}', ip_set_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_ip_set_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read MACSet Realized state
    # Read an MACSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param mac_set_name MACSet name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_mac_set_realized_state(enforcement_point_name, mac_set_name, opts = {})
      data, _status_code, _headers = read_mac_set_realized_state_with_http_info(enforcement_point_name, mac_set_name, opts)
      data
    end

    # Read MACSet Realized state
    # Read an MACSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param mac_set_name MACSet name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_mac_set_realized_state_with_http_info(enforcement_point_name, mac_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_mac_set_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_mac_set_realized_state"
      end
      # verify the required parameter 'mac_set_name' is set
      if @api_client.config.client_side_validation && mac_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_name' when calling RealizedStateApi.read_mac_set_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt/{mac-set-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'mac-set-name' + '}', mac_set_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_mac_set_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Group
    # Read a NSGroup and the complete tree underneath. Returns the populated NSgroup object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsgroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_ns_group_realized_state(enforcement_point_name, nsgroup_name, opts = {})
      data, _status_code, _headers = read_ns_group_realized_state_with_http_info(enforcement_point_name, nsgroup_name, opts)
      data
    end

    # Read Group
    # Read a NSGroup and the complete tree underneath. Returns the populated NSgroup object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsgroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_ns_group_realized_state_with_http_info(enforcement_point_name, nsgroup_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_ns_group_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_ns_group_realized_state"
      end
      # verify the required parameter 'nsgroup_name' is set
      if @api_client.config.client_side_validation && nsgroup_name.nil?
        fail ArgumentError, "Missing the required parameter 'nsgroup_name' when calling RealizedStateApi.read_ns_group_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups/{nsgroup-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'nsgroup-name' + '}', nsgroup_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_ns_group_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read NSService
    # Read a NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsservice_name NSService Name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_ns_service_realized_state(enforcement_point_name, nsservice_name, opts = {})
      data, _status_code, _headers = read_ns_service_realized_state_with_http_info(enforcement_point_name, nsservice_name, opts)
      data
    end

    # Read NSService
    # Read a NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsservice_name NSService Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_ns_service_realized_state_with_http_info(enforcement_point_name, nsservice_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_ns_service_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_ns_service_realized_state"
      end
      # verify the required parameter 'nsservice_name' is set
      if @api_client.config.client_side_validation && nsservice_name.nil?
        fail ArgumentError, "Missing the required parameter 'nsservice_name' when calling RealizedStateApi.read_ns_service_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices/{nsservice-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'nsservice-name' + '}', nsservice_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_ns_service_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get realized entity uniquely identified by realized path
    # Get realized entity uniquely identified by realized path, specified by query parameter 
    # @param realized_path String Path of the realized object
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_realized_entity(realized_path, opts = {})
      data, _status_code, _headers = read_realized_entity_with_http_info(realized_path, opts)
      data
    end

    # Get realized entity uniquely identified by realized path
    # Get realized entity uniquely identified by realized path, specified by query parameter 
    # @param realized_path String Path of the realized object
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_realized_entity_with_http_info(realized_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_realized_entity ...'
      end
      # verify the required parameter 'realized_path' is set
      if @api_client.config.client_side_validation && realized_path.nil?
        fail ArgumentError, "Missing the required parameter 'realized_path' when calling RealizedStateApi.read_realized_entity"
      end
      # resource path
      local_var_path = '/infra/realized-state/realized-entity'

      # query parameters
      query_params = {}
      query_params[:'realized_path'] = realized_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_realized_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Group
    # Read a Security Group and the complete tree underneath. Returns the populated Security Group object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param securitygroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedSecurityGroup]
    def read_security_group_realized_state(enforcement_point_name, securitygroup_name, opts = {})
      data, _status_code, _headers = read_security_group_realized_state_with_http_info(enforcement_point_name, securitygroup_name, opts)
      data
    end

    # Read Group
    # Read a Security Group and the complete tree underneath. Returns the populated Security Group object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param securitygroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedSecurityGroup, Fixnum, Hash)>] RealizedSecurityGroup data, response status code and response headers
    def read_security_group_realized_state_with_http_info(enforcement_point_name, securitygroup_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.read_security_group_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling RealizedStateApi.read_security_group_realized_state"
      end
      # verify the required parameter 'securitygroup_name' is set
      if @api_client.config.client_side_validation && securitygroup_name.nil?
        fail ArgumentError, "Missing the required parameter 'securitygroup_name' when calling RealizedStateApi.read_security_group_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups/{securitygroup-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'securitygroup-name' + '}', securitygroup_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedSecurityGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#read_security_group_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def refresh_realized_state(intent_path, opts = {})
      refresh_realized_state_with_http_info(intent_path, opts)
      nil
    end

    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def refresh_realized_state_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealizedStateApi.refresh_realized_state ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling RealizedStateApi.refresh_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/realized-entity?action=refresh'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealizedStateApi#refresh_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
