=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IPBlocksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_address_block(ip_block_id, ip_address_block, opts = {})
      create_or_patch_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts)
      nil
    end

    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.create_or_patch_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.create_or_patch_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPBlocksApi.create_or_patch_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#create_or_patch_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlock]
    def create_or_replace_ip_address_block(ip_block_id, ip_address_block, opts = {})
      data, _status_code, _headers = create_or_replace_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts)
      data
    end

    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def create_or_replace_ip_address_block_with_http_info(ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.create_or_replace_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.create_or_replace_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPBlocksApi.create_or_replace_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#create_or_replace_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_address_block(ip_block_id, opts = {})
      delete_ip_address_block_with_http_info(ip_block_id, opts)
      nil
    end

    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_address_block_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.delete_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.delete_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#delete_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockState]
    def get_ip_address_block_state(intent_path, opts = {})
      data, _status_code, _headers = get_ip_address_block_state_with_http_info(intent_path, opts)
      data
    end

    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockState, Fixnum, Hash)>] IpAddressBlockState data, response status code and response headers
    def get_ip_address_block_state_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.get_ip_address_block_state ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling IPBlocksApi.get_ip_address_block_state"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/state'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#get_ip_address_block_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockUsage]
    def get_ip_address_block_usage(ip_block_id, opts = {})
      data, _status_code, _headers = get_ip_address_block_usage_with_http_info(ip_block_id, opts)
      data
    end

    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockUsage, Fixnum, Hash)>] IpAddressBlockUsage data, response status code and response headers
    def get_ip_address_block_usage_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.get_ip_address_block_usage ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.get_ip_address_block_usage"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}/usage'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#get_ip_address_block_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressBlockListResult]
    def list_ip_address_blocks(opts = {})
      data, _status_code, _headers = list_ip_address_blocks_with_http_info(opts)
      data
    end

    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressBlockListResult, Fixnum, Hash)>] IpAddressBlockListResult data, response status code and response headers
    def list_ip_address_blocks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.list_ip_address_blocks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPBlocksApi.list_ip_address_blocks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPBlocksApi.list_ip_address_blocks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-blocks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#list_ip_address_blocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts)
      nil
    end

    # Create a new IPBlock
    # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_create_or_patch_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlock]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts)
      data
    end

    # Create or Replace IpAddressBlock
    # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param ip_address_block 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block_with_http_info(org_id, project_id, ip_block_id, ip_address_block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # verify the required parameter 'ip_address_block' is set
      if @api_client.config.client_side_validation && ip_address_block.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_block' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_block)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_create_or_replace_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ip_address_block(org_id, project_id, ip_block_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts)
      nil
    end

    # Delete an IpAddressBlock
    # Delete the IpAddressBlock with the given id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_delete_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_delete_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockState]
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_state(org_id, project_id, intent_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_address_block_state_with_http_info(org_id, project_id, intent_path, opts)
      data
    end

    # Get state of the given IpAddressBlock
    # Get state of a given IPAddressBlock. It lists all the allocated IPs and subnets created using that block per Project and VPCs. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockState, Fixnum, Hash)>] IpAddressBlockState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_state_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_get_ip_address_block_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressBlockUsage]
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_usage(org_id, project_id, ip_block_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ip_address_block_usage_with_http_info(org_id, project_id, ip_block_id, opts)
      data
    end

    # Get an IpAddressBlock usage
    # Get IpAddressBlock usage with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressBlockUsage, Fixnum, Hash)>] IpAddressBlockUsage data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ip_address_block_usage_with_http_info(org_id, project_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_get_ip_address_block_usage"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}/usage'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_get_ip_address_block_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressBlockListResult]
    def orgs_org_id_projects_project_id_infra_list_ip_address_blocks(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ip_address_blocks_with_http_info(org_id, project_id, opts)
      data
    end

    # List IpAddressBlocks
    # Paginated list of IpAddressBlocks. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressBlockListResult, Fixnum, Hash)>] IpAddressBlockListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ip_address_blocks_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_list_ip_address_blocks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlockListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_list_ip_address_blocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage.  (default to false)
    # @return [IpAddressBlock]
    def orgs_org_id_projects_project_id_infra_read_ip_address_block(org_id, project_id, ip_block_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts)
      data
    end

    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage. 
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ip_address_block_with_http_info(org_id, project_id, ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.orgs_org_id_projects_project_id_infra_read_ip_address_block ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_read_ip_address_block"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_read_ip_address_block"
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.orgs_org_id_projects_project_id_infra_read_ip_address_block"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ip-blocks/{ip-block-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignore_ipblock_usage'] = opts[:'ignore_ipblock_usage'] if !opts[:'ignore_ipblock_usage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#orgs_org_id_projects_project_id_infra_read_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage.  (default to false)
    # @return [IpAddressBlock]
    def read_ip_address_block(ip_block_id, opts = {})
      data, _status_code, _headers = read_ip_address_block_with_http_info(ip_block_id, opts)
      data
    end

    # Read a IpAddressBlock
    # Read IpAddressBlock with given Id. 
    # @param ip_block_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ignore_ipblock_usage Flag to specify whether to fetch block usage. 
    # @return [Array<(IpAddressBlock, Fixnum, Hash)>] IpAddressBlock data, response status code and response headers
    def read_ip_address_block_with_http_info(ip_block_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPBlocksApi.read_ip_address_block ...'
      end
      # verify the required parameter 'ip_block_id' is set
      if @api_client.config.client_side_validation && ip_block_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_block_id' when calling IPBlocksApi.read_ip_address_block"
      end
      # resource path
      local_var_path = '/infra/ip-blocks/{ip-block-id}'.sub('{' + 'ip-block-id' + '}', ip_block_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignore_ipblock_usage'] = opts[:'ignore_ipblock_usage'] if !opts[:'ignore_ipblock_usage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressBlock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPBlocksApi#read_ip_address_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
