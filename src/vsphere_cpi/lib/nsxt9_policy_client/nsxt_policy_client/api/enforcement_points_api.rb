=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class EnforcementPointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update a Failure Domain
    # Create or Update a failure domain. Modifiable parameters are display_name, preferred_active_edge_services flag. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFailureDomain]
    def create_and_update_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      data, _status_code, _headers = create_and_update_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts)
      data
    end

    # Update a Failure Domain
    # Create or Update a failure domain. Modifiable parameters are display_name, preferred_active_edge_services flag. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFailureDomain, Fixnum, Hash)>] PolicyFailureDomain data, response status code and response headers
    def create_and_update_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.create_and_update_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.create_and_update_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.create_and_update_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling EnforcementPointsApi.create_and_update_policy_failure_domain"
      end
      # verify the required parameter 'policy_failure_domain' is set
      if @api_client.config.client_side_validation && policy_failure_domain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_failure_domain' when calling EnforcementPointsApi.create_and_update_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_failure_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFailureDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#create_and_update_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use PUT /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def create_or_update_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      data, _status_code, _headers = create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      data
    end

    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use PUT /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.create_or_update_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling EnforcementPointsApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling EnforcementPointsApi.create_or_update_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#create_or_update_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/update a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def create_or_update_enforcement_point_for_site(site_id, enforcementpoint_id, enforcement_point, opts = {})
      data, _status_code, _headers = create_or_update_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts)
      data
    end

    # Create/update a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def create_or_update_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.create_or_update_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.create_or_update_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.create_or_update_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling EnforcementPointsApi.create_or_update_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#create_or_update_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Or Update a Policy Edge Cluster
    # Edge Cluster only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType of these edge nodes can be VIRTUAL_MACHINE or PHYSICAL_MACHINE. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer <b>/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/<edge-cluster-id> /action/replace-policy-edge-node</b> API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def create_or_update_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts)
      data
    end

    # Create Or Update a Policy Edge Cluster
    # Edge Cluster only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType of these edge nodes can be VIRTUAL_MACHINE or PHYSICAL_MACHINE. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer &lt;b&gt;/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/&lt;edge-cluster-id&gt; /action/replace-policy-edge-node&lt;/b&gt; API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def create_or_update_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.create_or_update_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'policy_edge_cluster' is set
      if @api_client.config.client_side_validation && policy_edge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_cluster' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#create_or_update_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def create_or_update_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      data
    end

    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.create_or_update_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling EnforcementPointsApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#create_or_update_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, update it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def create_or_update_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      data
    end

    # Create or update a LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, update it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def create_or_update_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.create_or_update_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling EnforcementPointsApi.create_or_update_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#create_or_update_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EnforcementPoint
    # Delete EnforcementPoint.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use DELETE /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point(deployment_zone_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      nil
    end

    # Delete EnforcementPoint
    # Delete EnforcementPoint.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use DELETE /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.delete_enforcement_point ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling EnforcementPointsApi.delete_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.delete_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#delete_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EnforcementPoint from Site
    # Delete EnforcementPoint from Site
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      nil
    end

    # Delete EnforcementPoint from Site
    # Delete EnforcementPoint from Site
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.delete_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.delete_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.delete_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#delete_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the specified edge cluster.
    # Delete the specified edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_member_edge_nodes Flag to specify whether to delete edge transport nodes within edge cluster.  (default to false)
    # @return [nil]
    def delete_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      delete_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      nil
    end

    # Delete the specified edge cluster.
    # Delete the specified edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_member_edge_nodes Flag to specify whether to delete edge transport nodes within edge cluster. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.delete_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.delete_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.delete_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.delete_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'delete_member_edge_nodes'] = opts[:'delete_member_edge_nodes'] if !opts[:'delete_member_edge_nodes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#delete_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      nil
    end

    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.delete_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EnforcementPointsApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#delete_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Edge Transport Node
    # Delete Edge Transport Node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      delete_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Delete Edge Transport Node
    # Delete Edge Transport Node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.delete_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.delete_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.delete_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.delete_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#delete_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Failure Domain
    # Deletes an existing failure domain. You can not delete system generated default failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      delete_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts)
      nil
    end

    # Delete a Failure Domain
    # Deletes an existing failure domain. You can not delete system generated default failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.delete_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.delete_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.delete_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling EnforcementPointsApi.delete_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#delete_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Full sync EnforcementPoint from Site
    # Full sync EnforcementPoint from Site
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def full_sync_enforcement_point_for_site(site_id, enforcement_point_id, opts = {})
      full_sync_enforcement_point_for_site_with_http_info(site_id, enforcement_point_id, opts)
      nil
    end

    # Full sync EnforcementPoint from Site
    # Full sync EnforcementPoint from Site
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def full_sync_enforcement_point_for_site_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.full_sync_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.full_sync_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling EnforcementPointsApi.full_sync_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}?action=full-sync'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#full_sync_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeClusterAllocationStatus]
    def get_policy_edge_cluster_allocation_status(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeClusterAllocationStatus, Fixnum, Hash)>] PolicyEdgeClusterAllocationStatus data, response status code and response headers
    def get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_cluster_allocation_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.get_policy_edge_cluster_allocation_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/allocation/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterAllocationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_cluster_allocation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster State info under an Enforcement Point
    # Returns information about the current state of the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [PolicyEdgeClusterState]
    def get_policy_edge_cluster_state(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_state_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster State info under an Enforcement Point
    # Returns information about the current state of the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(PolicyEdgeClusterState, Fixnum, Hash)>] PolicyEdgeClusterState data, response status code and response headers
    def get_policy_edge_cluster_state_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_cluster_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_cluster_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_cluster_state"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.get_policy_edge_cluster_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling EnforcementPointsApi.get_policy_edge_cluster_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_cluster_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterStatus]
    def get_policy_edge_cluster_status(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts)
      data
    end

    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterStatus, Fixnum, Hash)>] PolicyEdgeClusterStatus data, response status code and response headers
    def get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling EnforcementPointsApi.get_policy_edge_cluster_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['realtime', 'cached'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of realtime, cached"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.get_policy_edge_cluster_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.get_policy_edge_cluster_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Transport Node under an Enforcement Point
    # Read an Edge Transport Node  under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def get_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Read an Edge Transport Node under an Enforcement Point
    # Read an Edge Transport Node  under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def get_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.get_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read counters for edge transport node interfaces.
    # This API returns the counters of the specified interface. The counters reset on reboot or redeploy of the appliance or restart of the data plane. NSX Manager polls the edge-transport-node every minute (by default) to update the data returned on this API. If you need near realtime values, use the query parameter \\\"?source=realtime\\\" to the API and it will make NSX Manager collect the statistics from the edge transport node and returns the updated counters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def get_policy_edge_transport_node_interface_statistics(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_interface_statistics_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts)
      data
    end

    # Read counters for edge transport node interfaces.
    # This API returns the counters of the specified interface. The counters reset on reboot or redeploy of the appliance or restart of the data plane. NSX Manager polls the edge-transport-node every minute (by default) to update the data returned on this API. If you need near realtime values, use the query parameter \\\&quot;?source&#x3D;realtime\\\&quot; to the API and it will make NSX Manager collect the statistics from the edge transport node and returns the updated counters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def get_policy_edge_transport_node_interface_statistics_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_transport_node_interface_statistics ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/network/interfaces/{interface-id}/statistics'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_transport_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNodeState]
    def get_policy_edge_transport_node_state(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_state_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNodeState, Fixnum, Hash)>] PolicyEdgeTransportNodeState data, response status code and response headers
    def get_policy_edge_transport_node_state_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_transport_node_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_state"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_state"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_transport_node_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's status info under an Enforcement Point
    # Returns information about the current status of the edge transport node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransportNodeStatus]
    def get_policy_edge_transport_node_status(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_status_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s status info under an Enforcement Point
    # Returns information about the current status of the edge transport node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransportNodeStatus, Fixnum, Hash)>] TransportNodeStatus data, response status code and response headers
    def get_policy_edge_transport_node_status_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_transport_node_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_status"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.get_policy_edge_transport_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get datapath troubleshoot config of edge transport nodes
    # This API is used to fetch the control packet drop log config at enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNodeDatapathTroubleshooting]
    def get_policy_edge_transport_nodes_troubleshoot_config(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get datapath troubleshoot config of edge transport nodes
    # This API is used to fetch the control packet drop log config at enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNodeDatapathTroubleshooting, Fixnum, Hash)>] PolicyEdgeTransportNodeDatapathTroubleshooting data, response status code and response headers
    def get_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_edge_transport_nodes_troubleshoot_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling EnforcementPointsApi.get_policy_edge_transport_nodes_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-transport-nodes/troubleshoot/datapath'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeDatapathTroubleshooting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_edge_transport_nodes_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Failure Domain
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFailureDomain]
    def get_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      data, _status_code, _headers = get_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts)
      data
    end

    # Get a Failure Domain
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFailureDomain, Fixnum, Hash)>] PolicyFailureDomain data, response status code and response headers
    def get_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.get_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.get_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.get_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling EnforcementPointsApi.get_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFailureDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#get_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeClusterAllocationStatus]
    def global_infra_get_policy_edge_cluster_allocation_status(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeClusterAllocationStatus, Fixnum, Hash)>] PolicyEdgeClusterAllocationStatus data, response status code and response headers
    def global_infra_get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_get_policy_edge_cluster_allocation_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/allocation/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterAllocationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_get_policy_edge_cluster_allocation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterStatus]
    def global_infra_get_policy_edge_cluster_status(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      data, _status_code, _headers = global_infra_get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts)
      data
    end

    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterStatus, Fixnum, Hash)>] PolicyEdgeClusterStatus data, response status code and response headers
    def global_infra_get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_get_policy_edge_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['realtime', 'cached'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of realtime, cached"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_get_policy_edge_cluster_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_get_policy_edge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterListResult]
    def global_infra_list_edge_clusters_for_enforcement_point(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = global_infra_list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterListResult, Fixnum, Hash)>] PolicyEdgeClusterListResult data, response status code and response headers
    def global_infra_list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_list_edge_clusters_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_list_edge_clusters_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_list_edge_clusters_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_list_edge_clusters_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_list_edge_clusters_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_list_edge_clusters_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeNodeListResult]
    def global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeNodeListResult, Fixnum, Hash)>] PolicyEdgeNodeListResult data, response status code and response headers
    def global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def global_infra_list_enforcement_point_for_site(site_id, opts = {})
      data, _status_code, _headers = global_infra_list_enforcement_point_for_site_with_http_info(site_id, opts)
      data
    end

    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def global_infra_list_enforcement_point_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_list_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_list_enforcement_point_for_site"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_list_enforcement_point_for_site, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.global_infra_list_enforcement_point_for_site, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_list_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def global_infra_read_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def global_infra_read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_read_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.global_infra_read_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_read_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeNode]
    def global_infra_read_edge_node_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      data, _status_code, _headers = global_infra_read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts)
      data
    end

    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeNode, Fixnum, Hash)>] PolicyEdgeNode data, response status code and response headers
    def global_infra_read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_node_id' is set
      if @api_client.config.client_side_validation && edge_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_node_id' when calling EnforcementPointsApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes/{edge-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'edge-node-id' + '}', edge_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_read_edge_node_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def global_infra_read_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = global_infra_read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def global_infra_read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.global_infra_read_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.global_infra_read_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.global_infra_read_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#global_infra_read_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterListResult]
    def list_edge_clusters_for_enforcement_point(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterListResult, Fixnum, Hash)>] PolicyEdgeClusterListResult data, response status code and response headers
    def list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_edge_clusters_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_edge_clusters_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_edge_clusters_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_edge_clusters_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_edge_clusters_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_edge_clusters_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeNodeListResult]
    def list_edge_nodes_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeNodeListResult, Fixnum, Hash)>] PolicyEdgeNodeListResult data, response status code and response headers
    def list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_edge_nodes_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_edge_nodes_under_edge_cluster_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_edge_nodes_under_edge_cluster_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_edge_nodes_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_infra(deployment_zone_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts)
      data
    end

    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling EnforcementPointsApi.list_enforcement_point_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_enforcement_point_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_enforcement_point_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_site(site_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_site_with_http_info(site_id, opts)
      data
    end

    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_enforcement_point_for_site"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_enforcement_point_for_site, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_enforcement_point_for_site, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to true)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EdgeClusterHighAvailabilityProfileListResult]
    def list_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EdgeClusterHighAvailabilityProfileListResult, Fixnum, Hash)>] EdgeClusterHighAvailabilityProfileListResult data, response status code and response headers
    def list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_policy_edge_cluster_high_availability_profile"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_edge_cluster_high_availability_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_edge_cluster_high_availability_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeClusterHighAvailabilityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Transport Node under an Enforcement Point
    # List Edge Transport Nodes under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode Maintenance mode flag
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :management_ip Edge transport node management IP address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [PolicyEdgeTransportNodeListResult]
    def list_policy_edge_transport_node(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Transport Node under an Enforcement Point
    # List Edge Transport Nodes under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode Maintenance mode flag
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :management_ip Edge transport node management IP address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [Array<(PolicyEdgeTransportNodeListResult, Fixnum, Hash)>] PolicyEdgeTransportNodeListResult data, response status code and response headers
    def list_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_policy_edge_transport_node"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_edge_transport_node, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_edge_transport_node, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'in_maintenance_mode'] = opts[:'in_maintenance_mode'] if !opts[:'in_maintenance_mode'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'management_ip'] = opts[:'management_ip'] if !opts[:'management_ip'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'transport_zone_path'] = opts[:'transport_zone_path'] if !opts[:'transport_zone_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the specified edge transport node's network interfaces.
    # Returns the number of interfaces on the edge transport node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :admin_status Admin status of the interface
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_policy_edge_transport_node_interfaces(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_node_interfaces_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # List the specified edge transport node&#39;s network interfaces.
    # Returns the number of interfaces on the edge transport node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :admin_status Admin status of the interface
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_policy_edge_transport_node_interfaces_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_policy_edge_transport_node_interfaces ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_policy_edge_transport_node_interfaces"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_policy_edge_transport_node_interfaces"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.list_policy_edge_transport_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'admin_status'] && !['UP', 'DOWN'].include?(opts[:'admin_status'])
        fail ArgumentError, 'invalid value for "admin_status", must be one of UP, DOWN'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/network/interfaces'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'admin_status'] = opts[:'admin_status'] if !opts[:'admin_status'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_policy_edge_transport_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [PolicyEdgeTransportNodeStateListResult]
    def list_policy_edge_transport_nodes_state(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_nodes_state_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [Array<(PolicyEdgeTransportNodeStateListResult, Fixnum, Hash)>] PolicyEdgeTransportNodeStateListResult data, response status code and response headers
    def list_policy_edge_transport_nodes_state_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_policy_edge_transport_nodes_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_policy_edge_transport_nodes_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_policy_edge_transport_nodes_state"
      end
      if @api_client.config.client_side_validation && opts[:'mm_state'] && !['ENTERING', 'ENABLED', 'EXITING', 'DISABLED'].include?(opts[:'mm_state'])
        fail ArgumentError, 'invalid value for "mm_state", must be one of ENTERING, ENABLED, EXITING, DISABLED'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'IN_PROGRESS', 'SUCCESS', 'PARTIAL_SUCCESS', 'FAILED', 'ORPHANED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, IN_PROGRESS, SUCCESS, PARTIAL_SUCCESS, FAILED, ORPHANED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'mm_state'] = opts[:'mm_state'] if !opts[:'mm_state'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'vtep_ip'] = opts[:'vtep_ip'] if !opts[:'vtep_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_policy_edge_transport_nodes_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all edge transport nodes. The service layer does not support source = realtime or cached.
    # Get high-level summary of all edge transport nodes. The service layer does not support source = realtime or cached.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_policy_edge_transport_nodes_status(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_nodes_status_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Get high-level summary of all edge transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # Get high-level summary of all edge transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_policy_edge_transport_nodes_status_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_policy_edge_transport_nodes_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_policy_edge_transport_nodes_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_policy_edge_transport_nodes_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_edge_transport_nodes_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_edge_transport_nodes_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_policy_edge_transport_nodes_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Failure Domains
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFailureDomainListResult]
    def list_policy_failure_domain(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Policy Failure Domains
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFailureDomainListResult, Fixnum, Hash)>] PolicyFailureDomainListResult data, response status code and response headers
    def list_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.list_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.list_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.list_policy_failure_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_failure_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EnforcementPointsApi.list_policy_failure_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFailureDomainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#list_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use PATCH /infra/sites/site-1/enforcement-points/enforcementpoint-1. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      patch_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      nil
    end

    # Patch a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use PATCH /infra/sites/site-1/enforcement-points/enforcementpoint-1. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling EnforcementPointsApi.patch_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.patch_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling EnforcementPointsApi.patch_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_enforcement_point_for_site(site_id, enforcementpoint_id, enforcement_point, opts = {})
      patch_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts)
      nil
    end

    # Patch a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.patch_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.patch_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling EnforcementPointsApi.patch_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy Edge Cluster
    # Patch a policy edge cluster. It only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these Edge Nodes is recommended to be the same. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer <b>/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/<edge-cluster-id> /action/replace-policy-edge-node</b> api. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      patch_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts)
      nil
    end

    # Patch a Policy Edge Cluster
    # Patch a policy edge cluster. It only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these Edge Nodes is recommended to be the same. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer &lt;b&gt;/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/&lt;edge-cluster-id&gt; /action/replace-policy-edge-node&lt;/b&gt; api. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'policy_edge_cluster' is set
      if @api_client.config.client_side_validation && policy_edge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_cluster' when calling EnforcementPointsApi.patch_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      nil
    end

    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EnforcementPointsApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling EnforcementPointsApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      patch_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      nil
    end

    # Patch a new LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling EnforcementPointsApi.patch_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable or Disable the datapath troubleshoot config on edge transport nodes
    # This API is used to enable/disable the control packet drop log config in all edge transport nodes at the enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param policy_edge_transport_node_datapath_troubleshooting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_transport_nodes_troubleshoot_config(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts = {})
      patch_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts)
      nil
    end

    # Enable or Disable the datapath troubleshoot config on edge transport nodes
    # This API is used to enable/disable the control packet drop log config in all edge transport nodes at the enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param policy_edge_transport_node_datapath_troubleshooting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_policy_edge_transport_nodes_troubleshoot_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling EnforcementPointsApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'policy_edge_transport_node_datapath_troubleshooting' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node_datapath_troubleshooting.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node_datapath_troubleshooting' when calling EnforcementPointsApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-transport-nodes/troubleshoot/datapath'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node_datapath_troubleshooting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_policy_edge_transport_nodes_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy FailureDomain
    # Patch a Policy FailureDomain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      patch_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts)
      nil
    end

    # Patch a Policy FailureDomain
    # Patch a Policy FailureDomain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.patch_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.patch_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.patch_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling EnforcementPointsApi.patch_policy_failure_domain"
      end
      # verify the required parameter 'policy_failure_domain' is set
      if @api_client.config.client_side_validation && policy_failure_domain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_failure_domain' when calling EnforcementPointsApi.patch_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_failure_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#patch_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Edge Transport Node Enter Maintenance Mode Action API
    # Put edge transport node into maintenance mode if there is no VIFs attached. When EdgeTransportNode is in maintenance mode, no configuration changes are allowed. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def policy_edge_transport_node_enter_maintenance_mode(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      policy_edge_transport_node_enter_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Policy Edge Transport Node Enter Maintenance Mode Action API
    # Put edge transport node into maintenance mode if there is no VIFs attached. When EdgeTransportNode is in maintenance mode, no configuration changes are allowed. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def policy_edge_transport_node_enter_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.policy_edge_transport_node_enter_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/enter-maintenance-mode'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#policy_edge_transport_node_enter_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Edge Transport Node Exit Maintenance Mode Action API
    # This APi will exit from maintenance mode 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def policy_edge_transport_node_exit_maintenance_mode(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      policy_edge_transport_node_exit_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Policy Edge Transport Node Exit Maintenance Mode Action API
    # This APi will exit from maintenance mode 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def policy_edge_transport_node_exit_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.policy_edge_transport_node_exit_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/exit-maintenance-mode'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#policy_edge_transport_node_exit_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def read_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.read_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.read_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#read_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeNode]
    def read_edge_node_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      data, _status_code, _headers = read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts)
      data
    end

    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeNode, Fixnum, Hash)>] PolicyEdgeNode data, response status code and response headers
    def read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.read_edge_node_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_node_id' is set
      if @api_client.config.client_side_validation && edge_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_node_id' when calling EnforcementPointsApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes/{edge-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'edge-node-id' + '}', edge_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#read_edge_node_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point
    # Read an Enforcement Point.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point
    # Read an Enforcement Point.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.read_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling EnforcementPointsApi.read_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.read_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#read_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.read_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.read_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.read_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#read_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def read_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      data, _status_code, _headers = read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      data
    end

    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.read_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EnforcementPointsApi.read_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#read_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Redeploy Edge Transport Node
    # Redeploys an edge transport node at NSX Manager that replaces the edge transport node with identifier &lt;node-id&gt;. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def redeploy_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      data, _status_code, _headers = redeploy_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      data
    end

    # Redeploy Edge Transport Node
    # Redeploys an edge transport node at NSX Manager that replaces the edge transport node with identifier &amp;lt;node-id&amp;gt;. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def redeploy_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.redeploy_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling EnforcementPointsApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling EnforcementPointsApi.redeploy_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/redeploy'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#redeploy_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reload an Enforcement Point under Site
    # Reload an Enforcement Point under Site. This will read and update fabric configs from enforcement point. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def reload_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = reload_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Reload an Enforcement Point under Site
    # Reload an Enforcement Point under Site. This will read and update fabric configs from enforcement point. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def reload_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.reload_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.reload_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.reload_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}?action=reload'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#reload_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Relocate service contexts from policy edge node  and remove policy edge node from the edge-cluster
    # Relocate auto allocated service contexts from policy edge node at given id. For API to perform relocate and remove action the edge node at given id must only have auto allocated service contexts. If any manually allocated service context is present on the edge cluster member, then the task will not be performed. Also, it is recommended to move the edge node for which relocate and remove action is being performed into maintenance mode,before executing the API. If edge is not moved into maintenance mode, then API will move edge node into maintenance mode before performing the actual relocate and remove task.To maintain high availability, Edge cluster should have at least two healthy edge nodes for relocation and removal. Once relocate action is performed successfully, the policy edge node will be removed from the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_relocate_and_remove_member 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def relocate_and_remove_policy_edge_node(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts = {})
      relocate_and_remove_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts)
      nil
    end

    # Relocate service contexts from policy edge node  and remove policy edge node from the edge-cluster
    # Relocate auto allocated service contexts from policy edge node at given id. For API to perform relocate and remove action the edge node at given id must only have auto allocated service contexts. If any manually allocated service context is present on the edge cluster member, then the task will not be performed. Also, it is recommended to move the edge node for which relocate and remove action is being performed into maintenance mode,before executing the API. If edge is not moved into maintenance mode, then API will move edge node into maintenance mode before performing the actual relocate and remove task.To maintain high availability, Edge cluster should have at least two healthy edge nodes for relocation and removal. Once relocate action is performed successfully, the policy edge node will be removed from the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_relocate_and_remove_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def relocate_and_remove_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.relocate_and_remove_policy_edge_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'policy_edge_node_relocate_and_remove_member' is set
      if @api_client.config.client_side_validation && policy_edge_node_relocate_and_remove_member.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_node_relocate_and_remove_member' when calling EnforcementPointsApi.relocate_and_remove_policy_edge_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/action/relocate-and-remove-edge-transport-node'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_node_relocate_and_remove_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#relocate_and_remove_policy_edge_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace the policy edge node at the specified member-index in the edge-cluster
    # Replace the Policy Edge Node present at the specified member-index in the edge-cluster. This is a disruptive action. This will move all the Interfaces(uplink and routerLink) hosted on the old Policy Edge Node to the new Policy Edge Node. The same Policy Edge Node cannot be present as a member of any edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_replace_member 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def replace_policy_edge_node(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts = {})
      data, _status_code, _headers = replace_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts)
      data
    end

    # Replace the policy edge node at the specified member-index in the edge-cluster
    # Replace the Policy Edge Node present at the specified member-index in the edge-cluster. This is a disruptive action. This will move all the Interfaces(uplink and routerLink) hosted on the old Policy Edge Node to the new Policy Edge Node. The same Policy Edge Node cannot be present as a member of any edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_replace_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def replace_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnforcementPointsApi.replace_policy_edge_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EnforcementPointsApi.replace_policy_edge_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EnforcementPointsApi.replace_policy_edge_node"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EnforcementPointsApi.replace_policy_edge_node"
      end
      # verify the required parameter 'policy_edge_node_replace_member' is set
      if @api_client.config.client_side_validation && policy_edge_node_replace_member.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_node_replace_member' when calling EnforcementPointsApi.replace_policy_edge_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/action/replace-edge-transport-node'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_node_replace_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnforcementPointsApi#replace_policy_edge_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
