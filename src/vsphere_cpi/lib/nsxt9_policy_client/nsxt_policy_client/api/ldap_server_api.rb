=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LdapServerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_patch_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.create_or_patch_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LdapServerApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling LdapServerApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#create_or_patch_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_replace_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.create_or_replace_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LdapServerApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling LdapServerApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#create_or_replace_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.delete_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LdapServerApi.delete_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.delete_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#delete_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def global_infra_get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.global_infra_get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#global_infra_get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def global_infra_list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.global_infra_list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.global_infra_list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LdapServerApi.global_infra_list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LdapServerApi.global_infra_list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#global_infra_list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryLdapServerListResults]
    def list_firewall_identity_store_ldap_servers(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryLdapServerListResults, Fixnum, Hash)>] DirectoryLdapServerListResults data, response status code and response headers
    def list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.list_firewall_identity_store_ldap_servers ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LdapServerApi.list_firewall_identity_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LdapServerApi.list_firewall_identity_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LdapServerApi.list_firewall_identity_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#list_firewall_identity_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LdapServerApi.list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LdapServerApi.list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def patch_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.patch_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling LdapServerApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#patch_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def read_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.read_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LdapServerApi.read_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.read_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#read_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.remove_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.remove_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.remove_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#remove_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def replace_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapServerApi.replace_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling LdapServerApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LdapServerApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling LdapServerApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapServerApi#replace_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
