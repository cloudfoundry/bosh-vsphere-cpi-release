=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_patch_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path.  <br> This API is deprecated. Please use POST /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=create_with_peer_code instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_session_from_peer_codes(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. Note:  Please note that request is validated and any error messages returned from validation may include the new VPN path  instead of the deprecated path. Both new path and old path refer to same resource.  Also VPN path returned in the Alarm, GPRR payload may include the new VPN path.  &lt;br&gt; This API is deprecated. Please use POST /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;create_with_peer_code instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling SessionsApi.create_or_patch_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L3Vpn
    # Create the new L3Vpn if it does not exist. If the L3Vpn already exists, merge with the the existing one. This is a patch. - If the passed L3Vpn is a policy-based one and has new L3VpnRules, add them to the existing L3VpnRules. - If the passed L3Vpn is a policy-based one and also has existing L3VpnRules, update the existing L3VpnRules. This API is deprecated. Please use the following APIs instead: - PATCH /infra/ipsec-vpn-tunnel-profiles/&lt;tunnel-profile-id&gt; to patch the IPSecVpnTunnelProfile. - PATCH /infra/ipsec-vpn-ike-profiles/&lt;ike-profile-id&gt; to patch the IPSecVpnIkeProfile. - PATCH /infra/ipsec-vpn-dpd-profiles/&lt;dpd-profile-id&gt; to patch the IPSecVpnDpdProfile. - PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to patch the IPSecVpnLocalEndpoint. - PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/&lt;l3vpn-id&gt; to patch the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/patched: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/local-endpoints/&lt;local-endpoint-id&gt;. If an object with the same   \"local_address\" already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      create_or_patch_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts)
      nil
    end

    # Create or patch an L3Vpn
    # Create the new L3Vpn if it does not exist. If the L3Vpn already exists, merge with the the existing one. This is a patch. - If the passed L3Vpn is a policy-based one and has new L3VpnRules, add them to the existing L3VpnRules. - If the passed L3Vpn is a policy-based one and also has existing L3VpnRules, update the existing L3VpnRules. This API is deprecated. Please use the following APIs instead: - PATCH /infra/ipsec-vpn-tunnel-profiles/&amp;lt;tunnel-profile-id&amp;gt; to patch the IPSecVpnTunnelProfile. - PATCH /infra/ipsec-vpn-ike-profiles/&amp;lt;ike-profile-id&amp;gt; to patch the IPSecVpnIkeProfile. - PATCH /infra/ipsec-vpn-dpd-profiles/&amp;lt;dpd-profile-id&amp;gt; to patch the IPSecVpnDpdProfile. - PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to patch the IPSecVpnLocalEndpoint. - PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/&amp;lt;l3vpn-id&amp;gt; to patch the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/patched: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt;. If an object with the same   \&quot;local_address\&quot; already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling SessionsApi.create_or_patch_l3_vpn"
      end
      # verify the required parameter 'l3_vpn' is set
      if @api_client.config.client_side_validation && l3_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l3_vpn' when calling SessionsApi.create_or_patch_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l3_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_patch_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_patch_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0
    # Create or patch an L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes(tier_0_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-0 from Peer Codes
    # Create or patch an L2VPN session under Tier-0 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling SessionsApi.create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier0_vpn_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_patch_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode.  <br> This API is deprecated. Please use POST /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=create_with_peer_code instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_l2_vpn_session_from_peer_codes(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_tier1_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode.  &lt;br&gt; This API is deprecated. Please use POST /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;create_with_peer_code instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling SessionsApi.create_or_patch_tier1_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier1_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes(tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling SessionsApi.create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace an L3Vpn
    # Create a new L3Vpn if the L3Vpn with given id does not already exist. If the L3Vpn with the given id already exists, replace the existing L3Vpn. This a full replace. This API is deprecated. Please use the following APIs instead: - PUT /infra/ipsec-vpn-tunnel-profiles/&lt;tunnel-profile-id&gt; to update the IPSecVpnTunnelProfile. - PUT /infra/ipsec-vpn-ike-profiles/&lt;ike-profile-id&gt; to update the IPSecVpnIkeProfile. - PUT /infra/ipsec-vpn-dpd-profiles/&lt;dpd-profile-id&gt; to update the IPSecVpnDpdProfile. - PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to update the IPSecVpnLocalEndpoint. - PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/&lt;l3vpn-id&gt; to update the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/updated: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/local-endpoints/&lt;local-endpoint-id&gt;. If an object with the same   \"local_address\" already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/   ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [L3Vpn]
    def create_or_replace_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      data, _status_code, _headers = create_or_replace_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts)
      data
    end

    # Create or replace an L3Vpn
    # Create a new L3Vpn if the L3Vpn with given id does not already exist. If the L3Vpn with the given id already exists, replace the existing L3Vpn. This a full replace. This API is deprecated. Please use the following APIs instead: - PUT /infra/ipsec-vpn-tunnel-profiles/&amp;lt;tunnel-profile-id&amp;gt; to update the IPSecVpnTunnelProfile. - PUT /infra/ipsec-vpn-ike-profiles/&amp;lt;ike-profile-id&amp;gt; to update the IPSecVpnIkeProfile. - PUT /infra/ipsec-vpn-dpd-profiles/&amp;lt;dpd-profile-id&amp;gt; to update the IPSecVpnDpdProfile. - PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to update the IPSecVpnLocalEndpoint. - PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/&amp;lt;l3vpn-id&amp;gt; to update the IPSecVpnSession. If used, this deprecated API will result in the following objects being internally created/updated: - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt;. If an object with the same   \&quot;local_address\&quot; already exists, then it will be re-used. - IPSecVpnSession: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/   ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param l3_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3Vpn, Fixnum, Hash)>] L3Vpn data, response status code and response headers
    def create_or_replace_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, l3_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_replace_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_replace_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_replace_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling SessionsApi.create_or_replace_l3_vpn"
      end
      # verify the required parameter 'l3_vpn' is set
      if @api_client.config.client_side_validation && l3_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l3_vpn' when calling SessionsApi.create_or_replace_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l3_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_replace_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path   Both paths refer to the same object.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path   Both paths refer to the same object.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_update_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-0. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_update_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_update_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-0
    # Create or fully replace L2VPN session under Tier-0. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_update_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a given locale service under Tier-1. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_update_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier1_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_update_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def create_or_update_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.create_or_update_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.create_or_update_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#create_or_update_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an L3Vpn
    # Delete the L3Vpn with the given id. This API is deprecated. Please use the following APIs instead: - DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/sessions/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnSession. - DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/local-endpoints/&lt;local-endpoint-id&gt; to delete the associated IPSecVpnLocalEndpoint. - DELETE /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnTunnelProfile. - DELETE /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnIkeProfile. - DELETE /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt; to delete the associated IPSecVpnDpdProfile. If used, this deprecated API will result in the following objects being internally deleted: - IPSecVpnSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ ipsec-vpn-services/default/local-endpoints/&lt;local-endpoint-id&gt; when not used by other IPSecVpnSessions. - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      delete_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      nil
    end

    # Delete an L3Vpn
    # Delete the L3Vpn with the given id. This API is deprecated. Please use the following APIs instead: - DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnSession. - DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to delete the associated IPSecVpnLocalEndpoint. - DELETE /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnTunnelProfile. - DELETE /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnIkeProfile. - DELETE /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to delete the associated IPSecVpnDpdProfile. If used, this deprecated API will result in the following objects being internally deleted: - IPSecVpnSession: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnLocalEndpoint: /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ ipsec-vpn-services/default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; when not used by other IPSecVpnSessions. - IPSecVpnTunnelProfile: /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnIkeProfile: /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. - IPSecVpnDpdProfile: /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.delete_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.delete_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling SessionsApi.delete_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, opts = {})
      delete_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.delete_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, opts = {})
      delete_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-0
    # Delete L2VPN session under Tier-0. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.delete_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the    new VPN path instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      delete_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.delete_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.delete_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, opts = {})
      delete_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, opts = {})
      delete_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.delete_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.delete_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#delete_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/peer-config instead. Note:   The \"transport_tunnel_path\" returned in the payload wil be a new vpn path instead of the deprecated API path.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_l2_vpn_session_peer_config(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:   The \&quot;transport_tunnel_path\&quot; returned in the payload wil be a new vpn path instead of the deprecated API path.   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_l2_vpn_session_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/peer-config instead. Note:    Please note that request is validated and any error messages returned from validation may include    the new VPN path instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier0_ip_sec_vpn_peer_config(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:    Please note that request is validated and any error messages returned from validation may include    the new VPN path instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier0_ip_sec_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=show_sensitive_data instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_ip_sec_vpn_session_with_sensitive_data(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;show_sensitive_data instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier0_ipsec_vpn_session_summary(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_ipsec_vpn_session_summary_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier0_ipsec_vpn_session_summary_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier0_vpn_ip_sec_vpn_peer_config(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_peer_config_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_peer_config_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_vpn_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_vpn_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_vpn_ip_sec_vpn_session(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_vpn_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier0_vpn_ipsec_vpn_session_summary(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_tier0_vpn_l2_vpn_session(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-0
    # Get L2VPN session under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_tier0_vpn_l2_vpn_session_peer_config(tier_0_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_l2_vpn_session_peer_config_with_http_info(tier_0_id, service_id, session_id, opts)
      data
    end

    # Get Tier-0 L2VPN session configuration for the peer site
    # Get peer config for the Tier-0 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_tier0_vpn_l2_vpn_session_peer_config_with_http_info(tier_0_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier0_vpn_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.get_tier0_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier0_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier0_vpn_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier0_vpn_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;/peer-config instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier1_ip_sec_vpn_peer_config(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier1_ip_sec_vpn_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions/&lt;session-id&gt;?action=show_sensitive_data instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_ip_sec_vpn_session_with_sensitive_data(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions/&amp;lt;session-id&amp;gt;?action&#x3D;show_sensitive_data instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier1_ipsec_vpn_session_summary(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_ipsec_vpn_session_summary_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier1_ipsec_vpn_session_summary_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt; instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_tier1_l2_vpn_session(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt; instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_tier1_l2_vpn_session_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier1_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/ sessions/&lt;session-id&gt;/peer-config instead. Note:    The API will return a new VPN path for \"transport_tunnel_path\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_tier1_l2_vpn_session_peer_config(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_l2_vpn_session_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/ sessions/&amp;lt;session-id&amp;gt;/peer-config instead. Note:    The API will return a new VPN path for \&quot;transport_tunnel_path\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_tier1_l2_vpn_session_peer_config_with_http_info(tier_1_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.get_tier1_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def get_tier1_vpn_ip_sec_vpn_peer_config(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_vpn_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_vpn_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_vpn_ip_sec_vpn_session(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def get_tier1_vpn_ipsec_vpn_session_summary(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_tier1_vpn_l2_vpn_session(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_tier1_vpn_l2_vpn_session_peer_config(tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(tier_1_id, service_id, session_id, opts)
      data
    end

    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_tier1_vpn_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_tier1_vpn_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ l2vpn-services/&lt;service-id&gt;/sessions instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_l2_vpn_sessions(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_l2_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ l2vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_l2_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.list_l2_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.list_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List L3Vpns
    # Paginated list of L3Vpns. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions to list all IPSecVpnSessions. - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints to list all IPSecVpnLocalEndpoints. - GET /infra/ipsec-vpn-tunnel-profiles to list all IPSecVpnTunnelProfiles. - GET /infra/ipsec-vpn-ike-profiles to list all IPSecVpnIkeProfiles. - GET /infra/ipsec-vpn-dpd-profiles to list all IPSecVpnDpdProfiles. If used, this deprecated API will only return L3Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l3vpns/&lt;l3vpn-id&gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :l3vpn_session Resource type of L3Vpn Session
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L3VpnListResult]
    def list_l3_vpns(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l3_vpns_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List L3Vpns
    # Paginated list of L3Vpns. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions to list all IPSecVpnSessions. - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints to list all IPSecVpnLocalEndpoints. - GET /infra/ipsec-vpn-tunnel-profiles to list all IPSecVpnTunnelProfiles. - GET /infra/ipsec-vpn-ike-profiles to list all IPSecVpnIkeProfiles. - GET /infra/ipsec-vpn-dpd-profiles to list all IPSecVpnDpdProfiles. If used, this deprecated API will only return L3Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/l3vpns/&amp;lt;l3vpn-id&amp;gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :l3vpn_session Resource type of L3Vpn Session
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L3VpnListResult, Fixnum, Hash)>] L3VpnListResult data, response status code and response headers
    def list_l3_vpns_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_l3_vpns ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.list_l3_vpns"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.list_l3_vpns"
      end
      if @api_client.config.client_side_validation && opts[:'l3vpn_session'] && !['PolicyBasedL3VpnSession', 'RouteBasedL3VpnSession'].include?(opts[:'l3vpn_session'])
        fail ArgumentError, 'invalid value for "l3vpn_session", must be one of PolicyBasedL3VpnSession, RouteBasedL3VpnSession'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_l3_vpns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_l3_vpns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'l3vpn_session'] = opts[:'l3vpn_session'] if !opts[:'l3vpn_session'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3VpnListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_l3_vpns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier0_ip_sec_vpn_sessions(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier0_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.list_tier0_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.list_tier0_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier0_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier0_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier0_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier0_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier0_vpn_ip_sec_vpn_sessions(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_ip_sec_vpn_sessions_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier0_vpn_ip_sec_vpn_sessions_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier0_vpn_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.list_tier0_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier0_vpn_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier0_vpn_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier0_vpn_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier0_vpn_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_tier0_vpn_l2_vpn_sessions(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_l2_vpn_sessions_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-0
    # Get paginated list of all L2VPN sessions under Tier-0.
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_tier0_vpn_l2_vpn_sessions_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier0_vpn_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.list_tier0_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier0_vpn_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier0_vpn_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier0_vpn_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier0_vpn_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/sessions instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier1_ip_sec_vpn_sessions(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier1_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.list_tier1_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.list_tier1_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier1_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier1_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/l2vpn-services/&lt;service-id&gt;/sessions instead. Note:    The API will return a new VPN path for \"transport_tunnels\" in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_tier1_l2_vpn_sessions(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_l2_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/l2vpn-services/&amp;lt;service-id&amp;gt;/sessions instead. Note:    The API will return a new VPN path for \&quot;transport_tunnels\&quot; in the response payload instead of the deprecated API path    Both paths refer to the same object.    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_tier1_l2_vpn_sessions_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier1_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.list_tier1_l2_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.list_tier1_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier1_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier1_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def list_tier1_vpn_ip_sec_vpn_sessions(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier1_vpn_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier1_vpn_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_vpn_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_vpn_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier1_vpn_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_tier1_vpn_l2_vpn_sessions(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_l2_vpn_sessions_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_tier1_vpn_l2_vpn_sessions_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.list_tier1_vpn_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.list_tier1_vpn_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_vpn_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.list_tier1_vpn_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#list_tier1_vpn_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      nil
    end

    # Create or patch an IPSec VPN session
    # Create or patch an IPSec VPN session for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1
    # Create or patch an L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session under Tier-1 from Peer Codes
    # Create or patch an L2VPN session under Tier-1 from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_l2_vpn_session_from_peer_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts)
      data
    end

    # Create or fully replace IPSec VPN session
    # Create or fully replace IPSec VPN session for a ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session under Tier-1
    # Create or fully replace L2VPN session under Tier-1. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling SessionsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session for a given ipsec-vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session under Tier-1
    # Delete L2VPN session under Tier-1. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary(org_id, project_id, tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier0_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary(org_id, project_id, tier_0_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-0 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier0_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary(org_id, project_id, tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/summary instead. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN configuration for the peer site
    # Download IPSec VPN configuration for the peer site. Peer config also contains PSK; be careful when sharing or storing it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session without sensitive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnSession]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get IPSec VPN Session
    # Get IPSec VPN session with senstive data for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnSession, Fixnum, Hash)>] IPSecVpnSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions/{session-id}?action=show_sensitive_data'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_session_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyIpsecVpnIkeServiceSummary]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN Session Summary
    # Summarized view of all tier-1 IPSec VPN sessions for a specified service. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyIpsecVpnIkeServiceSummary, Fixnum, Hash)>] PolicyIpsecVpnIkeServiceSummary data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIpsecVpnIkeServiceSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ipsec_vpn_session_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session under Tier-1
    # Get L2VPN session under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts)
      data
    end

    # Get Tier-1 L2VPN session configuration for the peer site
    # Get peer config for the Tier-1 L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config_with_http_info(org_id, project_id, tier_1_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnSessionListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN sessions list result
    # Get paginated list of all IPSec VPN sessions for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnSessionListResult, Fixnum, Hash)>] IPSecVpnSessionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/sessions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result under Tier-1
    # Get paginated list of all L2VPN sessions under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SessionsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L3Vpn
    # Read the L3Vpn with the given id. No sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnSession. - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &lt;l3vpn-id&gt; id unless the associated IPSecVpnSession with L3VPN_&lt;l3vpn-id&gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/sessions/L3VPN_&lt;l3vpn-id&gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L3Vpn]
    def read_l3_vpn(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Read an L3Vpn
    # Read the L3Vpn with the given id. No sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnSession. - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &amp;lt;l3vpn-id&amp;gt; id unless the associated IPSecVpnSession with L3VPN_&amp;lt;l3vpn-id&amp;gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3Vpn, Fixnum, Hash)>] L3Vpn data, response status code and response headers
    def read_l3_vpn_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.read_l3_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.read_l3_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.read_l3_vpn"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling SessionsApi.read_l3_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#read_l3_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download L3Vpn Config for Remote Site
    # Get the L3Vpn Configuration for the peer site. Peer config contains PSK; be careful when sharing or storing it. - no enforcement point path specified: L3Vpn Peer Config will be evaluated on each enforcement point. - {enforcement_point_path}: L3Vpn Peer Config is evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default/sessions/L3VPN_&lt;l3vpn-id&gt;/peer-config instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [String]
    def read_l3_vpn_peer_config(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Download L3Vpn Config for Remote Site
    # Get the L3Vpn Configuration for the peer site. Peer config contains PSK; be careful when sharing or storing it. - no enforcement point path specified: L3Vpn Peer Config will be evaluated on each enforcement point. - {enforcement_point_path}: L3Vpn Peer Config is evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/ &amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;/peer-config instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def read_l3_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.read_l3_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.read_l3_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.read_l3_vpn_peer_config"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling SessionsApi.read_l3_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#read_l3_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L3Vpn
    # Read the L3Vpn with the given id. Sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/sessions/L3VPN_&lt;l3vpn-id&gt;?action=show_sensitive_data to get the associated   IPSecVpnSession. - GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/   default/local-endpoints/&lt;local-endpoint-id&gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&lt;l3vpn-id&gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &lt;l3vpn-id&gt; id unless the associated IPSecVpnSession with L3VPN_&lt;l3vpn-id&gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ipsec-vpn-services/ default/sessions/L3VPN_&lt;l3vpn-id&gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L3Vpn]
    def read_l3_vpn_with_sensitive_data(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts)
      data
    end

    # Read an L3Vpn
    # Read the L3Vpn with the given id. Sensitive data is returned as part of the response. This API is deprecated. Please use the following APIs instead: - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;?action&#x3D;show_sensitive_data to get the associated   IPSecVpnSession. - GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/   default/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; to get the associated IPSecVpnLocalEndpoint. - GET /infra/ipsec-vpn-tunnel-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated   IPSecVpnTunnelProfile. - GET /infra/ipsec-vpn-ike-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnIkeProfile. - GET /infra/ipsec-vpn-dpd-profiles/L3VPN_&amp;lt;l3vpn-id&amp;gt; to get the associated IPSecVpnDpdProfile. If used, this deprecated API will not return L3Vpn with &amp;lt;l3vpn-id&amp;gt; id unless the associated IPSecVpnSession with L3VPN_&amp;lt;l3vpn-id&amp;gt; id exists. For example, if the IPSecVpnSession gets deleted using DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/locale-services/&amp;lt;locale-service-id&amp;gt;/ipsec-vpn-services/ default/sessions/L3VPN_&amp;lt;l3vpn-id&amp;gt;, the deprecated API will throw an ObjectNotFoundException. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3Vpn, Fixnum, Hash)>] L3Vpn data, response status code and response headers
    def read_l3_vpn_with_sensitive_data_with_http_info(tier_0_id, locale_service_id, l3vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.read_l3_vpn_with_sensitive_data ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SessionsApi.read_l3_vpn_with_sensitive_data"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SessionsApi.read_l3_vpn_with_sensitive_data"
      end
      # verify the required parameter 'l3vpn_id' is set
      if @api_client.config.client_side_validation && l3vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l3vpn_id' when calling SessionsApi.read_l3_vpn_with_sensitive_data"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpns/{l3vpn-id}?action=show_sensitive_data'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l3vpn-id' + '}', l3vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#read_l3_vpn_with_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
