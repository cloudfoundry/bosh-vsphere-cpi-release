=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiMigrationGroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add migration units to specified migration unit group
    # Add migration units to specified migration unit group. The migration units will be added at the end of the migration unit list. 
    # @param group_id 
    # @param migration_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnitList]
    def add_migration_units_to_group_add_migration_units(group_id, migration_unit_list, opts = {})
      data, _status_code, _headers = add_migration_units_to_group_add_migration_units_with_http_info(group_id, migration_unit_list, opts)
      data
    end

    # Add migration units to specified migration unit group
    # Add migration units to specified migration unit group. The migration units will be added at the end of the migration unit list. 
    # @param group_id 
    # @param migration_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnitList, Fixnum, Hash)>] MigrationUnitList data, response status code and response headers
    def add_migration_units_to_group_add_migration_units_with_http_info(group_id, migration_unit_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.add_migration_units_to_group_add_migration_units ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.add_migration_units_to_group_add_migration_units"
      end
      # verify the required parameter 'migration_unit_list' is set
      if @api_client.config.client_side_validation && migration_unit_list.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_list' when calling ManagementPlaneApiMigrationGroupApi.add_migration_units_to_group_add_migration_units"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}?action=add_migration_units'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_unit_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#add_migration_units_to_group_add_migration_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a group
    # Create a group of migration units. 
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnitGroup]
    def create_migration_unit_group(migration_unit_group, opts = {})
      data, _status_code, _headers = create_migration_unit_group_with_http_info(migration_unit_group, opts)
      data
    end

    # Create a group
    # Create a group of migration units. 
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnitGroup, Fixnum, Hash)>] MigrationUnitGroup data, response status code and response headers
    def create_migration_unit_group_with_http_info(migration_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.create_migration_unit_group ...'
      end
      # verify the required parameter 'migration_unit_group' is set
      if @api_client.config.client_side_validation && migration_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_group' when calling ManagementPlaneApiMigrationGroupApi.create_migration_unit_group"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#create_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the migration unit group
    # Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more migration units, the operation will fail and an error will be returned. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_migration_unit_group(group_id, opts = {})
      delete_migration_unit_group_with_http_info(group_id, opts)
      nil
    end

    # Delete the migration unit group
    # Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more migration units, the operation will fail and an error will be returned. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_migration_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.delete_migration_unit_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.delete_migration_unit_group"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#delete_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return migration unit group information
    # Returns information about a specific migration unit group in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary (default to false)
    # @return [MigrationUnitGroup]
    def get_migration_unit_group(group_id, opts = {})
      data, _status_code, _headers = get_migration_unit_group_with_http_info(group_id, opts)
      data
    end

    # Return migration unit group information
    # Returns information about a specific migration unit group in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary
    # @return [Array<(MigrationUnitGroup, Fixnum, Hash)>] MigrationUnitGroup data, response status code and response headers
    def get_migration_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.get_migration_unit_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_group"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#get_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return aggregate information of all migration unit groups
    # Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups (default to false)
    # @return [MigrationUnitGroupAggregateInfoListResult]
    def get_migration_unit_group_aggregate_info(opts = {})
      data, _status_code, _headers = get_migration_unit_group_aggregate_info_with_http_info(opts)
      data
    end

    # Return aggregate information of all migration unit groups
    # Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups
    # @return [Array<(MigrationUnitGroupAggregateInfoListResult, Fixnum, Hash)>] MigrationUnitGroupAggregateInfoListResult data, response status code and response headers
    def get_migration_unit_group_aggregate_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_aggregate_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_aggregate_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_aggregate_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/migration/migration-unit-groups/aggregate-info'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroupAggregateInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#get_migration_unit_group_aggregate_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get migration status for group
    # Get migration status for migration units in the specified group. User can specify whether to show only the migration units with errors. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only migration units with errors (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationUnitStatusListResult]
    def get_migration_unit_group_status(group_id, opts = {})
      data, _status_code, _headers = get_migration_unit_group_status_with_http_info(group_id, opts)
      data
    end

    # Get migration status for group
    # Get migration status for migration units in the specified group. User can specify whether to show only the migration units with errors. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only migration units with errors
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationUnitStatusListResult, Fixnum, Hash)>] MigrationUnitStatusListResult data, response status code and response headers
    def get_migration_unit_group_status_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_status ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_group_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}/status'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'has_errors'] = opts[:'has_errors'] if !opts[:'has_errors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#get_migration_unit_group_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return information of all migration unit groups
    # Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups (default to false)
    # @return [MigrationUnitGroupListResult]
    def get_migration_unit_groups(opts = {})
      data, _status_code, _headers = get_migration_unit_groups_with_http_info(opts)
      data
    end

    # Return information of all migration unit groups
    # Return information of all migration unit groups in the migration plan.  If request parameter summary is set to true, then only count of migration units will be returned, migration units list will be empty. If request parameter component type is specified, then all migration unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning migration unit groups
    # @return [Array<(MigrationUnitGroupListResult, Fixnum, Hash)>] MigrationUnitGroupListResult data, response status code and response headers
    def get_migration_unit_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.get_migration_unit_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/migration/migration-unit-groups'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#get_migration_unit_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get migration status for migration unit groups
    # Get migration status for migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationUnitGroupStatusListResult]
    def get_migration_unit_groups_status(opts = {})
      data, _status_code, _headers = get_migration_unit_groups_status_with_http_info(opts)
      data
    end

    # Get migration status for migration unit groups
    # Get migration status for migration unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which migration unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationUnitGroupStatusListResult, Fixnum, Hash)>] MigrationUnitGroupStatusListResult data, response status code and response headers
    def get_migration_unit_groups_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.get_migration_unit_groups_status ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_groups_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationGroupApi.get_migration_unit_groups_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/migration/migration-unit-groups-status'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroupStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#get_migration_unit_groups_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reorder migration unit group
    # Reorder an migration unit group by placing it before/after the specified migration unit group. 
    # @param group_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_migration_unit_group_reorder(group_id, reorder_migration_request, opts = {})
      reorder_migration_unit_group_reorder_with_http_info(group_id, reorder_migration_request, opts)
      nil
    end

    # Reorder migration unit group
    # Reorder an migration unit group by placing it before/after the specified migration unit group. 
    # @param group_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_migration_unit_group_reorder_with_http_info(group_id, reorder_migration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_group_reorder ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_group_reorder"
      end
      # verify the required parameter 'reorder_migration_request' is set
      if @api_client.config.client_side_validation && reorder_migration_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_migration_request' when calling ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_group_reorder"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}?action=reorder'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_migration_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#reorder_migration_unit_group_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reorder an migration unit within the migration unit group
    # Reorder an migration unit within the migration unit group by placing it before/after the specified migration unit 
    # @param group_id 
    # @param migration_unit_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_migration_unit_reorder(group_id, migration_unit_id, reorder_migration_request, opts = {})
      reorder_migration_unit_reorder_with_http_info(group_id, migration_unit_id, reorder_migration_request, opts)
      nil
    end

    # Reorder an migration unit within the migration unit group
    # Reorder an migration unit within the migration unit group by placing it before/after the specified migration unit 
    # @param group_id 
    # @param migration_unit_id 
    # @param reorder_migration_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_migration_unit_reorder_with_http_info(group_id, migration_unit_id, reorder_migration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_reorder ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_reorder"
      end
      # verify the required parameter 'migration_unit_id' is set
      if @api_client.config.client_side_validation && migration_unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_id' when calling ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_reorder"
      end
      # verify the required parameter 'reorder_migration_request' is set
      if @api_client.config.client_side_validation && reorder_migration_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_migration_request' when calling ManagementPlaneApiMigrationGroupApi.reorder_migration_unit_reorder"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}/migration-unit/{migration-unit-id}?action=reorder'.sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'migration-unit-id' + '}', migration_unit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_migration_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#reorder_migration_unit_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the migration unit group
    # Update the specified migration unit group. Removal of migration units from the group using this is not allowed. An error will be returned in that case. 
    # @param group_id 
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [MigrationUnitGroup]
    def update_migration_unit_group(group_id, migration_unit_group, opts = {})
      data, _status_code, _headers = update_migration_unit_group_with_http_info(group_id, migration_unit_group, opts)
      data
    end

    # Update the migration unit group
    # Update the specified migration unit group. Removal of migration units from the group using this is not allowed. An error will be returned in that case. 
    # @param group_id 
    # @param migration_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationUnitGroup, Fixnum, Hash)>] MigrationUnitGroup data, response status code and response headers
    def update_migration_unit_group_with_http_info(group_id, migration_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationGroupApi.update_migration_unit_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiMigrationGroupApi.update_migration_unit_group"
      end
      # verify the required parameter 'migration_unit_group' is set
      if @api_client.config.client_side_validation && migration_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'migration_unit_group' when calling ManagementPlaneApiMigrationGroupApi.update_migration_unit_group"
      end
      # resource path
      local_var_path = '/migration/migration-unit-groups/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationGroupApi#update_migration_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
