=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiAggregationServiceConfigurationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read global health performance monitoring configuration
    # Read global health performance monitoring configuration
    # @param [Hash] opts the optional parameters
    # @return [GlobalCollectionConfiguration]
    def get_aggregation_service_global_config(opts = {})
      data, _status_code, _headers = get_aggregation_service_global_config_with_http_info(opts)
      data
    end

    # Read global health performance monitoring configuration
    # Read global health performance monitoring configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalCollectionConfiguration, Fixnum, Hash)>] GlobalCollectionConfiguration data, response status code and response headers
    def get_aggregation_service_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAggregationServiceConfigurationApi.get_aggregation_service_global_config ...'
      end
      # resource path
      local_var_path = '/hpm/global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalCollectionConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAggregationServiceConfigurationApi#get_aggregation_service_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read health performance monitoring configuration for feature stack
    # Returns the complete set of client type data collection configuration records for the specified feature stack. 
    # @param feature_stack_name 
    # @param [Hash] opts the optional parameters
    # @return [FeatureStackCollectionConfiguration]
    def get_feature_stack_configuration(feature_stack_name, opts = {})
      data, _status_code, _headers = get_feature_stack_configuration_with_http_info(feature_stack_name, opts)
      data
    end

    # Read health performance monitoring configuration for feature stack
    # Returns the complete set of client type data collection configuration records for the specified feature stack. 
    # @param feature_stack_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureStackCollectionConfiguration, Fixnum, Hash)>] FeatureStackCollectionConfiguration data, response status code and response headers
    def get_feature_stack_configuration_with_http_info(feature_stack_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAggregationServiceConfigurationApi.get_feature_stack_configuration ...'
      end
      # verify the required parameter 'feature_stack_name' is set
      if @api_client.config.client_side_validation && feature_stack_name.nil?
        fail ArgumentError, "Missing the required parameter 'feature_stack_name' when calling ManagementPlaneApiAggregationServiceConfigurationApi.get_feature_stack_configuration"
      end
      # resource path
      local_var_path = '/hpm/features/{feature-stack-name}'.sub('{' + 'feature-stack-name' + '}', feature_stack_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeatureStackCollectionConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAggregationServiceConfigurationApi#get_feature_stack_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all health performance monitoring feature stacks
    # List all health performance monitoring feature stacks
    # @param [Hash] opts the optional parameters
    # @return [FeatureStackCollectionConfigurationList]
    def list_feature_stack_configurations(opts = {})
      data, _status_code, _headers = list_feature_stack_configurations_with_http_info(opts)
      data
    end

    # List all health performance monitoring feature stacks
    # List all health performance monitoring feature stacks
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureStackCollectionConfigurationList, Fixnum, Hash)>] FeatureStackCollectionConfigurationList data, response status code and response headers
    def list_feature_stack_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAggregationServiceConfigurationApi.list_feature_stack_configurations ...'
      end
      # resource path
      local_var_path = '/hpm/features'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeatureStackCollectionConfigurationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAggregationServiceConfigurationApi#list_feature_stack_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset the data collection frequency configuration setting to the default values
    # Reset the data collection frequency configuration setting to the default values
    # @param feature_stack_name 
    # @param [Hash] opts the optional parameters
    # @return [FeatureStackCollectionConfiguration]
    def reset_aggregation_service_feature_stack_configuration_reset_collection_frequency(feature_stack_name, opts = {})
      data, _status_code, _headers = reset_aggregation_service_feature_stack_configuration_reset_collection_frequency_with_http_info(feature_stack_name, opts)
      data
    end

    # Reset the data collection frequency configuration setting to the default values
    # Reset the data collection frequency configuration setting to the default values
    # @param feature_stack_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureStackCollectionConfiguration, Fixnum, Hash)>] FeatureStackCollectionConfiguration data, response status code and response headers
    def reset_aggregation_service_feature_stack_configuration_reset_collection_frequency_with_http_info(feature_stack_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAggregationServiceConfigurationApi.reset_aggregation_service_feature_stack_configuration_reset_collection_frequency ...'
      end
      # verify the required parameter 'feature_stack_name' is set
      if @api_client.config.client_side_validation && feature_stack_name.nil?
        fail ArgumentError, "Missing the required parameter 'feature_stack_name' when calling ManagementPlaneApiAggregationServiceConfigurationApi.reset_aggregation_service_feature_stack_configuration_reset_collection_frequency"
      end
      # resource path
      local_var_path = '/hpm/features/{feature-stack-name}?action=reset_collection_frequency'.sub('{' + 'feature-stack-name' + '}', feature_stack_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeatureStackCollectionConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAggregationServiceConfigurationApi#reset_aggregation_service_feature_stack_configuration_reset_collection_frequency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the global configuration for aggregation service related data collection
    # Set the global configuration for aggregation service related data collection
    # @param global_collection_configuration 
    # @param [Hash] opts the optional parameters
    # @return [GlobalCollectionConfiguration]
    def update_aggregation_service_global_config(global_collection_configuration, opts = {})
      data, _status_code, _headers = update_aggregation_service_global_config_with_http_info(global_collection_configuration, opts)
      data
    end

    # Set the global configuration for aggregation service related data collection
    # Set the global configuration for aggregation service related data collection
    # @param global_collection_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalCollectionConfiguration, Fixnum, Hash)>] GlobalCollectionConfiguration data, response status code and response headers
    def update_aggregation_service_global_config_with_http_info(global_collection_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAggregationServiceConfigurationApi.update_aggregation_service_global_config ...'
      end
      # verify the required parameter 'global_collection_configuration' is set
      if @api_client.config.client_side_validation && global_collection_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'global_collection_configuration' when calling ManagementPlaneApiAggregationServiceConfigurationApi.update_aggregation_service_global_config"
      end
      # resource path
      local_var_path = '/hpm/global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_collection_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalCollectionConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAggregationServiceConfigurationApi#update_aggregation_service_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update health performance monitoring configuration for feature stack
    # Apply the data collection configuration for the specified feature stack. 
    # @param feature_stack_name 
    # @param feature_stack_collection_configuration 
    # @param [Hash] opts the optional parameters
    # @return [FeatureStackCollectionConfiguration]
    def update_feature_stack_configuration(feature_stack_name, feature_stack_collection_configuration, opts = {})
      data, _status_code, _headers = update_feature_stack_configuration_with_http_info(feature_stack_name, feature_stack_collection_configuration, opts)
      data
    end

    # Update health performance monitoring configuration for feature stack
    # Apply the data collection configuration for the specified feature stack. 
    # @param feature_stack_name 
    # @param feature_stack_collection_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureStackCollectionConfiguration, Fixnum, Hash)>] FeatureStackCollectionConfiguration data, response status code and response headers
    def update_feature_stack_configuration_with_http_info(feature_stack_name, feature_stack_collection_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAggregationServiceConfigurationApi.update_feature_stack_configuration ...'
      end
      # verify the required parameter 'feature_stack_name' is set
      if @api_client.config.client_side_validation && feature_stack_name.nil?
        fail ArgumentError, "Missing the required parameter 'feature_stack_name' when calling ManagementPlaneApiAggregationServiceConfigurationApi.update_feature_stack_configuration"
      end
      # verify the required parameter 'feature_stack_collection_configuration' is set
      if @api_client.config.client_side_validation && feature_stack_collection_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'feature_stack_collection_configuration' when calling ManagementPlaneApiAggregationServiceConfigurationApi.update_feature_stack_configuration"
      end
      # resource path
      local_var_path = '/hpm/features/{feature-stack-name}'.sub('{' + 'feature-stack-name' + '}', feature_stack_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(feature_stack_collection_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeatureStackCollectionConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAggregationServiceConfigurationApi#update_feature_stack_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
