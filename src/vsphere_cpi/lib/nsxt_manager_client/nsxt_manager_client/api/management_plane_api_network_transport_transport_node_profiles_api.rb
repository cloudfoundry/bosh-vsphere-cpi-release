=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNetworkTransportTransportNodeProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Transport Node Profile
    # Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts. 
    # @param transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeProfile]
    def create_transport_node_profile(transport_node_profile, opts = {})
      data, _status_code, _headers = create_transport_node_profile_with_http_info(transport_node_profile, opts)
      data
    end

    # Create a Transport Node Profile
    # Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts. 
    # @param transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeProfile, Fixnum, Hash)>] TransportNodeProfile data, response status code and response headers
    def create_transport_node_profile_with_http_info(transport_node_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.create_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile' is set
      if @api_client.config.client_side_validation && transport_node_profile.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile' when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.create_transport_node_profile"
      end
      # resource path
      local_var_path = '/transport-node-profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi#create_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Transport Node Profile
    # Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection. 
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transport_node_profile(transport_node_profile_id, opts = {})
      delete_transport_node_profile_with_http_info(transport_node_profile_id, opts)
      nil
    end

    # Delete a Transport Node Profile
    # Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection. 
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transport_node_profile_with_http_info(transport_node_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.delete_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.delete_transport_node_profile"
      end
      # resource path
      local_var_path = '/transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi#delete_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Node
    # Returns information about a specified transport node profile.
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeProfile]
    def get_transport_node_profile(transport_node_profile_id, opts = {})
      data, _status_code, _headers = get_transport_node_profile_with_http_info(transport_node_profile_id, opts)
      data
    end

    # Get a Transport Node
    # Returns information about a specified transport node profile.
    # @param transport_node_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeProfile, Fixnum, Hash)>] TransportNodeProfile data, response status code and response headers
    def get_transport_node_profile_with_http_info(transport_node_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.get_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.get_transport_node_profile"
      end
      # resource path
      local_var_path = '/transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi#get_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Transport Nodes
    # Returns information about all transport node profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TransportNodeProfileListResult]
    def list_transport_node_profiles(opts = {})
      data, _status_code, _headers = list_transport_node_profiles_with_http_info(opts)
      data
    end

    # List Transport Nodes
    # Returns information about all transport node profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TransportNodeProfileListResult, Fixnum, Hash)>] TransportNodeProfileListResult data, response status code and response headers
    def list_transport_node_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.list_transport_node_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.list_transport_node_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.list_transport_node_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/transport-node-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi#list_transport_node_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Transport Node Profile
    # When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
    # @param transport_node_profile_id 
    # @param transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [TransportNodeProfile]
    def update_transport_node_profile(transport_node_profile_id, transport_node_profile, opts = {})
      data, _status_code, _headers = update_transport_node_profile_with_http_info(transport_node_profile_id, transport_node_profile, opts)
      data
    end

    # Update a Transport Node Profile
    # When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration. 
    # @param transport_node_profile_id 
    # @param transport_node_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [Array<(TransportNodeProfile, Fixnum, Hash)>] TransportNodeProfile data, response status code and response headers
    def update_transport_node_profile_with_http_info(transport_node_profile_id, transport_node_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.update_transport_node_profile ...'
      end
      # verify the required parameter 'transport_node_profile_id' is set
      if @api_client.config.client_side_validation && transport_node_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile_id' when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.update_transport_node_profile"
      end
      # verify the required parameter 'transport_node_profile' is set
      if @api_client.config.client_side_validation && transport_node_profile.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_profile' when calling ManagementPlaneApiNetworkTransportTransportNodeProfilesApi.update_transport_node_profile"
      end
      # resource path
      local_var_path = '/transport-node-profiles/{transport-node-profile-id}'.sub('{' + 'transport-node-profile-id' + '}', transport_node_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'esx_mgmt_if_migration_dest'] = opts[:'esx_mgmt_if_migration_dest'] if !opts[:'esx_mgmt_if_migration_dest'].nil?
      query_params[:'if_id'] = opts[:'if_id'] if !opts[:'if_id'].nil?
      query_params[:'ping_ip'] = opts[:'ping_ip'] if !opts[:'ping_ip'].nil?
      query_params[:'vnic'] = opts[:'vnic'] if !opts[:'vnic'].nil?
      query_params[:'vnic_migration_dest'] = opts[:'vnic_migration_dest'] if !opts[:'vnic_migration_dest'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeProfilesApi#update_transport_node_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
