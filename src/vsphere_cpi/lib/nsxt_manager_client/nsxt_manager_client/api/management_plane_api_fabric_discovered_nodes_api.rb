=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiFabricDiscoveredNodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Created Transport Node for Discovered Node
    # NSX components are installaed on host and transport node is created with given configurations.
    # @param node_ext_id 
    # @param transport_node 
    # @param [Hash] opts the optional parameters
    # @return [TransportNode]
    def create_transport_node_for_discovered_node_create_transport_node(node_ext_id, transport_node, opts = {})
      data, _status_code, _headers = create_transport_node_for_discovered_node_create_transport_node_with_http_info(node_ext_id, transport_node, opts)
      data
    end

    # Created Transport Node for Discovered Node
    # NSX components are installaed on host and transport node is created with given configurations.
    # @param node_ext_id 
    # @param transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNode, Fixnum, Hash)>] TransportNode data, response status code and response headers
    def create_transport_node_for_discovered_node_create_transport_node_with_http_info(node_ext_id, transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricDiscoveredNodesApi.create_transport_node_for_discovered_node_create_transport_node ...'
      end
      # verify the required parameter 'node_ext_id' is set
      if @api_client.config.client_side_validation && node_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_ext_id' when calling ManagementPlaneApiFabricDiscoveredNodesApi.create_transport_node_for_discovered_node_create_transport_node"
      end
      # verify the required parameter 'transport_node' is set
      if @api_client.config.client_side_validation && transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node' when calling ManagementPlaneApiFabricDiscoveredNodesApi.create_transport_node_for_discovered_node_create_transport_node"
      end
      # resource path
      local_var_path = '/fabric/discovered-nodes/{node-ext-id}?action=create_transport_node'.sub('{' + 'node-ext-id' + '}', node_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricDiscoveredNodesApi#create_transport_node_for_discovered_node_create_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # (Deprecated) Prepares discovered Node for NSX
    # Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node. This API is deprecated. Use /fabric/discovered-nodes/<node-ext-id>?action=create_transport_node
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def host_prep_discovered_node_hostprep(node_ext_id, opts = {})
      data, _status_code, _headers = host_prep_discovered_node_hostprep_with_http_info(node_ext_id, opts)
      data
    end

    # (Deprecated) Prepares discovered Node for NSX
    # Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node. This API is deprecated. Use /fabric/discovered-nodes/&lt;node-ext-id&gt;?action&#x3D;create_transport_node
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def host_prep_discovered_node_hostprep_with_http_info(node_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricDiscoveredNodesApi.host_prep_discovered_node_hostprep ...'
      end
      # verify the required parameter 'node_ext_id' is set
      if @api_client.config.client_side_validation && node_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_ext_id' when calling ManagementPlaneApiFabricDiscoveredNodesApi.host_prep_discovered_node_hostprep"
      end
      # resource path
      local_var_path = '/fabric/discovered-nodes/{node-ext-id}?action=hostprep'.sub('{' + 'node-ext-id' + '}', node_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricDiscoveredNodesApi#host_prep_discovered_node_hostprep\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the List of Discovered Nodes
    # Returns information about all discovered nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cm_local_id Local Id of the discovered node in the Compute Manager
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display name of discovered node
    # @option opts [String] :external_id External id of the discovered node, ex. a mo-ref from VC
    # @option opts [String] :has_parent Discovered node has a parent compute collection or is a standalone host
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address IP address of the discovered node
    # @option opts [String] :node_id Id of the fabric node created from the discovered node
    # @option opts [String] :node_type Discovered Node type like HostNode
    # @option opts [String] :origin_id Id of the compute manager from where this node was discovered
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :parent_compute_collection External id of the compute collection to which this node belongs
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DiscoveredNodeListResult]
    def list_discovered_nodes(opts = {})
      data, _status_code, _headers = list_discovered_nodes_with_http_info(opts)
      data
    end

    # Return the List of Discovered Nodes
    # Returns information about all discovered nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cm_local_id Local Id of the discovered node in the Compute Manager
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display name of discovered node
    # @option opts [String] :external_id External id of the discovered node, ex. a mo-ref from VC
    # @option opts [String] :has_parent Discovered node has a parent compute collection or is a standalone host
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address IP address of the discovered node
    # @option opts [String] :node_id Id of the fabric node created from the discovered node
    # @option opts [String] :node_type Discovered Node type like HostNode
    # @option opts [String] :origin_id Id of the compute manager from where this node was discovered
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :parent_compute_collection External id of the compute collection to which this node belongs
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DiscoveredNodeListResult, Fixnum, Hash)>] DiscoveredNodeListResult data, response status code and response headers
    def list_discovered_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricDiscoveredNodesApi.list_discovered_nodes ...'
      end
      if @api_client.config.client_side_validation && opts[:'has_parent'] && !['true', 'false'].include?(opts[:'has_parent'])
        fail ArgumentError, 'invalid value for "has_parent", must be one of true, false'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricDiscoveredNodesApi.list_discovered_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricDiscoveredNodesApi.list_discovered_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fabric/discovered-nodes'

      # query parameters
      query_params = {}
      query_params[:'cm_local_id'] = opts[:'cm_local_id'] if !opts[:'cm_local_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'has_parent'] = opts[:'has_parent'] if !opts[:'has_parent'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ip_address'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?
      query_params[:'origin_id'] = opts[:'origin_id'] if !opts[:'origin_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'parent_compute_collection'] = opts[:'parent_compute_collection'] if !opts[:'parent_compute_collection'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoveredNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricDiscoveredNodesApi#list_discovered_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return Discovered Node Information
    # Returns information about a specific discovered node.
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [DiscoveredNode]
    def read_discovered_node(node_ext_id, opts = {})
      data, _status_code, _headers = read_discovered_node_with_http_info(node_ext_id, opts)
      data
    end

    # Return Discovered Node Information
    # Returns information about a specific discovered node.
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiscoveredNode, Fixnum, Hash)>] DiscoveredNode data, response status code and response headers
    def read_discovered_node_with_http_info(node_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricDiscoveredNodesApi.read_discovered_node ...'
      end
      # verify the required parameter 'node_ext_id' is set
      if @api_client.config.client_side_validation && node_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_ext_id' when calling ManagementPlaneApiFabricDiscoveredNodesApi.read_discovered_node"
      end
      # resource path
      local_var_path = '/fabric/discovered-nodes/{node-ext-id}'.sub('{' + 'node-ext-id' + '}', node_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoveredNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricDiscoveredNodesApi#read_discovered_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Apply cluster level config on Discovered Node
    # When transport node profile (TNP) is applied to a cluster, if any validation fails (e.g. VMs running on host) then transport node (TN) is not created. In that case after the required action is taken (e.g. VMs powered off), you can call this API to try to create TN for that discovered node. Do not call this API if Transport Node already exists for the discovered node. In that case use API on transport node. /transport-nodes/<transport-node-id>?action=restore_cluster_config
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNode]
    def reapply_tn_profile_on_discovered_node_reapply_cluster_config(node_ext_id, opts = {})
      data, _status_code, _headers = reapply_tn_profile_on_discovered_node_reapply_cluster_config_with_http_info(node_ext_id, opts)
      data
    end

    # Apply cluster level config on Discovered Node
    # When transport node profile (TNP) is applied to a cluster, if any validation fails (e.g. VMs running on host) then transport node (TN) is not created. In that case after the required action is taken (e.g. VMs powered off), you can call this API to try to create TN for that discovered node. Do not call this API if Transport Node already exists for the discovered node. In that case use API on transport node. /transport-nodes/&lt;transport-node-id&gt;?action&#x3D;restore_cluster_config
    # @param node_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNode, Fixnum, Hash)>] TransportNode data, response status code and response headers
    def reapply_tn_profile_on_discovered_node_reapply_cluster_config_with_http_info(node_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricDiscoveredNodesApi.reapply_tn_profile_on_discovered_node_reapply_cluster_config ...'
      end
      # verify the required parameter 'node_ext_id' is set
      if @api_client.config.client_side_validation && node_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_ext_id' when calling ManagementPlaneApiFabricDiscoveredNodesApi.reapply_tn_profile_on_discovered_node_reapply_cluster_config"
      end
      # resource path
      local_var_path = '/fabric/discovered-nodes/{node-ext-id}?action=reapply_cluster_config'.sub('{' + 'node-ext-id' + '}', node_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricDiscoveredNodesApi#reapply_tn_profile_on_discovered_node_reapply_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
