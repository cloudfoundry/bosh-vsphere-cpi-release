=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiServicesServiceInsertionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add an InstanceEndpoint for a Service Instance
    # Adds a new instance endpoint. It belongs to one service instance and is attached to one service attachment. It represents a redirection target for a Rule. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [InstanceEndpoint]
    def add_instance_endpoint(service_id, service_instance_id, instance_endpoint, opts = {})
      data, _status_code, _headers = add_instance_endpoint_with_http_info(service_id, service_instance_id, instance_endpoint, opts)
      data
    end

    # Add an InstanceEndpoint for a Service Instance
    # Adds a new instance endpoint. It belongs to one service instance and is attached to one service attachment. It represents a redirection target for a Rule. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceEndpoint, Fixnum, Hash)>] InstanceEndpoint data, response status code and response headers
    def add_instance_endpoint_with_http_info(service_id, service_instance_id, instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_instance_endpoint ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_instance_endpoint"
      end
      # verify the required parameter 'instance_endpoint' is set
      if @api_client.config.client_side_validation && instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'instance_endpoint' when calling ManagementPlaneApiServicesServiceInsertionApi.add_instance_endpoint"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a Service Attachment.
    # Adds a new Service attachment. A service attachment represents a point on NSX entity (Example: Logical Router) to which service instance can be connected through an InstanceEndpoint. 
    # @param service_attachment 
    # @param [Hash] opts the optional parameters
    # @return [ServiceAttachment]
    def add_service_attachment(service_attachment, opts = {})
      data, _status_code, _headers = add_service_attachment_with_http_info(service_attachment, opts)
      data
    end

    # Add a Service Attachment.
    # Adds a new Service attachment. A service attachment represents a point on NSX entity (Example: Logical Router) to which service instance can be connected through an InstanceEndpoint. 
    # @param service_attachment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceAttachment, Fixnum, Hash)>] ServiceAttachment data, response status code and response headers
    def add_service_attachment_with_http_info(service_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_attachment ...'
      end
      # verify the required parameter 'service_attachment' is set
      if @api_client.config.client_side_validation && service_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'service_attachment' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_attachment"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-attachments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_attachment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Service Chain
    # Adds a new service chain. Service Chains is can contain profile belonging to same or different Service(s). It represents a redirection target for a Rule. 
    # @param service_chain 
    # @param [Hash] opts the optional parameters
    # @return [ServiceChain]
    def add_service_chain(service_chain, opts = {})
      data, _status_code, _headers = add_service_chain_with_http_info(service_chain, opts)
      data
    end

    # Add Service Chain
    # Adds a new service chain. Service Chains is can contain profile belonging to same or different Service(s). It represents a redirection target for a Rule. 
    # @param service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceChain, Fixnum, Hash)>] ServiceChain data, response status code and response headers
    def add_service_chain_with_http_info(service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_chain ...'
      end
      # verify the required parameter 'service_chain' is set
      if @api_client.config.client_side_validation && service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_chain"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-chains'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a new member in the exclude list
    # Add a new member in the exclude list
    # @param resource_reference 
    # @param [Hash] opts the optional parameters
    # @return [ResourceReference]
    def add_service_insertion_exclude_list_member_add_member(resource_reference, opts = {})
      data, _status_code, _headers = add_service_insertion_exclude_list_member_add_member_with_http_info(resource_reference, opts)
      data
    end

    # Add a new member in the exclude list
    # Add a new member in the exclude list
    # @param resource_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceReference, Fixnum, Hash)>] ResourceReference data, response status code and response headers
    def add_service_insertion_exclude_list_member_add_member_with_http_info(resource_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_exclude_list_member_add_member ...'
      end
      # verify the required parameter 'resource_reference' is set
      if @api_client.config.client_side_validation && resource_reference.nil?
        fail ArgumentError, "Missing the required parameter 'resource_reference' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_exclude_list_member_add_member"
      end
      # resource path
      local_var_path = '/serviceinsertion/excludelist?action=add_member'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(resource_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_insertion_exclude_list_member_add_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a Single Rule in a Section
    # Adds a new serviceinsertion rule in existing serviceinsertion section. 
    # @param section_id 
    # @param service_insertion_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionRule]
    def add_service_insertion_rule_in_section(section_id, service_insertion_rule, opts = {})
      data, _status_code, _headers = add_service_insertion_rule_in_section_with_http_info(section_id, service_insertion_rule, opts)
      data
    end

    # Add a Single Rule in a Section
    # Adds a new serviceinsertion rule in existing serviceinsertion section. 
    # @param section_id 
    # @param service_insertion_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionRule, Fixnum, Hash)>] ServiceInsertionRule data, response status code and response headers
    def add_service_insertion_rule_in_section_with_http_info(section_id, service_insertion_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rule_in_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rule_in_section"
      end
      # verify the required parameter 'service_insertion_rule' is set
      if @api_client.config.client_side_validation && service_insertion_rule.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_rule' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rule_in_section"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rule_in_section, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_insertion_rule_in_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Multiple Rules in a Section
    # Create multiple serviceinsertion rules in existing serviceinsertion section bounded by limit of 1000 serviceinsertion rules per section. 
    # @param section_id 
    # @param service_insertion_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionRuleList]
    def add_service_insertion_rules_in_section_create_multiple(section_id, service_insertion_rule_list, opts = {})
      data, _status_code, _headers = add_service_insertion_rules_in_section_create_multiple_with_http_info(section_id, service_insertion_rule_list, opts)
      data
    end

    # Add Multiple Rules in a Section
    # Create multiple serviceinsertion rules in existing serviceinsertion section bounded by limit of 1000 serviceinsertion rules per section. 
    # @param section_id 
    # @param service_insertion_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionRuleList, Fixnum, Hash)>] ServiceInsertionRuleList data, response status code and response headers
    def add_service_insertion_rules_in_section_create_multiple_with_http_info(section_id, service_insertion_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rules_in_section_create_multiple ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rules_in_section_create_multiple"
      end
      # verify the required parameter 'service_insertion_rule_list' is set
      if @api_client.config.client_side_validation && service_insertion_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_rule_list' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rules_in_section_create_multiple"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_rules_in_section_create_multiple, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules?action=create_multiple'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_insertion_rules_in_section_create_multiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a New Empty Section
    # Creates new empty Service Insertion section in the system. 
    # @param service_insertion_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionSection]
    def add_service_insertion_section(service_insertion_section, opts = {})
      data, _status_code, _headers = add_service_insertion_section_with_http_info(service_insertion_section, opts)
      data
    end

    # Create a New Empty Section
    # Creates new empty Service Insertion section in the system. 
    # @param service_insertion_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionSection, Fixnum, Hash)>] ServiceInsertionSection data, response status code and response headers
    def add_service_insertion_section_with_http_info(service_insertion_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_section ...'
      end
      # verify the required parameter 'service_insertion_section' is set
      if @api_client.config.client_side_validation && service_insertion_section.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_section' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_section"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_section, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_insertion_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Section with Rules
    # Creates a new serviceinsertion section with rules. The limit on the number of rules is defined by maxItems in collection types for ServiceInsertionRule (ServiceInsertionRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to create sections, use: POST /api/v1/serviceinsertion/sections  To create rules, use: POST /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules 
    # @param service_insertion_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionSectionRuleList]
    def add_service_insertion_section_with_rules_create_with_rules(service_insertion_section_rule_list, opts = {})
      data, _status_code, _headers = add_service_insertion_section_with_rules_create_with_rules_with_http_info(service_insertion_section_rule_list, opts)
      data
    end

    # Create a Section with Rules
    # Creates a new serviceinsertion section with rules. The limit on the number of rules is defined by maxItems in collection types for ServiceInsertionRule (ServiceInsertionRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to create sections, use: POST /api/v1/serviceinsertion/sections  To create rules, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules 
    # @param service_insertion_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionSectionRuleList, Fixnum, Hash)>] ServiceInsertionSectionRuleList data, response status code and response headers
    def add_service_insertion_section_with_rules_create_with_rules_with_http_info(service_insertion_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_section_with_rules_create_with_rules ...'
      end
      # verify the required parameter 'service_insertion_section_rule_list' is set
      if @api_client.config.client_side_validation && service_insertion_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_section_rule_list' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_section_with_rules_create_with_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_section_with_rules_create_with_rules, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections?action=create_with_rules'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_insertion_section_with_rules_create_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Service-Insertion Service
    # Creates new Service-Insertion Service in the system. 
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def add_service_insertion_service(service_definition, opts = {})
      data, _status_code, _headers = add_service_insertion_service_with_http_info(service_definition, opts)
      data
    end

    # Create a Service-Insertion Service
    # Creates new Service-Insertion Service in the system. 
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def add_service_insertion_service_with_http_info(service_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_service ...'
      end
      # verify the required parameter 'service_definition' is set
      if @api_client.config.client_side_validation && service_definition.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_insertion_service"
      end
      # resource path
      local_var_path = '/serviceinsertion/services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_definition)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_insertion_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a Service Instance for a specified Service.
    # Adds a new Service-Instance under the specified Service. 
    # @param service_id 
    # @param base_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [BaseServiceInstance]
    def add_service_instance(service_id, base_service_instance, opts = {})
      data, _status_code, _headers = add_service_instance_with_http_info(service_id, base_service_instance, opts)
      data
    end

    # Add a Service Instance for a specified Service.
    # Adds a new Service-Instance under the specified Service. 
    # @param service_id 
    # @param base_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseServiceInstance, Fixnum, Hash)>] BaseServiceInstance data, response status code and response headers
    def add_service_instance_with_http_info(service_id, base_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_service_instance ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_instance"
      end
      # verify the required parameter 'base_service_instance' is set
      if @api_client.config.client_side_validation && base_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'base_service_instance' when calling ManagementPlaneApiServicesServiceInsertionApi.add_service_instance"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add ServiceProfile for a given Service.
    # Adds a new service profile. 
    # @param service_id 
    # @param base_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [BaseServiceProfile]
    def add_si_service_profile(service_id, base_service_profile, opts = {})
      data, _status_code, _headers = add_si_service_profile_with_http_info(service_id, base_service_profile, opts)
      data
    end

    # Add ServiceProfile for a given Service.
    # Adds a new service profile. 
    # @param service_id 
    # @param base_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseServiceProfile, Fixnum, Hash)>] BaseServiceProfile data, response status code and response headers
    def add_si_service_profile_with_http_info(service_id, base_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_si_service_profile ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_si_service_profile"
      end
      # verify the required parameter 'base_service_profile' is set
      if @api_client.config.client_side_validation && base_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'base_service_profile' when calling ManagementPlaneApiServicesServiceInsertionApi.add_si_service_profile"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-profiles'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_si_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Vendor Template for a given Service
    # Adds a new vendor template. Vendor templates are service level objects, registered to be used in Service Profiles. 
    # @param service_id 
    # @param vendor_template 
    # @param [Hash] opts the optional parameters
    # @return [VendorTemplate]
    def add_vendor_template(service_id, vendor_template, opts = {})
      data, _status_code, _headers = add_vendor_template_with_http_info(service_id, vendor_template, opts)
      data
    end

    # Add Vendor Template for a given Service
    # Adds a new vendor template. Vendor templates are service level objects, registered to be used in Service Profiles. 
    # @param service_id 
    # @param vendor_template 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VendorTemplate, Fixnum, Hash)>] VendorTemplate data, response status code and response headers
    def add_vendor_template_with_http_info(service_id, vendor_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.add_vendor_template ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.add_vendor_template"
      end
      # verify the required parameter 'vendor_template' is set
      if @api_client.config.client_side_validation && vendor_template.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_template' when calling ManagementPlaneApiServicesServiceInsertionApi.add_vendor_template"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/vendor-templates'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vendor_template)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VendorTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#add_vendor_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Solution Config for a given Service
    # Adds a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
    # @param service_id 
    # @param solution_config 
    # @param [Hash] opts the optional parameters
    # @return [SolutionConfig]
    def create_solution_config(service_id, solution_config, opts = {})
      data, _status_code, _headers = create_solution_config_with_http_info(service_id, solution_config, opts)
      data
    end

    # Add Solution Config for a given Service
    # Adds a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
    # @param service_id 
    # @param solution_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SolutionConfig, Fixnum, Hash)>] SolutionConfig data, response status code and response headers
    def create_solution_config_with_http_info(service_id, solution_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.create_solution_config ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.create_solution_config"
      end
      # verify the required parameter 'solution_config' is set
      if @api_client.config.client_side_validation && solution_config.nil?
        fail ArgumentError, "Missing the required parameter 'solution_config' when calling ManagementPlaneApiServicesServiceInsertionApi.create_solution_config"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/solution-configs'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(solution_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SolutionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#create_solution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a particular InstanceEndpoint.
    # Delete instance endpoint information for a given instace endpoint. Please make sure to delete all the Service Insertion Rules, which refer to this Endpoint as 'redirect_tos' target. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_endpoint(service_id, service_instance_id, instance_endpoint_id, opts = {})
      delete_instance_endpoint_with_http_info(service_id, service_instance_id, instance_endpoint_id, opts)
      nil
    end

    # Delete a particular InstanceEndpoint.
    # Delete instance endpoint information for a given instace endpoint. Please make sure to delete all the Service Insertion Rules, which refer to this Endpoint as &#39;redirect_tos&#39; target. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_instance_endpoint_with_http_info(service_id, service_instance_id, instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_instance_endpoint ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_instance_endpoint"
      end
      # verify the required parameter 'instance_endpoint_id' is set
      if @api_client.config.client_side_validation && instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_endpoint_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_instance_endpoint"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints/{instance-endpoint-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'instance-endpoint-id' + '}', instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing service attachment
    # Delete existing service attachment from system. Before deletion, please make sure that, no instance endpoints are connected to this attachment. In turn no appliance should be connected to this attachment. 
    # @param service_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_attachment(service_attachment_id, opts = {})
      delete_service_attachment_with_http_info(service_attachment_id, opts)
      nil
    end

    # Delete an existing service attachment
    # Delete existing service attachment from system. Before deletion, please make sure that, no instance endpoints are connected to this attachment. In turn no appliance should be connected to this attachment. 
    # @param service_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_attachment_with_http_info(service_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_attachment ...'
      end
      # verify the required parameter 'service_attachment_id' is set
      if @api_client.config.client_side_validation && service_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_attachment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_attachment"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-attachments/{service-attachment-id}'.sub('{' + 'service-attachment-id' + '}', service_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Service Chain.
    # Delete a particular service chain. 
    # @param service_chain_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_chain(service_chain_id, opts = {})
      delete_service_chain_with_http_info(service_chain_id, opts)
      nil
    end

    # Delete a Service Chain.
    # Delete a particular service chain. 
    # @param service_chain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_chain"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove service deployment
    # Remove the service deployment. Will remove all the Service VMs that were created as part of this deployment. User can send optional force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_service_deployment(service_id, service_deployment_id, opts = {})
      delete_service_deployment_with_http_info(service_id, service_deployment_id, opts)
      nil
    end

    # Remove service deployment
    # Remove the service deployment. Will remove all the Service VMs that were created as part of this deployment. User can send optional force delete option which will force remove the deployment, but should be used only when the regular delete is not working. Regular delete will ensure proper cleanup of Service VMs and related objects. Directly calling this API without trying regular undeploy will result in unexpected results, and orphan objects. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_deployment_with_http_info(service_id, service_deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_deployment ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_deployment"
      end
      # verify the required parameter 'service_deployment_id' is set
      if @api_client.config.client_side_validation && service_deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_deployment"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-deployment-id' + '}', service_deployment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Existing Rule
    # Delete existing serviceinsertion rule in a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_insertion_rule(section_id, rule_id, opts = {})
      delete_service_insertion_rule_with_http_info(section_id, rule_id, opts)
      nil
    end

    # Delete an Existing Rule
    # Delete existing serviceinsertion rule in a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_insertion_rule_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_rule"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_insertion_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Existing Section and Its Associated Rules
    # Removes serviceinsertion section from the system. ServiceInsertion section with rules can only be deleted by passing \"cascade=true\" parameter. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete of this object to all it&#39;s child objects. (default to false)
    # @return [nil]
    def delete_service_insertion_section(section_id, opts = {})
      delete_service_insertion_section_with_http_info(section_id, opts)
      nil
    end

    # Delete an Existing Section and Its Associated Rules
    # Removes serviceinsertion section from the system. ServiceInsertion section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete of this object to all it&#39;s child objects.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_insertion_section_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_section"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_insertion_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing Service and the Service-Instance associated with it.
    # Removes Service-Insertion Service from the system. A Service with Service-Instances can only be deleted by passing \"cascade=true\" parameter. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all the child objects, associated with it. (default to false)
    # @return [nil]
    def delete_service_insertion_service(service_id, opts = {})
      delete_service_insertion_service_with_http_info(service_id, opts)
      nil
    end

    # Delete an existing Service and the Service-Instance associated with it.
    # Removes Service-Insertion Service from the system. A Service with Service-Instances can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all the child objects, associated with it.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_insertion_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_insertion_service"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_insertion_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing Service-Instance
    # Delete existing Service-Instance for a given Service-Insertion Service. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_instance(service_id, service_instance_id, opts = {})
      delete_service_instance_with_http_info(service_id, service_instance_id, opts)
      nil
    end

    # Delete an existing Service-Instance
    # Delete existing Service-Instance for a given Service-Insertion Service. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_instance_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_instance ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_instance"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete service manager
    # Delete service-manager which is registered with NSX with basic details like name, username, password.
    # @param service_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_manager(service_manager_id, opts = {})
      delete_service_manager_with_http_info(service_manager_id, opts)
      nil
    end

    # Delete service manager
    # Delete service-manager which is registered with NSX with basic details like name, username, password.
    # @param service_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_manager_with_http_info(service_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_manager ...'
      end
      # verify the required parameter 'service_manager_id' is set
      if @api_client.config.client_side_validation && service_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_manager_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_manager"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-managers/{service-manager-id}'.sub('{' + 'service-manager-id' + '}', service_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove service VMs either as standalone or HA
    # Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance runtime will also be deleted once service VMs have been un-deployed successfully. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_v_ms_delete(service_id, service_instance_id, opts = {})
      delete_service_v_ms_delete_with_http_info(service_id, service_instance_id, opts)
      nil
    end

    # Remove service VMs either as standalone or HA
    # Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance runtime will also be deleted once service VMs have been un-deployed successfully. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_v_ms_delete_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_service_v_ms_delete ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_v_ms_delete"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_service_v_ms_delete"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=delete'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_service_v_ms_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a particular ServiceProfile.
    # Delete service profile for a given service. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_si_service_profile(service_id, service_profile_id, opts = {})
      delete_si_service_profile_with_http_info(service_id, service_profile_id, opts)
      nil
    end

    # Delete a particular ServiceProfile.
    # Delete service profile for a given service. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_si_service_profile_with_http_info(service_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_si_service_profile ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_si_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_si_service_profile"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_si_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes solution config information.
    # Deletes solution config information for a given service. 
    # @param service_id 
    # @param solution_config_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_solution_config(service_id, solution_config_id, opts = {})
      delete_solution_config_with_http_info(service_id, solution_config_id, opts)
      nil
    end

    # Deletes solution config information.
    # Deletes solution config information for a given service. 
    # @param service_id 
    # @param solution_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_solution_config_with_http_info(service_id, solution_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_solution_config ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_solution_config"
      end
      # verify the required parameter 'solution_config_id' is set
      if @api_client.config.client_side_validation && solution_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'solution_config_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_solution_config"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/solution-configs/{solution-config-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'solution-config-id' + '}', solution_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_solution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a particular vendor tempalte.
    # Delete vendor template information for a given service. Please make sure to delete all the Service Profile(s), which refer to this vendor tempalte before deleting the template itself. 
    # @param service_id 
    # @param vendor_template_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vendor_template(service_id, vendor_template_id, opts = {})
      delete_vendor_template_with_http_info(service_id, vendor_template_id, opts)
      nil
    end

    # Delete a particular vendor tempalte.
    # Delete vendor template information for a given service. Please make sure to delete all the Service Profile(s), which refer to this vendor tempalte before deleting the template itself. 
    # @param service_id 
    # @param vendor_template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vendor_template_with_http_info(service_id, vendor_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.delete_vendor_template ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_vendor_template"
      end
      # verify the required parameter 'vendor_template_id' is set
      if @api_client.config.client_side_validation && vendor_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_template_id' when calling ManagementPlaneApiServicesServiceInsertionApi.delete_vendor_template"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/vendor-templates/{vendor-template-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'vendor-template-id' + '}', vendor_template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#delete_vendor_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploys a particular service
    # This will deploy a particular service on a given cluster / host. Internally multiple service instance can be created during the deployment. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the deployment status APIs. 
    # @param service_id 
    # @param service_deployment 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDeployment]
    def deploy_service(service_id, service_deployment, opts = {})
      data, _status_code, _headers = deploy_service_with_http_info(service_id, service_deployment, opts)
      data
    end

    # Deploys a particular service
    # This will deploy a particular service on a given cluster / host. Internally multiple service instance can be created during the deployment. If there are no issues in the parameters, the call returns immediately, and the service VMs will be deployed asynchronously. To get the overall status of the deployment or to get the status of individual service vm, please use the deployment status APIs. 
    # @param service_id 
    # @param service_deployment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDeployment, Fixnum, Hash)>] ServiceDeployment data, response status code and response headers
    def deploy_service_with_http_info(service_id, service_deployment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.deploy_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.deploy_service"
      end
      # verify the required parameter 'service_deployment' is set
      if @api_client.config.client_side_validation && service_deployment.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment' when calling ManagementPlaneApiServicesServiceInsertionApi.deploy_service"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_deployment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDeployment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#deploy_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploy and set up service VMs either as standalone or HA
    # Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.  During the deployment of service VMs, service will be set up based on deployment events using callbacks. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deploy_service_v_ms_deploy(service_id, service_instance_id, opts = {})
      deploy_service_v_ms_deploy_with_http_info(service_id, service_instance_id, opts)
      nil
    end

    # Deploy and set up service VMs either as standalone or HA
    # Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.  During the deployment of service VMs, service will be set up based on deployment events using callbacks. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deploy_service_v_ms_deploy_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.deploy_service_v_ms_deploy ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.deploy_service_v_ms_deploy"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.deploy_service_v_ms_deploy"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=deploy'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#deploy_service_v_ms_deploy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular instance endpoint for a service instance.
    # Returns detailed Endpoint information for a given InstanceEndpoint. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [InstanceEndpoint]
    def get_instance_endpoint(service_id, service_instance_id, instance_endpoint_id, opts = {})
      data, _status_code, _headers = get_instance_endpoint_with_http_info(service_id, service_instance_id, instance_endpoint_id, opts)
      data
    end

    # Get a particular instance endpoint for a service instance.
    # Returns detailed Endpoint information for a given InstanceEndpoint. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceEndpoint, Fixnum, Hash)>] InstanceEndpoint data, response status code and response headers
    def get_instance_endpoint_with_http_info(service_id, service_instance_id, instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_instance_endpoint ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_instance_endpoint"
      end
      # verify the required parameter 'instance_endpoint_id' is set
      if @api_client.config.client_side_validation && instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_endpoint_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_instance_endpoint"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints/{instance-endpoint-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'instance-endpoint-id' + '}', instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get operational status for an interface
    # Returns operational status of a specified interface
    # @param service_id 
    # @param service_instance_id 
    # @param instance_runtime_id 
    # @param interface_index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [RuntimeInterfaceOperationalStatus]
    def get_runtime_interface_operational_status(service_id, service_instance_id, instance_runtime_id, interface_index, opts = {})
      data, _status_code, _headers = get_runtime_interface_operational_status_with_http_info(service_id, service_instance_id, instance_runtime_id, interface_index, opts)
      data
    end

    # Get operational status for an interface
    # Returns operational status of a specified interface
    # @param service_id 
    # @param service_instance_id 
    # @param instance_runtime_id 
    # @param interface_index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(RuntimeInterfaceOperationalStatus, Fixnum, Hash)>] RuntimeInterfaceOperationalStatus data, response status code and response headers
    def get_runtime_interface_operational_status_with_http_info(service_id, service_instance_id, instance_runtime_id, interface_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_operational_status ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_operational_status"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_operational_status"
      end
      # verify the required parameter 'instance_runtime_id' is set
      if @api_client.config.client_side_validation && instance_runtime_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_runtime_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_operational_status"
      end
      # verify the required parameter 'interface_index' is set
      if @api_client.config.client_side_validation && interface_index.nil?
        fail ArgumentError, "Missing the required parameter 'interface_index' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_operational_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}/interfaces/{interface_index}/status'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'instance-runtime-id' + '}', instance_runtime_id.to_s).sub('{' + 'interface_index' + '}', interface_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuntimeInterfaceOperationalStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_runtime_interface_operational_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for a given interface identified by the interface index
    # Returns statistics of a specified interface via associated logical port. If the logical port is attached to a logical router port, query parameter \"source=realtime\" is not supported. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_runtime_id 
    # @param interface_index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [RuntimeInterfaceStatistics]
    def get_runtime_interface_statistics(service_id, service_instance_id, instance_runtime_id, interface_index, opts = {})
      data, _status_code, _headers = get_runtime_interface_statistics_with_http_info(service_id, service_instance_id, instance_runtime_id, interface_index, opts)
      data
    end

    # Get statistics for a given interface identified by the interface index
    # Returns statistics of a specified interface via associated logical port. If the logical port is attached to a logical router port, query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_runtime_id 
    # @param interface_index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(RuntimeInterfaceStatistics, Fixnum, Hash)>] RuntimeInterfaceStatistics data, response status code and response headers
    def get_runtime_interface_statistics_with_http_info(service_id, service_instance_id, instance_runtime_id, interface_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_statistics ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_statistics"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_statistics"
      end
      # verify the required parameter 'instance_runtime_id' is set
      if @api_client.config.client_side_validation && instance_runtime_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_runtime_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_statistics"
      end
      # verify the required parameter 'interface_index' is set
      if @api_client.config.client_side_validation && interface_index.nil?
        fail ArgumentError, "Missing the required parameter 'interface_index' when calling ManagementPlaneApiServicesServiceInsertionApi.get_runtime_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}/interfaces/{interface_index}/statistics'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'instance-runtime-id' + '}', instance_runtime_id.to_s).sub('{' + 'interface_index' + '}', interface_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuntimeInterfaceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_runtime_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular service attachment.
    # Returns detailed Attachment information for a given service attachment. 
    # @param service_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceAttachment]
    def get_service_attachment(service_attachment_id, opts = {})
      data, _status_code, _headers = get_service_attachment_with_http_info(service_attachment_id, opts)
      data
    end

    # Get a particular service attachment.
    # Returns detailed Attachment information for a given service attachment. 
    # @param service_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceAttachment, Fixnum, Hash)>] ServiceAttachment data, response status code and response headers
    def get_service_attachment_with_http_info(service_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_attachment ...'
      end
      # verify the required parameter 'service_attachment_id' is set
      if @api_client.config.client_side_validation && service_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_attachment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_attachment"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-attachments/{service-attachment-id}'.sub('{' + 'service-attachment-id' + '}', service_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular service chain.
    # Returns detailed service chain information. 
    # @param service_chain_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceChain]
    def get_service_chain(service_chain_id, opts = {})
      data, _status_code, _headers = get_service_chain_with_http_info(service_chain_id, opts)
      data
    end

    # Get a particular service chain.
    # Returns detailed service chain information. 
    # @param service_chain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceChain, Fixnum, Hash)>] ServiceChain data, response status code and response headers
    def get_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_chain"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular service deployment.
    # Returns detail of service deployment. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDeployment]
    def get_service_deployment(service_id, service_deployment_id, opts = {})
      data, _status_code, _headers = get_service_deployment_with_http_info(service_id, service_deployment_id, opts)
      data
    end

    # Get a particular service deployment.
    # Returns detail of service deployment. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDeployment, Fixnum, Hash)>] ServiceDeployment data, response status code and response headers
    def get_service_deployment_with_http_info(service_id, service_deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment"
      end
      # verify the required parameter 'service_deployment_id' is set
      if @api_client.config.client_side_validation && service_deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-deployment-id' + '}', service_deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDeployment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Service-Deployment state for Service.
    # Returns configuration state of deployed partner service using service insertion framework. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @return [ConfigurationState]
    def get_service_deployment_state(service_id, service_deployment_id, opts = {})
      data, _status_code, _headers = get_service_deployment_state_with_http_info(service_id, service_deployment_id, opts)
      data
    end

    # Get Service-Deployment state for Service.
    # Returns configuration state of deployed partner service using service insertion framework. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_service_deployment_state_with_http_info(service_id, service_deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment_state ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment_state"
      end
      # verify the required parameter 'service_deployment_id' is set
      if @api_client.config.client_side_validation && service_deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment_state"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}/state'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-deployment-id' + '}', service_deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_deployment_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular service deployment status.
    # Returns current status of the deployment of partner service. Available only for EPP Services. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \"source=realtime\" needs to be passed. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [ServiceDeploymentStatus]
    def get_service_deployment_status(service_id, service_deployment_id, opts = {})
      data, _status_code, _headers = get_service_deployment_status_with_http_info(service_id, service_deployment_id, opts)
      data
    end

    # Get a particular service deployment status.
    # Returns current status of the deployment of partner service. Available only for EPP Services. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(ServiceDeploymentStatus, Fixnum, Hash)>] ServiceDeploymentStatus data, response status code and response headers
    def get_service_deployment_status_with_http_info(service_id, service_deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment_status ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment_status"
      end
      # verify the required parameter 'service_deployment_id' is set
      if @api_client.config.client_side_validation && service_deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployment_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}/status'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-deployment-id' + '}', service_deployment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDeploymentStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_deployment_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all service deployments for the given service id
    # Returns the list of deployments for the given service 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDeploymentListResult]
    def get_service_deployments(service_id, opts = {})
      data, _status_code, _headers = get_service_deployments_with_http_info(service_id, opts)
      data
    end

    # Get all service deployments for the given service id
    # Returns the list of deployments for the given service 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDeploymentListResult, Fixnum, Hash)>] ServiceDeploymentListResult data, response status code and response headers
    def get_service_deployments_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_deployments ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_deployments"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDeploymentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_deployments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of members in exclude list
    # Get list of members in exclude list
    # @param [Hash] opts the optional parameters
    # @return [SIExcludeList]
    def get_service_insertion_exclude_list(opts = {})
      data, _status_code, _headers = get_service_insertion_exclude_list_with_http_info(opts)
      data
    end

    # Get list of members in exclude list
    # Get list of members in exclude list
    # @param [Hash] opts the optional parameters
    # @return [Array<(SIExcludeList, Fixnum, Hash)>] SIExcludeList data, response status code and response headers
    def get_service_insertion_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_exclude_list ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/excludelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Existing Rule
    # Return existing serviceinsertion rule information in a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionRule]
    def get_service_insertion_rule(section_id, rule_id, opts = {})
      data, _status_code, _headers = get_service_insertion_rule_with_http_info(section_id, rule_id, opts)
      data
    end

    # Read an Existing Rule
    # Return existing serviceinsertion rule information in a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionRule, Fixnum, Hash)>] ServiceInsertionRule data, response status code and response headers
    def get_service_insertion_rule_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rule"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All the Rules for a Section
    # Return all serviceinsertion rule(s) information for a given serviceinsertion section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :filter_type Filter type (default to FILTER)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [ServiceInsertionRuleListResult]
    def get_service_insertion_rules(section_id, opts = {})
      data, _status_code, _headers = get_service_insertion_rules_with_http_info(section_id, opts)
      data
    end

    # Get All the Rules for a Section
    # Return all serviceinsertion rule(s) information for a given serviceinsertion section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :filter_type Filter type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [Array<(ServiceInsertionRuleListResult, Fixnum, Hash)>] ServiceInsertionRuleListResult data, response status code and response headers
    def get_service_insertion_rules_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rules"
      end
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !['FILTER', 'SEARCH'].include?(opts[:'filter_type'])
        fail ArgumentError, 'invalid value for "filter_type", must be one of FILTER, SEARCH'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applied_tos'] = opts[:'applied_tos'] if !opts[:'applied_tos'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destinations'] = opts[:'destinations'] if !opts[:'destinations'].nil?
      query_params[:'filter_type'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sources'] = opts[:'sources'] if !opts[:'sources'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Existing Section
    # Returns information about serviceinsertion section for the identifier. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionSection]
    def get_service_insertion_section(section_id, opts = {})
      data, _status_code, _headers = get_service_insertion_section_with_http_info(section_id, opts)
      data
    end

    # Get an Existing Section
    # Returns information about serviceinsertion section for the identifier. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionSection, Fixnum, Hash)>] ServiceInsertionSection data, response status code and response headers
    def get_service_insertion_section_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_section"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Existing Section, Including Rules
    # Returns serviceinsertion section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to read serviceinsertion rules, use: GET /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules with the appropriate page_size. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionSectionRuleList]
    def get_service_insertion_section_with_rules_list_with_rules(section_id, opts = {})
      data, _status_code, _headers = get_service_insertion_section_with_rules_list_with_rules_with_http_info(section_id, opts)
      data
    end

    # Get an Existing Section, Including Rules
    # Returns serviceinsertion section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules are not supported.  Instead, to read serviceinsertion rules, use: GET /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionSectionRuleList, Fixnum, Hash)>] ServiceInsertionSectionRuleList data, response status code and response headers
    def get_service_insertion_section_with_rules_list_with_rules_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_section_with_rules_list_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_section_with_rules_list_with_rules"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}?action=list_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_section_with_rules_list_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an existing Service
    # Returns information about Service-Insertion Service with the given identifier. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def get_service_insertion_service(service_id, opts = {})
      data, _status_code, _headers = get_service_insertion_service_with_http_info(service_id, opts)
      data
    end

    # Get an existing Service
    # Returns information about Service-Insertion Service with the given identifier. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def get_service_insertion_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_service"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ServiceInsertion global status for a context
    # Get ServiceInsertion global status for a context
    # @param context_type 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionStatus]
    def get_service_insertion_status(context_type, opts = {})
      data, _status_code, _headers = get_service_insertion_status_with_http_info(context_type, opts)
      data
    end

    # Get ServiceInsertion global status for a context
    # Get ServiceInsertion global status for a context
    # @param context_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionStatus, Fixnum, Hash)>] ServiceInsertionStatus data, response status code and response headers
    def get_service_insertion_status_with_http_info(context_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_status ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_insertion_status"
      end
      # resource path
      local_var_path = '/serviceinsertion/status/{context-type}'.sub('{' + 'context-type' + '}', context_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_insertion_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Service-Instance for Service.
    # Returns Service-Instance information for a given Service-Insertion Service. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [BaseServiceInstance]
    def get_service_instance(service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_service_instance_with_http_info(service_id, service_instance_id, opts)
      data
    end

    # Get Service-Instance for Service.
    # Returns Service-Instance information for a given Service-Insertion Service. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseServiceInstance, Fixnum, Hash)>] BaseServiceInstance data, response status code and response headers
    def get_service_instance_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_instance ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSgroups for a given ServiceInstance.
    # Returns list of NSGroups used in Service Insertion North-South rules for a given Service Instance. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceNSGroups]
    def get_service_instance_ns_groups(service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_service_instance_ns_groups_with_http_info(service_id, service_instance_id, opts)
      data
    end

    # Get NSgroups for a given ServiceInstance.
    # Returns list of NSGroups used in Service Insertion North-South rules for a given Service Instance. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceNSGroups, Fixnum, Hash)>] ServiceInstanceNSGroups data, response status code and response headers
    def get_service_instance_ns_groups_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_ns_groups ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_ns_groups"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_ns_groups"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/group-associations'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceNSGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_instance_ns_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Service-Instance state for Service.
    # Returns configuration state of one instance of a deployed partner service using service insertion framework. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [ConfigurationState]
    def get_service_instance_state(service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_service_instance_state_with_http_info(service_id, service_instance_id, opts)
      data
    end

    # Get Service-Instance state for Service.
    # Returns configuration state of one instance of a deployed partner service using service insertion framework. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_service_instance_state_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_state ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_state"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_state"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/state'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_instance_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Service-Instance status for Service.
    # Returns status of one instance of a deployed partner service using service insertion framework. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \"source=realtime\" needs to be passed. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [ServiceInstanceStatus]
    def get_service_instance_status(service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_service_instance_status_with_http_info(service_id, service_instance_id, opts)
      data
    end

    # Get Service-Instance status for Service.
    # Returns status of one instance of a deployed partner service using service insertion framework. By default this API would return cached status. Caching happens every 3 minutes. For realtime status, query parameter \&quot;source&#x3D;realtime\&quot; needs to be passed. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(ServiceInstanceStatus, Fixnum, Hash)>] ServiceInstanceStatus data, response status code and response headers
    def get_service_instance_status_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_status ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_status"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_instance_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/status'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_instance_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get service manager
    # Retrieve service-manager details like name, username, password, vendor ID, thumbprint for a given ID.
    # @param service_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceManager]
    def get_service_manager(service_manager_id, opts = {})
      data, _status_code, _headers = get_service_manager_with_http_info(service_manager_id, opts)
      data
    end

    # Get service manager
    # Retrieve service-manager details like name, username, password, vendor ID, thumbprint for a given ID.
    # @param service_manager_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceManager, Fixnum, Hash)>] ServiceManager data, response status code and response headers
    def get_service_manager_with_http_info(service_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_manager ...'
      end
      # verify the required parameter 'service_manager_id' is set
      if @api_client.config.client_side_validation && service_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_manager_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_manager"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-managers/{service-manager-id}'.sub('{' + 'service-manager-id' + '}', service_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSgroups for a given ServiceProfile.
    # Returns list of NSGroups used in Service Insertion rules for a given Service Profile. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceProfileNSGroups]
    def get_service_profile_ns_groups(service_id, service_profile_id, opts = {})
      data, _status_code, _headers = get_service_profile_ns_groups_with_http_info(service_id, service_profile_id, opts)
      data
    end

    # Get NSgroups for a given ServiceProfile.
    # Returns list of NSGroups used in Service Insertion rules for a given Service Profile. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceProfileNSGroups, Fixnum, Hash)>] ServiceProfileNSGroups data, response status code and response headers
    def get_service_profile_ns_groups_with_http_info(service_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_service_profile_ns_groups ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_profile_ns_groups"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_service_profile_ns_groups"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}/nsgroups'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfileNSGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_service_profile_ns_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular ServiceProfile for a Service.
    # Returns detailed service profile information for a given Service. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [BaseServiceProfile]
    def get_si_service_profile(service_id, service_profile_id, opts = {})
      data, _status_code, _headers = get_si_service_profile_with_http_info(service_id, service_profile_id, opts)
      data
    end

    # Get a particular ServiceProfile for a Service.
    # Returns detailed service profile information for a given Service. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseServiceProfile, Fixnum, Hash)>] BaseServiceProfile data, response status code and response headers
    def get_si_service_profile_with_http_info(service_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_si_service_profile ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_si_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_si_service_profile"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_si_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Solution Config Information for a given solution config id.
    # Returns Solution Config information for a given solution config id. 
    # @param service_id 
    # @param solution_config_id 
    # @param [Hash] opts the optional parameters
    # @return [SolutionConfig]
    def get_solution_config(service_id, solution_config_id, opts = {})
      data, _status_code, _headers = get_solution_config_with_http_info(service_id, solution_config_id, opts)
      data
    end

    # Get Solution Config Information for a given solution config id.
    # Returns Solution Config information for a given solution config id. 
    # @param service_id 
    # @param solution_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SolutionConfig, Fixnum, Hash)>] SolutionConfig data, response status code and response headers
    def get_solution_config_with_http_info(service_id, solution_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_solution_config ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_solution_config"
      end
      # verify the required parameter 'solution_config_id' is set
      if @api_client.config.client_side_validation && solution_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'solution_config_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_solution_config"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/solution-configs/{solution-config-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'solution-config-id' + '}', solution_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SolutionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_solution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a particular vendor template for a given service.
    # Returns detailed vendor template information for a given service. 
    # @param service_id 
    # @param vendor_template_id 
    # @param [Hash] opts the optional parameters
    # @return [VendorTemplate]
    def get_vendor_template(service_id, vendor_template_id, opts = {})
      data, _status_code, _headers = get_vendor_template_with_http_info(service_id, vendor_template_id, opts)
      data
    end

    # Get a particular vendor template for a given service.
    # Returns detailed vendor template information for a given service. 
    # @param service_id 
    # @param vendor_template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VendorTemplate, Fixnum, Hash)>] VendorTemplate data, response status code and response headers
    def get_vendor_template_with_http_info(service_id, vendor_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.get_vendor_template ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_vendor_template"
      end
      # verify the required parameter 'vendor_template_id' is set
      if @api_client.config.client_side_validation && vendor_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_template_id' when calling ManagementPlaneApiServicesServiceInsertionApi.get_vendor_template"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/vendor-templates/{vendor-template-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'vendor-template-id' + '}', vendor_template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VendorTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#get_vendor_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all InstanceEndpoints of a Service Instance.
    # List all InstanceEndpoints of a service instance. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [InstanceEndpointListResult]
    def list_instance_endpoints(service_id, service_instance_id, opts = {})
      data, _status_code, _headers = list_instance_endpoints_with_http_info(service_id, service_instance_id, opts)
      data
    end

    # List all InstanceEndpoints of a Service Instance.
    # List all InstanceEndpoints of a service instance. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceEndpointListResult, Fixnum, Hash)>] InstanceEndpointListResult data, response status code and response headers
    def list_instance_endpoints_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_instance_endpoints ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_instance_endpoints"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_instance_endpoints"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstanceEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_instance_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns list of instance runtimes of service VM being deployed
    # Returns list of instance runtimes of service VMs being deployed for a given service instance id 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [InstanceRuntimeListResult]
    def list_instance_runtimes(service_id, service_instance_id, opts = {})
      data, _status_code, _headers = list_instance_runtimes_with_http_info(service_id, service_instance_id, opts)
      data
    end

    # Returns list of instance runtimes of service VM being deployed
    # Returns list of instance runtimes of service VMs being deployed for a given service instance id 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceRuntimeListResult, Fixnum, Hash)>] InstanceRuntimeListResult data, response status code and response headers
    def list_instance_runtimes_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_instance_runtimes ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_instance_runtimes"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_instance_runtimes"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstanceRuntimeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_instance_runtimes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all service attachments.
    # Returns all Service-Attachement(s) present in the system. 
    # @param [Hash] opts the optional parameters
    # @return [ServiceAttachmentListResult]
    def list_service_attachments(opts = {})
      data, _status_code, _headers = list_service_attachments_with_http_info(opts)
      data
    end

    # Get all service attachments.
    # Returns all Service-Attachement(s) present in the system. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceAttachmentListResult, Fixnum, Hash)>] ServiceAttachmentListResult data, response status code and response headers
    def list_service_attachments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_attachments ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/service-attachments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceAttachmentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all ServiceChainMappings.
    # List all service chain mappings in the system for the given service profile. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceChainMappingListResult]
    def list_service_chain_mappings(service_id, service_profile_id, opts = {})
      data, _status_code, _headers = list_service_chain_mappings_with_http_info(service_id, service_profile_id, opts)
      data
    end

    # List all ServiceChainMappings.
    # List all service chain mappings in the system for the given service profile. 
    # @param service_id 
    # @param service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceChainMappingListResult, Fixnum, Hash)>] ServiceChainMappingListResult data, response status code and response headers
    def list_service_chain_mappings_with_http_info(service_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_chain_mappings ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_chain_mappings"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_chain_mappings"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-profiles/{service-profile-id}/service-chain-mappings'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChainMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_chain_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all ServiceChains.
    # List all service chains in the system. 
    # @param [Hash] opts the optional parameters
    # @return [ServiceChainListResult]
    def list_service_chains(opts = {})
      data, _status_code, _headers = list_service_chains_with_http_info(opts)
      data
    end

    # List all ServiceChains.
    # List all service chains in the system. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceChainListResult, Fixnum, Hash)>] ServiceChainListResult data, response status code and response headers
    def list_service_chains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_chains ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/service-chains'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_chains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All Service Insertion Sections
    # List all Service Insertion section in paginated form. A default page size is limited to 1000 sections. By default, the list of section is filtered by L3REDIRECT type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :exclude_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :filter_type Filter type (default to FILTER)
    # @option opts [String] :include_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :type Section Type (default to L3REDIRECT)
    # @return [ServiceInsertionSectionListResult]
    def list_service_insertion_sections(opts = {})
      data, _status_code, _headers = list_service_insertion_sections_with_http_info(opts)
      data
    end

    # List All Service Insertion Sections
    # List all Service Insertion section in paginated form. A default page size is limited to 1000 sections. By default, the list of section is filtered by L3REDIRECT type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :exclude_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :filter_type Filter type
    # @option opts [String] :include_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :type Section Type
    # @return [Array<(ServiceInsertionSectionListResult, Fixnum, Hash)>] ServiceInsertionSectionListResult data, response status code and response headers
    def list_service_insertion_sections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_insertion_sections ...'
      end
      if @api_client.config.client_side_validation && opts[:'exclude_applied_to_type'] && !['NSGroup', 'LogicalSwitch', 'LogicalRouter', 'LogicalPort'].include?(opts[:'exclude_applied_to_type'])
        fail ArgumentError, 'invalid value for "exclude_applied_to_type", must be one of NSGroup, LogicalSwitch, LogicalRouter, LogicalPort'
      end
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !['FILTER', 'SEARCH'].include?(opts[:'filter_type'])
        fail ArgumentError, 'invalid value for "filter_type", must be one of FILTER, SEARCH'
      end
      if @api_client.config.client_side_validation && opts[:'include_applied_to_type'] && !['NSGroup', 'LogicalSwitch', 'LogicalRouter', 'LogicalPort'].include?(opts[:'include_applied_to_type'])
        fail ArgumentError, 'invalid value for "include_applied_to_type", must be one of NSGroup, LogicalSwitch, LogicalRouter, LogicalPort'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_insertion_sections, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_insertion_sections, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['L3REDIRECT'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of L3REDIRECT'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections'

      # query parameters
      query_params = {}
      query_params[:'applied_tos'] = opts[:'applied_tos'] if !opts[:'applied_tos'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destinations'] = opts[:'destinations'] if !opts[:'destinations'].nil?
      query_params[:'exclude_applied_to_type'] = opts[:'exclude_applied_to_type'] if !opts[:'exclude_applied_to_type'].nil?
      query_params[:'filter_type'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'include_applied_to_type'] = opts[:'include_applied_to_type'] if !opts[:'include_applied_to_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sources'] = opts[:'sources'] if !opts[:'sources'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_insertion_sections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all Service-Insertion Services.
    # List all Service-Insertion Service Definitions. 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionServiceListResult]
    def list_service_insertion_services(opts = {})
      data, _status_code, _headers = list_service_insertion_services_with_http_info(opts)
      data
    end

    # List all Service-Insertion Services.
    # List all Service-Insertion Service Definitions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionServiceListResult, Fixnum, Hash)>] ServiceInsertionServiceListResult data, response status code and response headers
    def list_service_insertion_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_insertion_services ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_insertion_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service insertion status for supported contexts
    # List all service insertion status for supported contexts
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionStatusListResult]
    def list_service_insertion_status(opts = {})
      data, _status_code, _headers = list_service_insertion_status_with_http_info(opts)
      data
    end

    # List all service insertion status for supported contexts
    # List all service insertion status for supported contexts
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionStatusListResult, Fixnum, Hash)>] ServiceInsertionStatusListResult data, response status code and response headers
    def list_service_insertion_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_insertion_status ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_insertion_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all Service-Instances present in system
    # Returns all Service-Instance(s) of all Services present in system. When request parameter (deployed_to or service_deployment_id) is provided as a part of request, it will filter out Service-Instances accordingly. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :deployed_to Deployed_to referenced by service instances present in system
    # @option opts [String] :service_deployment_id Service Deployment Id using which the instances were deployed
    # @return [ServiceInstanceListResult]
    def list_service_instances(opts = {})
      data, _status_code, _headers = list_service_instances_with_http_info(opts)
      data
    end

    # Get all Service-Instances present in system
    # Returns all Service-Instance(s) of all Services present in system. When request parameter (deployed_to or service_deployment_id) is provided as a part of request, it will filter out Service-Instances accordingly. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :deployed_to Deployed_to referenced by service instances present in system
    # @option opts [String] :service_deployment_id Service Deployment Id using which the instances were deployed
    # @return [Array<(ServiceInstanceListResult, Fixnum, Hash)>] ServiceInstanceListResult data, response status code and response headers
    def list_service_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_instances ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/service-instances'

      # query parameters
      query_params = {}
      query_params[:'deployed_to'] = opts[:'deployed_to'] if !opts[:'deployed_to'].nil?
      query_params[:'service_deployment_id'] = opts[:'service_deployment_id'] if !opts[:'service_deployment_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all Service-Instances for Service.
    # Returns all Service-Instance(s) for a given Service-Insertion Service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceListResult]
    def list_service_instances_for_service(service_id, opts = {})
      data, _status_code, _headers = list_service_instances_for_service_with_http_info(service_id, opts)
      data
    end

    # Get all Service-Instances for Service.
    # Returns all Service-Instance(s) for a given Service-Insertion Service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceListResult, Fixnum, Hash)>] ServiceInstanceListResult data, response status code and response headers
    def list_service_instances_for_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_instances_for_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_instances_for_service"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_instances_for_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service managers
    # List all service managers. 
    # @param [Hash] opts the optional parameters
    # @return [ServiceManagerListResult]
    def list_service_managers(opts = {})
      data, _status_code, _headers = list_service_managers_with_http_info(opts)
      data
    end

    # List service managers
    # List all service managers. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceManagerListResult, Fixnum, Hash)>] ServiceManagerListResult data, response status code and response headers
    def list_service_managers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_managers ...'
      end
      # resource path
      local_var_path = '/serviceinsertion/service-managers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceManagerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service paths
    # List all service paths for the given service chain for the given service chain id 
    # @param service_chain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServicePathListResult]
    def list_service_paths(service_chain_id, opts = {})
      data, _status_code, _headers = list_service_paths_with_http_info(service_chain_id, opts)
      data
    end

    # List all service paths
    # List all service paths for the given service chain for the given service chain id 
    # @param service_chain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServicePathListResult, Fixnum, Hash)>] ServicePathListResult data, response status code and response headers
    def list_service_paths_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_service_paths ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_paths"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_paths, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesServiceInsertionApi.list_service_paths, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/serviceinsertion/service-chains/{service-chain-id}/service-paths'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePathListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_service_paths\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all Service Profiles of a Service.
    # List all service profiles of a service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [SIServiceProfileListResult]
    def list_si_service_profiles(service_id, opts = {})
      data, _status_code, _headers = list_si_service_profiles_with_http_info(service_id, opts)
      data
    end

    # List all Service Profiles of a Service.
    # List all service profiles of a service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SIServiceProfileListResult, Fixnum, Hash)>] SIServiceProfileListResult data, response status code and response headers
    def list_si_service_profiles_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_si_service_profiles ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_si_service_profiles"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-profiles'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SIServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_si_service_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Solution Config Information associated with a given service.
    # Returns Solution Config information for a given service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [SolutionConfigListResult]
    def list_solution_configs(service_id, opts = {})
      data, _status_code, _headers = list_solution_configs_with_http_info(service_id, opts)
      data
    end

    # Get Solution Config Information associated with a given service.
    # Returns Solution Config information for a given service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SolutionConfigListResult, Fixnum, Hash)>] SolutionConfigListResult data, response status code and response headers
    def list_solution_configs_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_solution_configs ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_solution_configs"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/solution-configs'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SolutionConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_solution_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all VendorTemplates of a Service.
    # List all vendor templates of a service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vendor_template_name Name of vendor template
    # @return [VendorTemplateListResult]
    def list_vendor_templates(service_id, opts = {})
      data, _status_code, _headers = list_vendor_templates_with_http_info(service_id, opts)
      data
    end

    # List all VendorTemplates of a Service.
    # List all vendor templates of a service. 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vendor_template_name Name of vendor template
    # @return [Array<(VendorTemplateListResult, Fixnum, Hash)>] VendorTemplateListResult data, response status code and response headers
    def list_vendor_templates_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.list_vendor_templates ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.list_vendor_templates"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/vendor-templates'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'vendor_template_name'] = opts[:'vendor_template_name'] if !opts[:'vendor_template_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VendorTemplateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#list_vendor_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register service manager
    # Register service-manager with NSX with basic details like name, username, password.
    # @param service_manager 
    # @param [Hash] opts the optional parameters
    # @return [ServiceManager]
    def register_service_manager(service_manager, opts = {})
      data, _status_code, _headers = register_service_manager_with_http_info(service_manager, opts)
      data
    end

    # Register service manager
    # Register service-manager with NSX with basic details like name, username, password.
    # @param service_manager 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceManager, Fixnum, Hash)>] ServiceManager data, response status code and response headers
    def register_service_manager_with_http_info(service_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.register_service_manager ...'
      end
      # verify the required parameter 'service_manager' is set
      if @api_client.config.client_side_validation && service_manager.nil?
        fail ArgumentError, "Missing the required parameter 'service_manager' when calling ManagementPlaneApiServicesServiceInsertionApi.register_service_manager"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-managers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#register_service_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove an existing object from the exclude list
    # Remove an existing object from the exclude list
    # @param object_id Identifier of the object
    # @param [Hash] opts the optional parameters
    # @return [ResourceReference]
    def remove_service_insertion_exclude_list_member_remove_member(object_id, opts = {})
      data, _status_code, _headers = remove_service_insertion_exclude_list_member_remove_member_with_http_info(object_id, opts)
      data
    end

    # Remove an existing object from the exclude list
    # Remove an existing object from the exclude list
    # @param object_id Identifier of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceReference, Fixnum, Hash)>] ResourceReference data, response status code and response headers
    def remove_service_insertion_exclude_list_member_remove_member_with_http_info(object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.remove_service_insertion_exclude_list_member_remove_member ...'
      end
      # verify the required parameter 'object_id' is set
      if @api_client.config.client_side_validation && object_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_id' when calling ManagementPlaneApiServicesServiceInsertionApi.remove_service_insertion_exclude_list_member_remove_member"
      end
      if @api_client.config.client_side_validation && object_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "object_id" when calling ManagementPlaneApiServicesServiceInsertionApi.remove_service_insertion_exclude_list_member_remove_member, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/serviceinsertion/excludelist?action=remove_member'

      # query parameters
      query_params = {}
      query_params[:'object_id'] = object_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#remove_service_insertion_exclude_list_member_remove_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve 'source node id' value to source entities.
    # Service insertion data path inserts unique 'source node id' value into each packet. This API can be used to identify the source of the packet using this value. It can be resolved to multiple source entities. 
    # @param source_node_value value
    # @param [Hash] opts the optional parameters
    # @return [SourceEntityResult]
    def resolve_source_entities(source_node_value, opts = {})
      data, _status_code, _headers = resolve_source_entities_with_http_info(source_node_value, opts)
      data
    end

    # Resolve &#39;source node id&#39; value to source entities.
    # Service insertion data path inserts unique &#39;source node id&#39; value into each packet. This API can be used to identify the source of the packet using this value. It can be resolved to multiple source entities. 
    # @param source_node_value value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SourceEntityResult, Fixnum, Hash)>] SourceEntityResult data, response status code and response headers
    def resolve_source_entities_with_http_info(source_node_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.resolve_source_entities ...'
      end
      # verify the required parameter 'source_node_value' is set
      if @api_client.config.client_side_validation && source_node_value.nil?
        fail ArgumentError, "Missing the required parameter 'source_node_value' when calling ManagementPlaneApiServicesServiceInsertionApi.resolve_source_entities"
      end
      # resource path
      local_var_path = '/serviceinsertion/source-entities'

      # query parameters
      query_params = {}
      query_params[:'source_node_value'] = source_node_value

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SourceEntityResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#resolve_source_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Rule and Reorder the Rule
    # Modifies existing serviceinsertion rule along with relative position among other serviceinsertion rules inside a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param service_insertion_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionRule]
    def revise_service_insertion_rule_revise(section_id, rule_id, service_insertion_rule, opts = {})
      data, _status_code, _headers = revise_service_insertion_rule_revise_with_http_info(section_id, rule_id, service_insertion_rule, opts)
      data
    end

    # Update an Existing Rule and Reorder the Rule
    # Modifies existing serviceinsertion rule along with relative position among other serviceinsertion rules inside a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param service_insertion_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionRule, Fixnum, Hash)>] ServiceInsertionRule data, response status code and response headers
    def revise_service_insertion_rule_revise_with_http_info(section_id, rule_id, service_insertion_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_rule_revise ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_rule_revise"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_rule_revise"
      end
      # verify the required parameter 'service_insertion_rule' is set
      if @api_client.config.client_side_validation && service_insertion_rule.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_rule' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_rule_revise"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_rule_revise, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules/{rule-id}?action=revise'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#revise_service_insertion_rule_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section, Including Its Position
    # Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections in the system. 
    # @param section_id 
    # @param service_insertion_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionSection]
    def revise_service_insertion_section_revise(section_id, service_insertion_section, opts = {})
      data, _status_code, _headers = revise_service_insertion_section_revise_with_http_info(section_id, service_insertion_section, opts)
      data
    end

    # Update an Existing Section, Including Its Position
    # Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections in the system. 
    # @param section_id 
    # @param service_insertion_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionSection, Fixnum, Hash)>] ServiceInsertionSection data, response status code and response headers
    def revise_service_insertion_section_revise_with_http_info(section_id, service_insertion_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_revise ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_revise"
      end
      # verify the required parameter 'service_insertion_section' is set
      if @api_client.config.client_side_validation && service_insertion_section.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_section' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_revise"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_revise, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}?action=revise'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#revise_service_insertion_section_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section with Rules
    # Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/serviceinsertion/sections/&lt;section-id&gt;?action=revise  To modify rules, use: PUT /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt; 
    # @param section_id 
    # @param service_insertion_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [ServiceInsertionSectionRuleList]
    def revise_service_insertion_section_with_rules_revise_with_rules(section_id, service_insertion_section_rule_list, opts = {})
      data, _status_code, _headers = revise_service_insertion_section_with_rules_revise_with_rules_with_http_info(section_id, service_insertion_section_rule_list, opts)
      data
    end

    # Update an Existing Section with Rules
    # Modifies an existing serviceinsertion section along with its relative position among other serviceinsertion sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
    # @param section_id 
    # @param service_insertion_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(ServiceInsertionSectionRuleList, Fixnum, Hash)>] ServiceInsertionSectionRuleList data, response status code and response headers
    def revise_service_insertion_section_with_rules_revise_with_rules_with_http_info(section_id, service_insertion_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_with_rules_revise_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_with_rules_revise_with_rules"
      end
      # verify the required parameter 'service_insertion_section_rule_list' is set
      if @api_client.config.client_side_validation && service_insertion_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_section_rule_list' when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_with_rules_revise_with_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesServiceInsertionApi.revise_service_insertion_section_with_rules_revise_with_rules, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}?action=revise_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#revise_service_insertion_section_with_rules_revise_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing Service Deployment.
    # Modifies an existing Service Deployment. This will not update the already deployed service instances, deployed via this deployment. 
    # @param service_id 
    # @param service_deployment_id 
    # @param service_deployment 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDeployment]
    def update_service_deployment(service_id, service_deployment_id, service_deployment, opts = {})
      data, _status_code, _headers = update_service_deployment_with_http_info(service_id, service_deployment_id, service_deployment, opts)
      data
    end

    # Update an existing Service Deployment.
    # Modifies an existing Service Deployment. This will not update the already deployed service instances, deployed via this deployment. 
    # @param service_id 
    # @param service_deployment_id 
    # @param service_deployment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDeployment, Fixnum, Hash)>] ServiceDeployment data, response status code and response headers
    def update_service_deployment_with_http_info(service_id, service_deployment_id, service_deployment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_deployment ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_deployment"
      end
      # verify the required parameter 'service_deployment_id' is set
      if @api_client.config.client_side_validation && service_deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_deployment"
      end
      # verify the required parameter 'service_deployment' is set
      if @api_client.config.client_side_validation && service_deployment.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_deployment"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-deployment-id' + '}', service_deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_deployment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDeployment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify exclude list
    # Modify exclude list. This includes adding/removing members in the list. 
    # @param si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [SIExcludeList]
    def update_service_insertion_exclude_list(si_exclude_list, opts = {})
      data, _status_code, _headers = update_service_insertion_exclude_list_with_http_info(si_exclude_list, opts)
      data
    end

    # Modify exclude list
    # Modify exclude list. This includes adding/removing members in the list. 
    # @param si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SIExcludeList, Fixnum, Hash)>] SIExcludeList data, response status code and response headers
    def update_service_insertion_exclude_list_with_http_info(si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_exclude_list ...'
      end
      # verify the required parameter 'si_exclude_list' is set
      if @api_client.config.client_side_validation && si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'si_exclude_list' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_exclude_list"
      end
      # resource path
      local_var_path = '/serviceinsertion/excludelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_insertion_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Rule
    # Modifies existing serviceinsertion rule in a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param service_insertion_rule 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionRule]
    def update_service_insertion_rule(section_id, rule_id, service_insertion_rule, opts = {})
      data, _status_code, _headers = update_service_insertion_rule_with_http_info(section_id, rule_id, service_insertion_rule, opts)
      data
    end

    # Update an Existing Rule
    # Modifies existing serviceinsertion rule in a serviceinsertion section. 
    # @param section_id 
    # @param rule_id 
    # @param service_insertion_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionRule, Fixnum, Hash)>] ServiceInsertionRule data, response status code and response headers
    def update_service_insertion_rule_with_http_info(section_id, rule_id, service_insertion_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_rule"
      end
      # verify the required parameter 'service_insertion_rule' is set
      if @api_client.config.client_side_validation && service_insertion_rule.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_rule' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_rule"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_insertion_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section
    # Modifies the specified section, but does not modify the section's associated rules. 
    # @param section_id 
    # @param service_insertion_section 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionSection]
    def update_service_insertion_section(section_id, service_insertion_section, opts = {})
      data, _status_code, _headers = update_service_insertion_section_with_http_info(section_id, service_insertion_section, opts)
      data
    end

    # Update an Existing Section
    # Modifies the specified section, but does not modify the section&#39;s associated rules. 
    # @param section_id 
    # @param service_insertion_section 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionSection, Fixnum, Hash)>] ServiceInsertionSection data, response status code and response headers
    def update_service_insertion_section_with_http_info(section_id, service_insertion_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_section"
      end
      # verify the required parameter 'service_insertion_section' is set
      if @api_client.config.client_side_validation && service_insertion_section.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_section' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_section"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_insertion_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section, Including Its Rules
    # Modifies existing serviceinsertion section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt; 
    # @param section_id 
    # @param service_insertion_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionSectionRuleList]
    def update_service_insertion_section_with_rules_update_with_rules(section_id, service_insertion_section_rule_list, opts = {})
      data, _status_code, _headers = update_service_insertion_section_with_rules_update_with_rules_with_http_info(section_id, service_insertion_section_rule_list, opts)
      data
    end

    # Update an Existing Section, Including Its Rules
    # Modifies existing serviceinsertion section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/serviceinsertion/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
    # @param section_id 
    # @param service_insertion_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionSectionRuleList, Fixnum, Hash)>] ServiceInsertionSectionRuleList data, response status code and response headers
    def update_service_insertion_section_with_rules_update_with_rules_with_http_info(section_id, service_insertion_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_section_with_rules_update_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_section_with_rules_update_with_rules"
      end
      # verify the required parameter 'service_insertion_section_rule_list' is set
      if @api_client.config.client_side_validation && service_insertion_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_section_rule_list' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_section_with_rules_update_with_rules"
      end
      # resource path
      local_var_path = '/serviceinsertion/sections/{section-id}?action=update_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_insertion_section_with_rules_update_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing Service
    # Modifies the specified Service. 
    # @param service_id 
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def update_service_insertion_service(service_id, service_definition, opts = {})
      data, _status_code, _headers = update_service_insertion_service_with_http_info(service_id, service_definition, opts)
      data
    end

    # Update an existing Service
    # Modifies the specified Service. 
    # @param service_id 
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def update_service_insertion_service_with_http_info(service_id, service_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_service"
      end
      # verify the required parameter 'service_definition' is set
      if @api_client.config.client_side_validation && service_definition.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_service"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}'.sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_definition)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_insertion_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update global ServiceInsertion status for a context
    # Update global ServiceInsertion status for a context
    # @param context_type 
    # @param service_insertion_status 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionStatus]
    def update_service_insertion_status(context_type, service_insertion_status, opts = {})
      data, _status_code, _headers = update_service_insertion_status_with_http_info(context_type, service_insertion_status, opts)
      data
    end

    # Update global ServiceInsertion status for a context
    # Update global ServiceInsertion status for a context
    # @param context_type 
    # @param service_insertion_status 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionStatus, Fixnum, Hash)>] ServiceInsertionStatus data, response status code and response headers
    def update_service_insertion_status_with_http_info(context_type, service_insertion_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_status ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_status"
      end
      # verify the required parameter 'service_insertion_status' is set
      if @api_client.config.client_side_validation && service_insertion_status.nil?
        fail ArgumentError, "Missing the required parameter 'service_insertion_status' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_insertion_status"
      end
      # resource path
      local_var_path = '/serviceinsertion/status/{context-type}'.sub('{' + 'context-type' + '}', context_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_insertion_status)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_insertion_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing Service-Instance.
    # Modifies an existing Service-Instance for a given Service-Insertion Service. 
    # @param service_id 
    # @param service_instance_id 
    # @param base_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [BaseServiceInstance]
    def update_service_instance(service_id, service_instance_id, base_service_instance, opts = {})
      data, _status_code, _headers = update_service_instance_with_http_info(service_id, service_instance_id, base_service_instance, opts)
      data
    end

    # Update an existing Service-Instance.
    # Modifies an existing Service-Instance for a given Service-Insertion Service. 
    # @param service_id 
    # @param service_instance_id 
    # @param base_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseServiceInstance, Fixnum, Hash)>] BaseServiceInstance data, response status code and response headers
    def update_service_instance_with_http_info(service_id, service_instance_id, base_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_instance ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_instance"
      end
      # verify the required parameter 'base_service_instance' is set
      if @api_client.config.client_side_validation && base_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'base_service_instance' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_instance"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service manager
    # Update service-manager which is registered with NSX with basic details like name, username, password.
    # @param service_manager_id 
    # @param service_manager 
    # @param [Hash] opts the optional parameters
    # @return [ServiceManager]
    def update_service_manager(service_manager_id, service_manager, opts = {})
      data, _status_code, _headers = update_service_manager_with_http_info(service_manager_id, service_manager, opts)
      data
    end

    # Update service manager
    # Update service-manager which is registered with NSX with basic details like name, username, password.
    # @param service_manager_id 
    # @param service_manager 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceManager, Fixnum, Hash)>] ServiceManager data, response status code and response headers
    def update_service_manager_with_http_info(service_manager_id, service_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_manager ...'
      end
      # verify the required parameter 'service_manager_id' is set
      if @api_client.config.client_side_validation && service_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_manager_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_manager"
      end
      # verify the required parameter 'service_manager' is set
      if @api_client.config.client_side_validation && service_manager.nil?
        fail ArgumentError, "Missing the required parameter 'service_manager' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_manager"
      end
      # resource path
      local_var_path = '/serviceinsertion/service-managers/{service-manager-id}'.sub('{' + 'service-manager-id' + '}', service_manager_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_manager)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update maintenance mode or runtime state of a service VM
    # Set service VM either in or out of maintenance mode for maintenance mode, or in service or out of service for runtime state. Only one value can be set at one time. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_runtime_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @option opts [String] :unhealthy_reason Reason for the unhealthy state
    # @return [nil]
    def update_service_vm_state(service_id, service_instance_id, instance_runtime_id, opts = {})
      update_service_vm_state_with_http_info(service_id, service_instance_id, instance_runtime_id, opts)
      nil
    end

    # Update maintenance mode or runtime state of a service VM
    # Set service VM either in or out of maintenance mode for maintenance mode, or in service or out of service for runtime state. Only one value can be set at one time. 
    # @param service_id 
    # @param service_instance_id 
    # @param instance_runtime_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @option opts [String] :unhealthy_reason Reason for the unhealthy state
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_service_vm_state_with_http_info(service_id, service_instance_id, instance_runtime_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_service_vm_state ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_vm_state"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_vm_state"
      end
      # verify the required parameter 'instance_runtime_id' is set
      if @api_client.config.client_side_validation && instance_runtime_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_runtime_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_vm_state"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['enable_maintenance_mode', 'disable_maintenance_mode', 'is_healthy', 'is_stopped', 'is_not_responding'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of enable_maintenance_mode, disable_maintenance_mode, is_healthy, is_stopped, is_not_responding'
      end
      if @api_client.config.client_side_validation && !opts[:'unhealthy_reason'].nil? && opts[:'unhealthy_reason'].to_s.length > 500
        fail ArgumentError, 'invalid value for "opts[:"unhealthy_reason"]" when calling ManagementPlaneApiServicesServiceInsertionApi.update_service_vm_state, the character length must be smaller than or equal to 500.'
      end

      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'instance-runtime-id' + '}', instance_runtime_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'unhealthy_reason'] = opts[:'unhealthy_reason'] if !opts[:'unhealthy_reason'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_service_vm_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates Solution Config for a given Service
    # Updates a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
    # @param service_id 
    # @param solution_config_id 
    # @param solution_config 
    # @param [Hash] opts the optional parameters
    # @return [SolutionConfig]
    def update_solution_config(service_id, solution_config_id, solution_config, opts = {})
      data, _status_code, _headers = update_solution_config_with_http_info(service_id, solution_config_id, solution_config, opts)
      data
    end

    # Updates Solution Config for a given Service
    # Updates a solution config. Solution Config are service level objects, required for configuring the NXGI partner Service after deployment. 
    # @param service_id 
    # @param solution_config_id 
    # @param solution_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SolutionConfig, Fixnum, Hash)>] SolutionConfig data, response status code and response headers
    def update_solution_config_with_http_info(service_id, solution_config_id, solution_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.update_solution_config ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_solution_config"
      end
      # verify the required parameter 'solution_config_id' is set
      if @api_client.config.client_side_validation && solution_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'solution_config_id' when calling ManagementPlaneApiServicesServiceInsertionApi.update_solution_config"
      end
      # verify the required parameter 'solution_config' is set
      if @api_client.config.client_side_validation && solution_config.nil?
        fail ArgumentError, "Missing the required parameter 'solution_config' when calling ManagementPlaneApiServicesServiceInsertionApi.update_solution_config"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/solution-configs/{solution-config-id}'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'solution-config-id' + '}', solution_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(solution_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SolutionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#update_solution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upgrade all VMs part of this service deployment using newer version of OVF. It is currently being disabled.
    # Upgrade API is currently disabled. Please refer to vendor documentation on how to upgrade individual appliances. Upgrade all VMs part of this service deployment using newer version of OVF. New OVF version isn't expected in this call because it is published by the partner by updating the service definition. This API simply upgrades to the latest version published by the partner. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upgrade_service_deployment_upgrade(service_id, service_deployment_id, opts = {})
      upgrade_service_deployment_upgrade_with_http_info(service_id, service_deployment_id, opts)
      nil
    end

    # Upgrade all VMs part of this service deployment using newer version of OVF. It is currently being disabled.
    # Upgrade API is currently disabled. Please refer to vendor documentation on how to upgrade individual appliances. Upgrade all VMs part of this service deployment using newer version of OVF. New OVF version isn&#39;t expected in this call because it is published by the partner by updating the service definition. This API simply upgrades to the latest version published by the partner. 
    # @param service_id 
    # @param service_deployment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upgrade_service_deployment_upgrade_with_http_info(service_id, service_deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.upgrade_service_deployment_upgrade ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.upgrade_service_deployment_upgrade"
      end
      # verify the required parameter 'service_deployment_id' is set
      if @api_client.config.client_side_validation && service_deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_deployment_id' when calling ManagementPlaneApiServicesServiceInsertionApi.upgrade_service_deployment_upgrade"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-deployments/{service-deployment-id}?action=upgrade'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-deployment-id' + '}', service_deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#upgrade_service_deployment_upgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upgrade service VMs using newer version of OVF
    # Upgrade service VMs using newer version of OVF.  In case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded, it switches to be the Active one and then the other VM will be upgrade. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upgrade_service_v_ms_upgrade(service_id, service_instance_id, opts = {})
      upgrade_service_v_ms_upgrade_with_http_info(service_id, service_instance_id, opts)
      nil
    end

    # Upgrade service VMs using newer version of OVF
    # Upgrade service VMs using newer version of OVF.  In case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded, it switches to be the Active one and then the other VM will be upgrade. 
    # @param service_id 
    # @param service_instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upgrade_service_v_ms_upgrade_with_http_info(service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesServiceInsertionApi.upgrade_service_v_ms_upgrade ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ManagementPlaneApiServicesServiceInsertionApi.upgrade_service_v_ms_upgrade"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling ManagementPlaneApiServicesServiceInsertionApi.upgrade_service_v_ms_upgrade"
      end
      # resource path
      local_var_path = '/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=upgrade'.sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesServiceInsertionApi#upgrade_service_v_ms_upgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
