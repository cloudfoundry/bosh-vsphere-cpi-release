=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the management_plane config
    # Delete the management_plane config
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_management_plane_configuration(opts = {})
      delete_management_plane_configuration_with_http_info(opts)
      nil
    end

    # Delete the management_plane config
    # Delete the management_plane config
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_management_plane_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.delete_management_plane_configuration ...'
      end
      # resource path
      local_var_path = '/node/management-plane'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi#delete_management_plane_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the MPA config file
    # Delete the MPA config file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_mpa_configuration(opts = {})
      delete_mpa_configuration_with_http_info(opts)
      nil
    end

    # Delete the MPA config file
    # Delete the MPA config file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_mpa_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.delete_mpa_configuration ...'
      end
      # resource path
      local_var_path = '/node/mpa-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi#delete_mpa_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Management plane this controller is communicating with
    # Management plane this controller is communicating with
    # @param [Hash] opts the optional parameters
    # @return [ManagementPlaneProperties]
    def read_management_plane_configuration(opts = {})
      data, _status_code, _headers = read_management_plane_configuration_with_http_info(opts)
      data
    end

    # Management plane this controller is communicating with
    # Management plane this controller is communicating with
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPlaneProperties, Fixnum, Hash)>] ManagementPlaneProperties data, response status code and response headers
    def read_management_plane_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.read_management_plane_configuration ...'
      end
      # resource path
      local_var_path = '/node/management-plane'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManagementPlaneProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi#read_management_plane_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # MPA config for the management plane this node is communicating with
    # MPA config for the management plane this node is communicating with
    # @param [Hash] opts the optional parameters
    # @return [MPAConfigProperties]
    def read_mpa_configuration(opts = {})
      data, _status_code, _headers = read_mpa_configuration_with_http_info(opts)
      data
    end

    # MPA config for the management plane this node is communicating with
    # MPA config for the management plane this node is communicating with
    # @param [Hash] opts the optional parameters
    # @return [Array<(MPAConfigProperties, Fixnum, Hash)>] MPAConfigProperties data, response status code and response headers
    def read_mpa_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.read_mpa_configuration ...'
      end
      # resource path
      local_var_path = '/node/mpa-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MPAConfigProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi#read_mpa_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update management plane configuration
    # Update management plane configuration
    # @param management_plane_properties 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPlaneProperties]
    def update_management_plane_configuration(management_plane_properties, opts = {})
      data, _status_code, _headers = update_management_plane_configuration_with_http_info(management_plane_properties, opts)
      data
    end

    # Update management plane configuration
    # Update management plane configuration
    # @param management_plane_properties 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPlaneProperties, Fixnum, Hash)>] ManagementPlaneProperties data, response status code and response headers
    def update_management_plane_configuration_with_http_info(management_plane_properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.update_management_plane_configuration ...'
      end
      # verify the required parameter 'management_plane_properties' is set
      if @api_client.config.client_side_validation && management_plane_properties.nil?
        fail ArgumentError, "Missing the required parameter 'management_plane_properties' when calling ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.update_management_plane_configuration"
      end
      # resource path
      local_var_path = '/node/management-plane'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(management_plane_properties)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManagementPlaneProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi#update_management_plane_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update management plane agent configuration
    # Update management plane agent configuration
    # @param mpa_config_properties 
    # @param [Hash] opts the optional parameters
    # @return [MPAConfigProperties]
    def update_mpa_configuration(mpa_config_properties, opts = {})
      data, _status_code, _headers = update_mpa_configuration_with_http_info(mpa_config_properties, opts)
      data
    end

    # Update management plane agent configuration
    # Update management plane agent configuration
    # @param mpa_config_properties 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MPAConfigProperties, Fixnum, Hash)>] MPAConfigProperties data, response status code and response headers
    def update_mpa_configuration_with_http_info(mpa_config_properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.update_mpa_configuration ...'
      end
      # verify the required parameter 'mpa_config_properties' is set
      if @api_client.config.client_side_validation && mpa_config_properties.nil?
        fail ArgumentError, "Missing the required parameter 'mpa_config_properties' when calling ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi.update_mpa_configuration"
      end
      # resource path
      local_var_path = '/node/mpa-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mpa_config_properties)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MPAConfigProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationSystemPropertiesApi#update_mpa_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
