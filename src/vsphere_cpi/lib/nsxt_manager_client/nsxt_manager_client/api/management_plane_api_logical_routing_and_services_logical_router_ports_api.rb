=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Logical Router Port
    # Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouterPort]
    def create_logical_router_port(logical_router_port, opts = {})
      data, _status_code, _headers = create_logical_router_port_with_http_info(logical_router_port, opts)
      data
    end

    # Create a Logical Router Port
    # Creates a logical router port. The required parameters include resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); and logical_router_id (the router to which each logical router port is assigned). The service_bindings parameter is optional. 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouterPort, Fixnum, Hash)>] LogicalRouterPort data, response status code and response headers
    def create_logical_router_port_with_http_info(logical_router_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.create_logical_router_port ...'
      end
      # verify the required parameter 'logical_router_port' is set
      if @api_client.config.client_side_validation && logical_router_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.create_logical_router_port"
      end
      # resource path
      local_var_path = '/logical-router-ports'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#create_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Logical Router Port
    # Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \"force=true\" as query param to force delete the Tier0 router link port. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade_delete_linked_ports Flag to specify whether to delete related logical switch ports (default to false)
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_logical_router_port(logical_router_port_id, opts = {})
      delete_logical_router_port_with_http_info(logical_router_port_id, opts)
      nil
    end

    # Delete a Logical Router Port
    # Deletes the specified logical router port. You must delete logical router ports before you can delete the associated logical router. To Delete Tier0 router link port you must have to delete attached tier1 router link port, otherwise pass \&quot;force&#x3D;true\&quot; as query param to force delete the Tier0 router link port. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade_delete_linked_ports Flag to specify whether to delete related logical switch ports
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_router_port_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.delete_logical_router_port ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.delete_logical_router_port"
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade_delete_linked_ports'] = opts[:'cascade_delete_linked_ports'] if !opts[:'cascade_delete_linked_ports'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#delete_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id, on a node if a query parameter \"transport_node_id=<transport-node-id>\" is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalRouterPortArpTable]
    def get_logical_router_port_arp_table(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_arp_table_with_http_info(logical_router_port_id, opts)
      data
    end

    # Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalRouterPortArpTable, Fixnum, Hash)>] LogicalRouterPortArpTable data, response status code and response headers
    def get_logical_router_port_arp_table_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_arp_table ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_arp_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_arp_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_arp_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}/arp-table'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortArpTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#get_logical_router_port_arp_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in CSV format for the Logical Router Port of the given id, on a node if a query parameter \"transport_node_id=<transport-node-id>\" is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalRouterPortArpTableInCsvFormat]
    def get_logical_router_port_arp_table_in_csv_format_csv(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_arp_table_in_csv_format_csv_with_http_info(logical_router_port_id, opts)
      data
    end

    # Get the ARP table (IPv4) or Neighbor Discovery table (IPv6) for the Logical Router Port of the given id 
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in CSV format for the Logical Router Port of the given id, on a node if a query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given. The transport_node_id parameter is mandatory if the router port is not uplink type. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalRouterPortArpTableInCsvFormat, Fixnum, Hash)>] LogicalRouterPortArpTableInCsvFormat data, response status code and response headers
    def get_logical_router_port_arp_table_in_csv_format_csv_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_arp_table_in_csv_format_csv ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_arp_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}/arp-table?format=csv'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortArpTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#get_logical_router_port_arp_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a Logical Router Port
    # Return realized state information of a logical router port. Any configuration update that affects the logical router port can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router ports, dhcp relays, etc. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [LogicalRouterPortState]
    def get_logical_router_port_state(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_state_with_http_info(logical_router_port_id, opts)
      data
    end

    # Get the Realized State of a Logical Router Port
    # Return realized state information of a logical router port. Any configuration update that affects the logical router port can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router ports, dhcp relays, etc. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(LogicalRouterPortState, Fixnum, Hash)>] LogicalRouterPortState data, response status code and response headers
    def get_logical_router_port_state_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_state ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}/state'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#get_logical_router_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics of a specified logical router port on all or a specified node
    # Returns the statistics for the Logical Router Port. If query parameter \"transport_node_id=<transport-node-id>\" is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \"source=cached\" will be ignored and it will always return realtime statistics of the logical router port. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [LogicalRouterPortStatistics]
    def get_logical_router_port_statistics(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_statistics_with_http_info(logical_router_port_id, opts)
      data
    end

    # Get the statistics of a specified logical router port on all or a specified node
    # Returns the statistics for the Logical Router Port. If query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is given,  only the statistics from the given node for the logical router port will be returned. Otherwise the statistics from each node for the same logical router port will be returned. The transport_node_id is mandatory if the router port is not uplink type. The query parameter \&quot;source&#x3D;cached\&quot; will be ignored and it will always return realtime statistics of the logical router port. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(LogicalRouterPortStatistics, Fixnum, Hash)>] LogicalRouterPortStatistics data, response status code and response headers
    def get_logical_router_port_statistics_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_statistics ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}/statistics'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#get_logical_router_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the statistics summary of a specified logical router port
    # Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \"source=realtime\" is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterPortStatisticsSummary]
    def get_logical_router_port_statistics_summary(logical_router_port_id, opts = {})
      data, _status_code, _headers = get_logical_router_port_statistics_summary_with_http_info(logical_router_port_id, opts)
      data
    end

    # Get the statistics summary of a specified logical router port
    # Returns the summation of statistics from all nodes for the Specified Logical Router Port. The query parameter \&quot;source&#x3D;realtime\&quot; is not supported. 
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterPortStatisticsSummary, Fixnum, Hash)>] LogicalRouterPortStatisticsSummary data, response status code and response headers
    def get_logical_router_port_statistics_summary_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_statistics_summary ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.get_logical_router_port_statistics_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}/statistics/summary'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortStatisticsSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#get_logical_router_port_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Logical Router Ports
    # Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_router_id Logical Router identifier
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :resource_type Resource types of logical router port
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LogicalRouterPortListResult]
    def list_logical_router_ports(opts = {})
      data, _status_code, _headers = list_logical_router_ports_with_http_info(opts)
      data
    end

    # List Logical Router Ports
    # Returns information about all logical router ports. Information includes the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); logical_router_id (the router to which each logical router port is assigned); and any service_bindings (such as DHCP relay service). The GET request can include a query parameter (logical_router_id or logical_switch_id). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_router_id Logical Router identifier
    # @option opts [String] :logical_switch_id Logical Switch identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :resource_type Resource types of logical router port
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LogicalRouterPortListResult, Fixnum, Hash)>] LogicalRouterPortListResult data, response status code and response headers
    def list_logical_router_ports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.list_logical_router_ports ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.list_logical_router_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.list_logical_router_ports, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'resource_type'] && !['LogicalRouterUpLinkPort', 'LogicalRouterDownLinkPort', 'LogicalRouterLinkPortOnTIER0', 'LogicalRouterLinkPortOnTIER1', 'LogicalRouterLoopbackPort', 'LogicalRouterIPTunnelPort', 'LogicalRouterCentralizedServicePort'].include?(opts[:'resource_type'])
        fail ArgumentError, 'invalid value for "resource_type", must be one of LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPortOnTIER0, LogicalRouterLinkPortOnTIER1, LogicalRouterLoopbackPort, LogicalRouterIPTunnelPort, LogicalRouterCentralizedServicePort'
      end
      # resource path
      local_var_path = '/logical-router-ports'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'logical_switch_id'] = opts[:'logical_switch_id'] if !opts[:'logical_switch_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#list_logical_router_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Logical Router Port
    # Returns information about the specified logical router port.
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouterPort]
    def read_logical_router_port(logical_router_port_id, opts = {})
      data, _status_code, _headers = read_logical_router_port_with_http_info(logical_router_port_id, opts)
      data
    end

    # Read Logical Router Port
    # Returns information about the specified logical router port.
    # @param logical_router_port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouterPort, Fixnum, Hash)>] LogicalRouterPort data, response status code and response headers
    def read_logical_router_port_with_http_info(logical_router_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.read_logical_router_port ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.read_logical_router_port"
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#read_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Logical Router Port
    # Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort), logical_router_id (to reassign the port to a different router), and service_bindings. 
    # @param logical_router_port_id 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouterPort]
    def update_logical_router_port(logical_router_port_id, logical_router_port, opts = {})
      data, _status_code, _headers = update_logical_router_port_with_http_info(logical_router_port_id, logical_router_port, opts)
      data
    end

    # Update a Logical Router Port
    # Modifies the specified logical router port. Required parameters include the resource_type and logical_router_id. Modifiable parameters include the resource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort), logical_router_id (to reassign the port to a different router), and service_bindings. 
    # @param logical_router_port_id 
    # @param logical_router_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouterPort, Fixnum, Hash)>] LogicalRouterPort data, response status code and response headers
    def update_logical_router_port_with_http_info(logical_router_port_id, logical_router_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.update_logical_router_port ...'
      end
      # verify the required parameter 'logical_router_port_id' is set
      if @api_client.config.client_side_validation && logical_router_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.update_logical_router_port"
      end
      # verify the required parameter 'logical_router_port' is set
      if @api_client.config.client_side_validation && logical_router_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_port' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi.update_logical_router_port"
      end
      # resource path
      local_var_path = '/logical-router-ports/{logical-router-port-id}'.sub('{' + 'logical-router-port-id' + '}', logical_router_port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRouterPortsApi#update_logical_router_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
