=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNetworkTransportTransportZonesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Transport Zone
    # Creates a new transport zone. The required parameters are host_switch_name and transport_type (OVERLAY or VLAN). The optional parameters are description and display_name. 
    # @param transport_zone 
    # @param [Hash] opts the optional parameters
    # @return [TransportZone]
    def create_transport_zone(transport_zone, opts = {})
      data, _status_code, _headers = create_transport_zone_with_http_info(transport_zone, opts)
      data
    end

    # Create a Transport Zone
    # Creates a new transport zone. The required parameters are host_switch_name and transport_type (OVERLAY or VLAN). The optional parameters are description and display_name. 
    # @param transport_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportZone, Fixnum, Hash)>] TransportZone data, response status code and response headers
    def create_transport_zone_with_http_info(transport_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportZonesApi.create_transport_zone ...'
      end
      # verify the required parameter 'transport_zone' is set
      if @api_client.config.client_side_validation && transport_zone.nil?
        fail ArgumentError, "Missing the required parameter 'transport_zone' when calling ManagementPlaneApiNetworkTransportTransportZonesApi.create_transport_zone"
      end
      # resource path
      local_var_path = '/transport-zones'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportZonesApi#create_transport_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Transport Zone
    # Deletes an existing transport zone.
    # @param zone_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transport_zone(zone_id, opts = {})
      delete_transport_zone_with_http_info(zone_id, opts)
      nil
    end

    # Delete a Transport Zone
    # Deletes an existing transport zone.
    # @param zone_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transport_zone_with_http_info(zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportZonesApi.delete_transport_zone ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportZonesApi.delete_transport_zone"
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportZonesApi#delete_transport_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Zone
    # Returns information about a single transport zone.
    # @param zone_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportZone]
    def get_transport_zone(zone_id, opts = {})
      data, _status_code, _headers = get_transport_zone_with_http_info(zone_id, opts)
      data
    end

    # Get a Transport Zone
    # Returns information about a single transport zone.
    # @param zone_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportZone, Fixnum, Hash)>] TransportZone data, response status code and response headers
    def get_transport_zone_with_http_info(zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportZonesApi.get_transport_zone ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportZonesApi.get_transport_zone"
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportZonesApi#get_transport_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Zone's Current Runtime Status Information
    # Returns information about a specified transport zone, including the number of logical switches in the transport zone, number of logical spitch ports assigned to the transport zone, and number of transport nodes in the transport zone. 
    # @param zone_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportZoneStatus]
    def get_transport_zone_status(zone_id, opts = {})
      data, _status_code, _headers = get_transport_zone_status_with_http_info(zone_id, opts)
      data
    end

    # Get a Transport Zone&#39;s Current Runtime Status Information
    # Returns information about a specified transport zone, including the number of logical switches in the transport zone, number of logical spitch ports assigned to the transport zone, and number of transport nodes in the transport zone. 
    # @param zone_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportZoneStatus, Fixnum, Hash)>] TransportZoneStatus data, response status code and response headers
    def get_transport_zone_status_with_http_info(zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportZonesApi.get_transport_zone_status ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportZonesApi.get_transport_zone_status"
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}/summary'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportZonesApi#get_transport_zone_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Transport Zones
    # Returns information about configured transport zones. NSX requires at least one transport zone. NSX uses transport zones to provide connectivity based on the topology of the underlying network, trust zones, or organizational separations. For example, you might have hypervisors that use one network for management traffic and a different network for VM traffic. This architecture would require two transport zones. The combination of transport zones plus transport connectors enables NSX to form tunnels between hypervisors. Transport zones define which interfaces on the hypervisors can communicate with which other interfaces on other hypervisors to establish overlay tunnels or provide connectivity to a VLAN. A logical switch can be in one (and only one) transport zone. This means that all of a switch's interfaces must be in the same transport zone. However, each hypervisor virtual switch (OVS or VDS) has multiple interfaces (connectors), and each connector can be attached to a different logical switch. For example, on a single hypervisor with two connectors, connector A can be attached to logical switch 1 in transport zone A, while connector B is attached to logical switch 2 in transport zone B. In this way, a single hypervisor can participate in multiple transport zones. The API for creating a transport zone requires that a single host switch be specified for each transport zone, and multiple transport zones can share the same host switch. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :is_default Filter to choose if default transport zones will be returned
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_type Filter to choose the type of transport zones to return
    # @option opts [String] :uplink_teaming_policy_name The transport zone&#39;s uplink teaming policy name
    # @return [TransportZoneListResult]
    def list_transport_zones(opts = {})
      data, _status_code, _headers = list_transport_zones_with_http_info(opts)
      data
    end

    # List Transport Zones
    # Returns information about configured transport zones. NSX requires at least one transport zone. NSX uses transport zones to provide connectivity based on the topology of the underlying network, trust zones, or organizational separations. For example, you might have hypervisors that use one network for management traffic and a different network for VM traffic. This architecture would require two transport zones. The combination of transport zones plus transport connectors enables NSX to form tunnels between hypervisors. Transport zones define which interfaces on the hypervisors can communicate with which other interfaces on other hypervisors to establish overlay tunnels or provide connectivity to a VLAN. A logical switch can be in one (and only one) transport zone. This means that all of a switch&#39;s interfaces must be in the same transport zone. However, each hypervisor virtual switch (OVS or VDS) has multiple interfaces (connectors), and each connector can be attached to a different logical switch. For example, on a single hypervisor with two connectors, connector A can be attached to logical switch 1 in transport zone A, while connector B is attached to logical switch 2 in transport zone B. In this way, a single hypervisor can participate in multiple transport zones. The API for creating a transport zone requires that a single host switch be specified for each transport zone, and multiple transport zones can share the same host switch. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :is_default Filter to choose if default transport zones will be returned
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_type Filter to choose the type of transport zones to return
    # @option opts [String] :uplink_teaming_policy_name The transport zone&#39;s uplink teaming policy name
    # @return [Array<(TransportZoneListResult, Fixnum, Hash)>] TransportZoneListResult data, response status code and response headers
    def list_transport_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportZonesApi.list_transport_zones ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportZonesApi.list_transport_zones, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportZonesApi.list_transport_zones, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'transport_type'] && !['OVERLAY', 'VLAN'].include?(opts[:'transport_type'])
        fail ArgumentError, 'invalid value for "transport_type", must be one of OVERLAY, VLAN'
      end
      # resource path
      local_var_path = '/transport-zones'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'is_default'] = opts[:'is_default'] if !opts[:'is_default'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'transport_type'] = opts[:'transport_type'] if !opts[:'transport_type'].nil?
      query_params[:'uplink_teaming_policy_name'] = opts[:'uplink_teaming_policy_name'] if !opts[:'uplink_teaming_policy_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportZonesApi#list_transport_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Transport Zone
    # Updates an existing transport zone. Modifiable parameters are transport_type (VLAN or OVERLAY), description, and display_name. The request must include the existing host_switch_name. 
    # @param zone_id 
    # @param transport_zone 
    # @param [Hash] opts the optional parameters
    # @return [TransportZone]
    def update_transport_zone(zone_id, transport_zone, opts = {})
      data, _status_code, _headers = update_transport_zone_with_http_info(zone_id, transport_zone, opts)
      data
    end

    # Update a Transport Zone
    # Updates an existing transport zone. Modifiable parameters are transport_type (VLAN or OVERLAY), description, and display_name. The request must include the existing host_switch_name. 
    # @param zone_id 
    # @param transport_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportZone, Fixnum, Hash)>] TransportZone data, response status code and response headers
    def update_transport_zone_with_http_info(zone_id, transport_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportZonesApi.update_transport_zone ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportZonesApi.update_transport_zone"
      end
      # verify the required parameter 'transport_zone' is set
      if @api_client.config.client_side_validation && transport_zone.nil?
        fail ArgumentError, "Missing the required parameter 'transport_zone' when calling ManagementPlaneApiNetworkTransportTransportZonesApi.update_transport_zone"
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportZonesApi#update_transport_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
