=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiVpnIpsecSessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create new VPN session
    # Create new VPN session.
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNSession]
    def create_ip_sec_vpn_session(ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_session_with_http_info(ip_sec_vpn_session, opts)
      data
    end

    # Create new VPN session
    # Create new VPN session.
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNSession, Fixnum, Hash)>] IPSecVPNSession data, response status code and response headers
    def create_ip_sec_vpn_session_with_http_info(ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.create_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling ManagementPlaneApiVpnIpsecSessionsApi.create_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/vpn/ipsec/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#create_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN session
    # Delete IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_session(ipsec_vpn_session_id, opts = {})
      delete_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts)
      nil
    end

    # Delete IPSec VPN session
    # Delete IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.delete_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling ManagementPlaneApiVpnIpsecSessionsApi.delete_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/vpn/ipsec/sessions/{ipsec-vpn-session-id}'.sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#delete_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch IPSec VPN session
    # Fetch IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNSession]
    def get_ip_sec_vpn_session(ipsec_vpn_session_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts)
      data
    end

    # Fetch IPSec VPN session
    # Fetch IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNSession, Fixnum, Hash)>] IPSecVPNSession data, response status code and response headers
    def get_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.get_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling ManagementPlaneApiVpnIpsecSessionsApi.get_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/vpn/ipsec/sessions/{ipsec-vpn-session-id}'.sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#get_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a IPSec VPN Session
    # Return realized state information of a ipsec vpn session. Any configuration update that affects the ipsec vpn session can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of ipsec vpn session, service, endpoints, profiles, etc. It will return a service disabled error, if the ipsec vpn service associated with the session is disabled. 
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [IPSecVPNSessionState]
    def get_ip_sec_vpn_session_state(ipsec_vpn_session_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_session_state_with_http_info(ipsec_vpn_session_id, opts)
      data
    end

    # Get the Realized State of a IPSec VPN Session
    # Return realized state information of a ipsec vpn session. Any configuration update that affects the ipsec vpn session can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of ipsec vpn session, service, endpoints, profiles, etc. It will return a service disabled error, if the ipsec vpn service associated with the session is disabled. 
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(IPSecVPNSessionState, Fixnum, Hash)>] IPSecVPNSessionState data, response status code and response headers
    def get_ip_sec_vpn_session_state_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.get_ip_sec_vpn_session_state ...'
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling ManagementPlaneApiVpnIpsecSessionsApi.get_ip_sec_vpn_session_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiVpnIpsecSessionsApi.get_ip_sec_vpn_session_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/vpn/ipsec/sessions/{ipsec-vpn-session-id}/state'.sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSessionState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#get_ip_sec_vpn_session_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPN configuration for the peer site
    # API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_peer_config(ipsec_vpn_session_id, opts = {})
      data, _status_code, _headers = get_peer_config_with_http_info(ipsec_vpn_session_id, opts)
      data
    end

    # Get VPN configuration for the peer site
    # API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.
    # @param ipsec_vpn_session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_peer_config_with_http_info(ipsec_vpn_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.get_peer_config ...'
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling ManagementPlaneApiVpnIpsecSessionsApi.get_peer_config"
      end
      # resource path
      local_var_path = '/vpn/ipsec/sessions/{ipsec-vpn-session-id}/peer-config'.sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#get_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN session list result
    # Get paginated list of all IPSec VPN sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :session_type Resource types of IPsec VPN session
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNSessionListResult]
    def list_ip_sec_vpn_sessions(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_sessions_with_http_info(opts)
      data
    end

    # Get IPSec VPN session list result
    # Get paginated list of all IPSec VPN sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :session_type Resource types of IPsec VPN session
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNSessionListResult, Fixnum, Hash)>] IPSecVPNSessionListResult data, response status code and response headers
    def list_ip_sec_vpn_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.list_ip_sec_vpn_sessions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiVpnIpsecSessionsApi.list_ip_sec_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiVpnIpsecSessionsApi.list_ip_sec_vpn_sessions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'session_type'] && !['PolicyBasedIPSecVPNSession', 'RouteBasedIPSecVPNSession'].include?(opts[:'session_type'])
        fail ArgumentError, 'invalid value for "session_type", must be one of PolicyBasedIPSecVPNSession, RouteBasedIPSecVPNSession'
      end
      # resource path
      local_var_path = '/vpn/ipsec/sessions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ipsec_vpn_service_id'] = opts[:'ipsec_vpn_service_id'] if !opts[:'ipsec_vpn_service_id'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'session_type'] = opts[:'session_type'] if !opts[:'session_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#list_ip_sec_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit IPSec VPN session
    # Edit IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNSession]
    def update_ip_sec_vpn_session(ipsec_vpn_session_id, ip_sec_vpn_session, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, ip_sec_vpn_session, opts)
      data
    end

    # Edit IPSec VPN session
    # Edit IPSec VPN session.
    # @param ipsec_vpn_session_id 
    # @param ip_sec_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNSession, Fixnum, Hash)>] IPSecVPNSession data, response status code and response headers
    def update_ip_sec_vpn_session_with_http_info(ipsec_vpn_session_id, ip_sec_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecSessionsApi.update_ip_sec_vpn_session ...'
      end
      # verify the required parameter 'ipsec_vpn_session_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_session_id' when calling ManagementPlaneApiVpnIpsecSessionsApi.update_ip_sec_vpn_session"
      end
      # verify the required parameter 'ip_sec_vpn_session' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_session' when calling ManagementPlaneApiVpnIpsecSessionsApi.update_ip_sec_vpn_session"
      end
      # resource path
      local_var_path = '/vpn/ipsec/sessions/{ipsec-vpn-session-id}'.sub('{' + 'ipsec-vpn-session-id' + '}', ipsec_vpn_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecSessionsApi#update_ip_sec_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
