=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a New Certificate Revocation List
    # Adds a new certificate revocation list (CRL). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. 
    # @param crl_object_data 
    # @param [Hash] opts the optional parameters
    # @return [CrlList]
    def add_crl_import(crl_object_data, opts = {})
      data, _status_code, _headers = add_crl_import_with_http_info(crl_object_data, opts)
      data
    end

    # Add a New Certificate Revocation List
    # Adds a new certificate revocation list (CRL). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. 
    # @param crl_object_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrlList, Fixnum, Hash)>] CrlList data, response status code and response headers
    def add_crl_import_with_http_info(crl_object_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.add_crl_import ...'
      end
      # verify the required parameter 'crl_object_data' is set
      if @api_client.config.client_side_validation && crl_object_data.nil?
        fail ArgumentError, "Missing the required parameter 'crl_object_data' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.add_crl_import"
      end
      # resource path
      local_var_path = '/trust-management/crls?action=import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(crl_object_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#add_crl_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Crl Distribution Point
    # Create an entity that will represent a Crl Distribution Point 
    # @param crl_distribution_point 
    # @param [Hash] opts the optional parameters
    # @return [CrlDistributionPoint]
    def create_crl_distribution_point(crl_distribution_point, opts = {})
      data, _status_code, _headers = create_crl_distribution_point_with_http_info(crl_distribution_point, opts)
      data
    end

    # Create a Crl Distribution Point
    # Create an entity that will represent a Crl Distribution Point 
    # @param crl_distribution_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrlDistributionPoint, Fixnum, Hash)>] CrlDistributionPoint data, response status code and response headers
    def create_crl_distribution_point_with_http_info(crl_distribution_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.create_crl_distribution_point ...'
      end
      # verify the required parameter 'crl_distribution_point' is set
      if @api_client.config.client_side_validation && crl_distribution_point.nil?
        fail ArgumentError, "Missing the required parameter 'crl_distribution_point' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.create_crl_distribution_point"
      end
      # resource path
      local_var_path = '/trust-management/crl-distribution-points'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(crl_distribution_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlDistributionPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#create_crl_distribution_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CRL
    # Deletes an existing CRL.
    # @param crl_id ID of CRL to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_crl(crl_id, opts = {})
      delete_crl_with_http_info(crl_id, opts)
      nil
    end

    # Delete a CRL
    # Deletes an existing CRL.
    # @param crl_id ID of CRL to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_crl_with_http_info(crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.delete_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.delete_crl"
      end
      # resource path
      local_var_path = '/trust-management/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#delete_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CrlDistributionPoint
    # Delete a CrlDistributionPoint. It does not delete the actual CRL. 
    # @param crl_distribution_point_id Unique id of the CrlDistributionPoint to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_crl_distribution_point(crl_distribution_point_id, opts = {})
      delete_crl_distribution_point_with_http_info(crl_distribution_point_id, opts)
      nil
    end

    # Delete a CrlDistributionPoint
    # Delete a CrlDistributionPoint. It does not delete the actual CRL. 
    # @param crl_distribution_point_id Unique id of the CrlDistributionPoint to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_crl_distribution_point_with_http_info(crl_distribution_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.delete_crl_distribution_point ...'
      end
      # verify the required parameter 'crl_distribution_point_id' is set
      if @api_client.config.client_side_validation && crl_distribution_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_distribution_point_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.delete_crl_distribution_point"
      end
      # resource path
      local_var_path = '/trust-management/crl-distribution-points/{crl-distribution-point-id}'.sub('{' + 'crl-distribution-point-id' + '}', crl_distribution_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#delete_crl_distribution_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CRL Data for the Given CRL ID
    # Returns information about the specified CRL. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param crl_id ID of CRL to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [Crl]
    def get_crl(crl_id, opts = {})
      data, _status_code, _headers = get_crl_with_http_info(crl_id, opts)
      data
    end

    # Show CRL Data for the Given CRL ID
    # Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param crl_id ID of CRL to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(Crl, Fixnum, Hash)>] Crl data, response status code and response headers
    def get_crl_with_http_info(crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl"
      end
      # resource path
      local_var_path = '/trust-management/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Crl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#get_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the CrlDistributionPoint with <crl-distribution-point-id>
    # Return the CrlDistributionPoint with <crl-distribution-point-id>
    # @param crl_distribution_point_id 
    # @param [Hash] opts the optional parameters
    # @return [CrlDistributionPoint]
    def get_crl_distribution_point(crl_distribution_point_id, opts = {})
      data, _status_code, _headers = get_crl_distribution_point_with_http_info(crl_distribution_point_id, opts)
      data
    end

    # Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
    # Return the CrlDistributionPoint with &lt;crl-distribution-point-id&gt;
    # @param crl_distribution_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrlDistributionPoint, Fixnum, Hash)>] CrlDistributionPoint data, response status code and response headers
    def get_crl_distribution_point_with_http_info(crl_distribution_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl_distribution_point ...'
      end
      # verify the required parameter 'crl_distribution_point_id' is set
      if @api_client.config.client_side_validation && crl_distribution_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_distribution_point_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl_distribution_point"
      end
      # resource path
      local_var_path = '/trust-management/crl-distribution-points/{crl-distribution-point-id}'.sub('{' + 'crl-distribution-point-id' + '}', crl_distribution_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlDistributionPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#get_crl_distribution_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return stored CRL in PEM format
    # Return stored CRL in PEM format
    # @param crl_pem_request_type 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_crl_distribution_point_pem(crl_pem_request_type, opts = {})
      data, _status_code, _headers = get_crl_distribution_point_pem_with_http_info(crl_pem_request_type, opts)
      data
    end

    # Return stored CRL in PEM format
    # Return stored CRL in PEM format
    # @param crl_pem_request_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_crl_distribution_point_pem_with_http_info(crl_pem_request_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl_distribution_point_pem ...'
      end
      # verify the required parameter 'crl_pem_request_type' is set
      if @api_client.config.client_side_validation && crl_pem_request_type.nil?
        fail ArgumentError, "Missing the required parameter 'crl_pem_request_type' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl_distribution_point_pem"
      end
      # resource path
      local_var_path = '/trust-management/crl-distribution-points/pem-file'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(crl_pem_request_type)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#get_crl_distribution_point_pem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the status of the CrlDistributionPoint
    # Return the status of the CrlDistributionPoint
    # @param crl_distribution_point_id 
    # @param [Hash] opts the optional parameters
    # @return [CrlDistributionPointStatus]
    def get_crl_distribution_point_status(crl_distribution_point_id, opts = {})
      data, _status_code, _headers = get_crl_distribution_point_status_with_http_info(crl_distribution_point_id, opts)
      data
    end

    # Return the status of the CrlDistributionPoint
    # Return the status of the CrlDistributionPoint
    # @param crl_distribution_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrlDistributionPointStatus, Fixnum, Hash)>] CrlDistributionPointStatus data, response status code and response headers
    def get_crl_distribution_point_status_with_http_info(crl_distribution_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl_distribution_point_status ...'
      end
      # verify the required parameter 'crl_distribution_point_id' is set
      if @api_client.config.client_side_validation && crl_distribution_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_distribution_point_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crl_distribution_point_status"
      end
      # resource path
      local_var_path = '/trust-management/crl-distribution-points/{crl-distribution-point-id}/status'.sub('{' + 'crl-distribution-point-id' + '}', crl_distribution_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlDistributionPointStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#get_crl_distribution_point_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [CrlList]
    def get_crls(opts = {})
      data, _status_code, _headers = get_crls_with_http_info(opts)
      data
    end

    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(CrlList, Fixnum, Hash)>] CrlList data, response status code and response headers
    def get_crls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crls ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crls, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_crls, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate'
      end
      # resource path
      local_var_path = '/trust-management/crls'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#get_crls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the Properties of a Trust Manager
    # Returns information about the supported algorithms and key sizes.
    # @param [Hash] opts the optional parameters
    # @return [TrustManagementData]
    def get_trust_objects(opts = {})
      data, _status_code, _headers = get_trust_objects_with_http_info(opts)
      data
    end

    # Return the Properties of a Trust Manager
    # Returns information about the supported algorithms and key sizes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrustManagementData, Fixnum, Hash)>] TrustManagementData data, response status code and response headers
    def get_trust_objects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.get_trust_objects ...'
      end
      # resource path
      local_var_path = '/trust-management'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrustManagementData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#get_trust_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the list of CrlDistributionPoints
    # Return the list of CrlDistributionPoints
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CrlDistributionPointList]
    def list_crl_distribution_points(opts = {})
      data, _status_code, _headers = list_crl_distribution_points_with_http_info(opts)
      data
    end

    # Return the list of CrlDistributionPoints
    # Return the list of CrlDistributionPoints
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CrlDistributionPointList, Fixnum, Hash)>] CrlDistributionPointList data, response status code and response headers
    def list_crl_distribution_points_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.list_crl_distribution_points ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.list_crl_distribution_points, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.list_crl_distribution_points, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/trust-management/crl-distribution-points'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlDistributionPointList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#list_crl_distribution_points\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update CRL for the Given CRL ID
    # Updates an existing CRL.
    # @param crl_id ID of CRL to update
    # @param crl 
    # @param [Hash] opts the optional parameters
    # @return [Crl]
    def update_crl(crl_id, crl, opts = {})
      data, _status_code, _headers = update_crl_with_http_info(crl_id, crl, opts)
      data
    end

    # Update CRL for the Given CRL ID
    # Updates an existing CRL.
    # @param crl_id ID of CRL to update
    # @param crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Crl, Fixnum, Hash)>] Crl data, response status code and response headers
    def update_crl_with_http_info(crl_id, crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.update_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.update_crl"
      end
      # verify the required parameter 'crl' is set
      if @api_client.config.client_side_validation && crl.nil?
        fail ArgumentError, "Missing the required parameter 'crl' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.update_crl"
      end
      # resource path
      local_var_path = '/trust-management/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Crl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#update_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update CrlDistributionPoint with <crl-distribution-point-id> This allows updating the ManagedResource fields. 
    # Update CrlDistributionPoint with <crl-distribution-point-id> This allows updating the ManagedResource fields. 
    # @param crl_distribution_point_id 
    # @param crl_distribution_point 
    # @param [Hash] opts the optional parameters
    # @return [CrlDistributionPoint]
    def update_crl_distribution_point(crl_distribution_point_id, crl_distribution_point, opts = {})
      data, _status_code, _headers = update_crl_distribution_point_with_http_info(crl_distribution_point_id, crl_distribution_point, opts)
      data
    end

    # Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
    # Update CrlDistributionPoint with &lt;crl-distribution-point-id&gt; This allows updating the ManagedResource fields. 
    # @param crl_distribution_point_id 
    # @param crl_distribution_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CrlDistributionPoint, Fixnum, Hash)>] CrlDistributionPoint data, response status code and response headers
    def update_crl_distribution_point_with_http_info(crl_distribution_point_id, crl_distribution_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.update_crl_distribution_point ...'
      end
      # verify the required parameter 'crl_distribution_point_id' is set
      if @api_client.config.client_side_validation && crl_distribution_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_distribution_point_id' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.update_crl_distribution_point"
      end
      # verify the required parameter 'crl_distribution_point' is set
      if @api_client.config.client_side_validation && crl_distribution_point.nil?
        fail ArgumentError, "Missing the required parameter 'crl_distribution_point' when calling ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi.update_crl_distribution_point"
      end
      # resource path
      local_var_path = '/trust-management/crl-distribution-points/{crl-distribution-point-id}'.sub('{' + 'crl-distribution-point-id' + '}', crl_distribution_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(crl_distribution_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CrlDistributionPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationTrustManagementCrlApi#update_crl_distribution_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
