=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNetworkTransportTransportNodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create transport node template for compute collection.
    # If automated transport node creation is configured on compute collection, this template will serve as the default setting for transport node creation. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param compute_collection_transport_node_template 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionTransportNodeTemplate]
    def create_compute_collection_transport_node_template_and_tn_collection(compute_collection_transport_node_template, opts = {})
      data, _status_code, _headers = create_compute_collection_transport_node_template_and_tn_collection_with_http_info(compute_collection_transport_node_template, opts)
      data
    end

    # Create transport node template for compute collection.
    # If automated transport node creation is configured on compute collection, this template will serve as the default setting for transport node creation. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param compute_collection_transport_node_template 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionTransportNodeTemplate, Fixnum, Hash)>] ComputeCollectionTransportNodeTemplate data, response status code and response headers
    def create_compute_collection_transport_node_template_and_tn_collection_with_http_info(compute_collection_transport_node_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.create_compute_collection_transport_node_template_and_tn_collection ...'
      end
      # verify the required parameter 'compute_collection_transport_node_template' is set
      if @api_client.config.client_side_validation && compute_collection_transport_node_template.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_transport_node_template' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.create_compute_collection_transport_node_template_and_tn_collection"
      end
      # resource path
      local_var_path = '/compute-collection-transport-node-templates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_collection_transport_node_template)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionTransportNodeTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#create_compute_collection_transport_node_template_and_tn_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a template of network migration specification.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param network_migration_spec 
    # @param [Hash] opts the optional parameters
    # @return [NetworkMigrationSpec]
    def create_network_migration_spec(network_migration_spec, opts = {})
      data, _status_code, _headers = create_network_migration_spec_with_http_info(network_migration_spec, opts)
      data
    end

    # Create a template of network migration specification.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param network_migration_spec 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkMigrationSpec, Fixnum, Hash)>] NetworkMigrationSpec data, response status code and response headers
    def create_network_migration_spec_with_http_info(network_migration_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.create_network_migration_spec ...'
      end
      # verify the required parameter 'network_migration_spec' is set
      if @api_client.config.client_side_validation && network_migration_spec.nil?
        fail ArgumentError, "Missing the required parameter 'network_migration_spec' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.create_network_migration_spec"
      end
      # resource path
      local_var_path = '/network-migration-specs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_migration_spec)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkMigrationSpec')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#create_network_migration_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Transport Node
    # Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 5 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: previous versions of NSX-T used a property named host_switches to specify the host switch configuration on the transport node. That property is deprecated, but still functions. You should configure new host switches using the host_switch_spec property.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info. 
    # @param transport_node 
    # @param [Hash] opts the optional parameters
    # @return [TransportNode]
    def create_transport_node_with_deployment_info(transport_node, opts = {})
      data, _status_code, _headers = create_transport_node_with_deployment_info_with_http_info(transport_node, opts)
      data
    end

    # Create a Transport Node
    # Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#39;/etc/ssh/ssh_host_rsa_key.pub&#39;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#39;id_rsa.pub&#39;.  &lt;b&gt;awk &#39;{print $2}&#39; id_rsa.pub | base64 -d | sha256sum -b | sed &#39;s/ .*$//&#39; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 5 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: previous versions of NSX-T used a property named host_switches to specify the host switch configuration on the transport node. That property is deprecated, but still functions. You should configure new host switches using the host_switch_spec property.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info. 
    # @param transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNode, Fixnum, Hash)>] TransportNode data, response status code and response headers
    def create_transport_node_with_deployment_info_with_http_info(transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.create_transport_node_with_deployment_info ...'
      end
      # verify the required parameter 'transport_node' is set
      if @api_client.config.client_side_validation && transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.create_transport_node_with_deployment_info"
      end
      # resource path
      local_var_path = '/transport-nodes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#create_transport_node_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a compute collection transport node template
    # Delete the specified compute collection transport node template. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_collection_transport_node_template_and_tn_collection(template_id, opts = {})
      delete_compute_collection_transport_node_template_and_tn_collection_with_http_info(template_id, opts)
      nil
    end

    # Delete a compute collection transport node template
    # Delete the specified compute collection transport node template. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_collection_transport_node_template_and_tn_collection_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.delete_compute_collection_transport_node_template_and_tn_collection ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.delete_compute_collection_transport_node_template_and_tn_collection"
      end
      # resource path
      local_var_path = '/compute-collection-transport-node-templates/{template-id}'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#delete_compute_collection_transport_node_template_and_tn_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a network migration specification template
    # Delete the specified network migration specification template. Delete will fail if this is a HostProfileNetworkMigrationSpec and is associated with certain compute collection. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_network_migration_spec(template_id, opts = {})
      delete_network_migration_spec_with_http_info(template_id, opts)
      nil
    end

    # Delete a network migration specification template
    # Delete the specified network migration specification template. Delete will fail if this is a HostProfileNetworkMigrationSpec and is associated with certain compute collection. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_network_migration_spec_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.delete_network_migration_spec ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.delete_network_migration_spec"
      end
      # resource path
      local_var_path = '/network-migration-specs/{template-id}'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#delete_network_migration_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Transport Node
    # Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @option opts [BOOLEAN] :unprepare_host Uninstall NSX components from host while deleting (default to true)
    # @return [nil]
    def delete_transport_node_with_deployment_info(transport_node_id, opts = {})
      delete_transport_node_with_deployment_info_with_http_info(transport_node_id, opts)
      nil
    end

    # Delete a Transport Node
    # Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @option opts [BOOLEAN] :unprepare_host Uninstall NSX components from host while deleting
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transport_node_with_deployment_info_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.delete_transport_node_with_deployment_info ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.delete_transport_node_with_deployment_info"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'unprepare_host'] = opts[:'unprepare_host'] if !opts[:'unprepare_host'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#delete_transport_node_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable flow cache for an edge transport node
    # Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_flow_cache_disable_flow_cache(transport_node_id, opts = {})
      disable_flow_cache_disable_flow_cache_with_http_info(transport_node_id, opts)
      nil
    end

    # Disable flow cache for an edge transport node
    # Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_flow_cache_disable_flow_cache_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.disable_flow_cache_disable_flow_cache ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.disable_flow_cache_disable_flow_cache"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}?action=disable_flow_cache'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#disable_flow_cache_disable_flow_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable flow cache for an edge transport node
    # Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_flow_cache_enable_flow_cache(transport_node_id, opts = {})
      enable_flow_cache_enable_flow_cache_with_http_info(transport_node_id, opts)
      nil
    end

    # Enable flow cache for an edge transport node
    # Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_flow_cache_enable_flow_cache_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.enable_flow_cache_enable_flow_cache ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.enable_flow_cache_enable_flow_cache"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}?action=enable_flow_cache'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#enable_flow_cache_enable_flow_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached.
    # Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_type Transport node type
    # @return [HeatMapTransportZoneStatus]
    def get_all_transport_nodes_status(opts = {})
      data, _status_code, _headers = get_all_transport_nodes_status_with_http_info(opts)
      data
    end

    # Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_type Transport node type
    # @return [Array<(HeatMapTransportZoneStatus, Fixnum, Hash)>] HeatMapTransportZoneStatus data, response status code and response headers
    def get_all_transport_nodes_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_all_transport_nodes_status ...'
      end
      if @api_client.config.client_side_validation && opts[:'node_type'] && !['HOST', 'EDGE'].include?(opts[:'node_type'])
        fail ArgumentError, 'invalid value for "node_type", must be one of HOST, EDGE'
      end
      # resource path
      local_var_path = '/transport-nodes/status'

      # query parameters
      query_params = {}
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_all_transport_nodes_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport zone. The service layer does not support source = realtime or cached.
    # Get high-level summary of a transport zone. The service layer does not support source = realtime or cached.
    # @param [Hash] opts the optional parameters
    # @return [HeatMapTransportNodesAggregateStatus]
    def get_all_transport_zone_status(opts = {})
      data, _status_code, _headers = get_all_transport_zone_status_with_http_info(opts)
      data
    end

    # Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
    # Get high-level summary of a transport zone. The service layer does not support source &#x3D; realtime or cached.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HeatMapTransportNodesAggregateStatus, Fixnum, Hash)>] HeatMapTransportNodesAggregateStatus data, response status code and response headers
    def get_all_transport_zone_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_all_transport_zone_status ...'
      end
      # resource path
      local_var_path = '/transport-zones/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportNodesAggregateStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_all_transport_zone_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get compute collection transportnode template by id
    # Returns compute collection transportnode template by id Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionTransportNodeTemplate]
    def get_compute_collection_transport_node_template(template_id, opts = {})
      data, _status_code, _headers = get_compute_collection_transport_node_template_with_http_info(template_id, opts)
      data
    end

    # Get compute collection transportnode template by id
    # Returns compute collection transportnode template by id Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionTransportNodeTemplate, Fixnum, Hash)>] ComputeCollectionTransportNodeTemplate data, response status code and response headers
    def get_compute_collection_transport_node_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_compute_collection_transport_node_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_compute_collection_transport_node_template"
      end
      # resource path
      local_var_path = '/compute-collection-transport-node-templates/{template-id}'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionTransportNodeTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_compute_collection_transport_node_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get compute collection transportnode template application states
    # Returns detailed transport node states for this compute collection Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compute_collection_id Compute collection id
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeCollectionTransportNodeTemplateStateList]
    def get_compute_collection_transport_node_template_state(template_id, opts = {})
      data, _status_code, _headers = get_compute_collection_transport_node_template_state_with_http_info(template_id, opts)
      data
    end

    # Get compute collection transportnode template application states
    # Returns detailed transport node states for this compute collection Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compute_collection_id Compute collection id
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeCollectionTransportNodeTemplateStateList, Fixnum, Hash)>] ComputeCollectionTransportNodeTemplateStateList data, response status code and response headers
    def get_compute_collection_transport_node_template_state_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_compute_collection_transport_node_template_state ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_compute_collection_transport_node_template_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_compute_collection_transport_node_template_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_compute_collection_transport_node_template_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/compute-collection-transport-node-templates/{template-id}/state'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'compute_collection_id'] = opts[:'compute_collection_id'] if !opts[:'compute_collection_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionTransportNodeTemplateStateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_compute_collection_transport_node_template_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the module details of a transport node 
    # Get the module details of a transport node 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [SoftwareModuleResult]
    def get_fabric_node_modules_of_transport_node(node_id, opts = {})
      data, _status_code, _headers = get_fabric_node_modules_of_transport_node_with_http_info(node_id, opts)
      data
    end

    # Get the module details of a transport node 
    # Get the module details of a transport node 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareModuleResult, Fixnum, Hash)>] SoftwareModuleResult data, response status code and response headers
    def get_fabric_node_modules_of_transport_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_fabric_node_modules_of_transport_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_fabric_node_modules_of_transport_node"
      end
      # resource path
      local_var_path = '/transport-nodes/{node-id}/modules'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SoftwareModuleResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_fabric_node_modules_of_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport zone
    # Get high-level summary of a transport zone
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [HeatMapTransportZoneStatus]
    def get_heatmap_transport_zone_status(zone_id, opts = {})
      data, _status_code, _headers = get_heatmap_transport_zone_status_with_http_info(zone_id, opts)
      data
    end

    # Get high-level summary of a transport zone
    # Get high-level summary of a transport zone
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(HeatMapTransportZoneStatus, Fixnum, Hash)>] HeatMapTransportZoneStatus data, response status code and response headers
    def get_heatmap_transport_zone_status_with_http_info(zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_heatmap_transport_zone_status ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_heatmap_transport_zone_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}/status'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_heatmap_transport_zone_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get network migration specification template by id.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [NetworkMigrationSpec]
    def get_network_migration_spec(template_id, opts = {})
      data, _status_code, _headers = get_network_migration_spec_with_http_info(template_id, opts)
      data
    end

    # Get network migration specification template by id.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkMigrationSpec, Fixnum, Hash)>] NetworkMigrationSpec data, response status code and response headers
    def get_network_migration_spec_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_network_migration_spec ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_network_migration_spec"
      end
      # resource path
      local_var_path = '/network-migration-specs/{template-id}'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkMigrationSpec')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_network_migration_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport node
    # Get high-level summary of a transport node
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status pNic/bond status
    # @return [PnicBondStatusListResult]
    def get_pnic_statuses_for_transport_node(node_id, opts = {})
      data, _status_code, _headers = get_pnic_statuses_for_transport_node_with_http_info(node_id, opts)
      data
    end

    # Get high-level summary of a transport node
    # Get high-level summary of a transport node
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status pNic/bond status
    # @return [Array<(PnicBondStatusListResult, Fixnum, Hash)>] PnicBondStatusListResult data, response status code and response headers
    def get_pnic_statuses_for_transport_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_pnic_statuses_for_transport_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_pnic_statuses_for_transport_node"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UNKNOWN', 'UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UNKNOWN, UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/transport-nodes/{node-id}/pnic-bond-status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PnicBondStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_pnic_statuses_for_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status report of transport nodes of all the transport zones
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [nil]
    def get_transport_node_report(opts = {})
      get_transport_node_report_with_http_info(opts)
      nil
    end

    # Creates a status report of transport nodes of all the transport zones
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_transport_node_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_report ...'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/transport-zones/transport-node-status-report'

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_transport_node_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status report of transport nodes in a transport zone
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API.
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [nil]
    def get_transport_node_report_for_a_transport_zone(zone_id, opts = {})
      get_transport_node_report_for_a_transport_zone_with_http_info(zone_id, opts)
      nil
    end

    # Creates a status report of transport nodes in a transport zone
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_transport_node_report_for_a_transport_zone_with_http_info(zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_report_for_a_transport_zone ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_report_for_a_transport_zone"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}/transport-node-status-report'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_transport_node_report_for_a_transport_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Node's State
    # Returns information about the current state of the transport node configuration and information about the associated hostswitch. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeState]
    def get_transport_node_state_with_deployment_info(transport_node_id, opts = {})
      data, _status_code, _headers = get_transport_node_state_with_deployment_info_with_http_info(transport_node_id, opts)
      data
    end

    # Get a Transport Node&#39;s State
    # Returns information about the current state of the transport node configuration and information about the associated hostswitch. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeState, Fixnum, Hash)>] TransportNodeState data, response status code and response headers
    def get_transport_node_state_with_deployment_info_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_state_with_deployment_info ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_state_with_deployment_info"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}/state'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_transport_node_state_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of a transport node
    # Read status of a transport node
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransportNodeStatus]
    def get_transport_node_status(node_id, opts = {})
      data, _status_code, _headers = get_transport_node_status_with_http_info(node_id, opts)
      data
    end

    # Read status of a transport node
    # Read status of a transport node
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransportNodeStatus, Fixnum, Hash)>] TransportNodeStatus data, response status code and response headers
    def get_transport_node_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/transport-nodes/{node-id}/status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Transport Node
    # Returns information about a specified transport node.
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNode]
    def get_transport_node_with_deployment_info(transport_node_id, opts = {})
      data, _status_code, _headers = get_transport_node_with_deployment_info_with_http_info(transport_node_id, opts)
      data
    end

    # Get a Transport Node
    # Returns information about a specified transport node.
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNode, Fixnum, Hash)>] TransportNode data, response status code and response headers
    def get_transport_node_with_deployment_info_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_with_deployment_info ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_transport_node_with_deployment_info"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_transport_node_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tunnel properties
    # Tunnel properties
    # @param node_id ID of transport node
    # @param tunnel_name Tunnel name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TunnelProperties]
    def get_tunnel(node_id, tunnel_name, opts = {})
      data, _status_code, _headers = get_tunnel_with_http_info(node_id, tunnel_name, opts)
      data
    end

    # Tunnel properties
    # Tunnel properties
    # @param node_id ID of transport node
    # @param tunnel_name Tunnel name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TunnelProperties, Fixnum, Hash)>] TunnelProperties data, response status code and response headers
    def get_tunnel_with_http_info(node_id, tunnel_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.get_tunnel ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_tunnel"
      end
      # verify the required parameter 'tunnel_name' is set
      if @api_client.config.client_side_validation && tunnel_name.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_name' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.get_tunnel"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/transport-nodes/{node-id}/tunnels/{tunnel-name}'.sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'tunnel-name' + '}', tunnel_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#get_tunnel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List compute collection transportnode templates
    # Returns all eligible compute collection transportnode templates Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compute_collection_id Compute collection id
    # @return [TransportNodeTemplateListResult]
    def list_compute_collection_transport_node_templates(opts = {})
      data, _status_code, _headers = list_compute_collection_transport_node_templates_with_http_info(opts)
      data
    end

    # List compute collection transportnode templates
    # Returns all eligible compute collection transportnode templates Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compute_collection_id Compute collection id
    # @return [Array<(TransportNodeTemplateListResult, Fixnum, Hash)>] TransportNodeTemplateListResult data, response status code and response headers
    def list_compute_collection_transport_node_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_compute_collection_transport_node_templates ...'
      end
      # resource path
      local_var_path = '/compute-collection-transport-node-templates'

      # query parameters
      query_params = {}
      query_params[:'compute_collection_id'] = opts[:'compute_collection_id'] if !opts[:'compute_collection_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeTemplateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_compute_collection_transport_node_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LLDP Neighbor Properties of Transport Node
    # List LLDP Neighbor Properties for all interfaces of Transport Node 
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [InterfaceNeighborPropertyListResult]
    def list_neighbor_properties(node_id, opts = {})
      data, _status_code, _headers = list_neighbor_properties_with_http_info(node_id, opts)
      data
    end

    # List LLDP Neighbor Properties of Transport Node
    # List LLDP Neighbor Properties for all interfaces of Transport Node 
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterfaceNeighborPropertyListResult, Fixnum, Hash)>] InterfaceNeighborPropertyListResult data, response status code and response headers
    def list_neighbor_properties_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_neighbor_properties ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_neighbor_properties"
      end
      # resource path
      local_var_path = '/lldp/transport-nodes/{node-id}/interfaces'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceNeighborPropertyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_neighbor_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all network migration specification templates.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Supported network migration specification types.
    # @return [NetworkMigrationSpecListResult]
    def list_network_migration_specs(opts = {})
      data, _status_code, _headers = list_network_migration_specs_with_http_info(opts)
      data
    end

    # List all network migration specification templates.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Supported network migration specification types.
    # @return [Array<(NetworkMigrationSpecListResult, Fixnum, Hash)>] NetworkMigrationSpecListResult data, response status code and response headers
    def list_network_migration_specs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_network_migration_specs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_network_migration_specs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_network_migration_specs, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['HostProfileNetworkMigrationSpec'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of HostProfileNetworkMigrationSpec'
      end
      # resource path
      local_var_path = '/network-migration-specs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkMigrationSpecListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_network_migration_specs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of all transport nodes with tunnel connections to transport node 
    # Read status of all transport nodes with tunnel connections to transport node 
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :tunnel_status Tunnel Status
    # @return [TransportNodeStatusListResult]
    def list_remote_transport_node_status(node_id, opts = {})
      data, _status_code, _headers = list_remote_transport_node_status_with_http_info(node_id, opts)
      data
    end

    # Read status of all transport nodes with tunnel connections to transport node 
    # Read status of all transport nodes with tunnel connections to transport node 
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :tunnel_status Tunnel Status
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_remote_transport_node_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_remote_transport_node_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_remote_transport_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'bfd_diagnostic_code'] && !['0', 'NO_DIAGNOSTIC', '1', 'CONTROL_DETECTION_TIME_EXPIRED', '2', 'ECHO_FUNCTION_FAILED', '3', 'NEIGHBOR_SIGNALED_SESSION_DOWN', '4', 'FORWARDING_PLANE_RESET', '5', 'PATH_DOWN', '6', 'CONCATENATED_PATH_DOWN', '7', 'ADMINISTRATIVELY_DOWN', '8', 'REVERSE_CONCATENATED_PATH_DOWN'].include?(opts[:'bfd_diagnostic_code'])
        fail ArgumentError, 'invalid value for "bfd_diagnostic_code", must be one of 0, NO_DIAGNOSTIC, 1, CONTROL_DETECTION_TIME_EXPIRED, 2, ECHO_FUNCTION_FAILED, 3, NEIGHBOR_SIGNALED_SESSION_DOWN, 4, FORWARDING_PLANE_RESET, 5, PATH_DOWN, 6, CONCATENATED_PATH_DOWN, 7, ADMINISTRATIVELY_DOWN, 8, REVERSE_CONCATENATED_PATH_DOWN'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_remote_transport_node_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_remote_transport_node_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'tunnel_status'] && !['UP', 'DOWN'].include?(opts[:'tunnel_status'])
        fail ArgumentError, 'invalid value for "tunnel_status", must be one of UP, DOWN'
      end
      # resource path
      local_var_path = '/transport-nodes/{node-id}/remote-transport-node-status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bfd_diagnostic_code'] = opts[:'bfd_diagnostic_code'] if !opts[:'bfd_diagnostic_code'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'tunnel_status'] = opts[:'tunnel_status'] if !opts[:'tunnel_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_remote_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the list of capabilities of transport node
    # Returns information about capabilities of transport host node. Edge nodes do not have capabilities.
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [NodeCapabilitiesResult]
    def list_transport_node_capabilities(transport_node_id, opts = {})
      data, _status_code, _headers = list_transport_node_capabilities_with_http_info(transport_node_id, opts)
      data
    end

    # Return the list of capabilities of transport node
    # Returns information about capabilities of transport host node. Edge nodes do not have capabilities.
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeCapabilitiesResult, Fixnum, Hash)>] NodeCapabilitiesResult data, response status code and response headers
    def list_transport_node_capabilities_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_capabilities ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_capabilities"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}/capabilities'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeCapabilitiesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_transport_node_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the specified transport node's network interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_transport_node_interfaces(transport_node_id, opts = {})
      data, _status_code, _headers = list_transport_node_interfaces_with_http_info(transport_node_id, opts)
      data
    end

    # List the specified transport node&#39;s network interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_transport_node_interfaces_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_interfaces ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}/network/interfaces'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_transport_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of all the transport nodes
    # Read status of all the transport nodes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_transport_node_status(opts = {})
      data, _status_code, _headers = list_transport_node_status_with_http_info(opts)
      data
    end

    # Read status of all the transport nodes
    # Read status of all the transport nodes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_transport_node_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/transport-zones/transport-node-status'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of transport nodes in a transport zone
    # Read status of transport nodes in a transport zone
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_transport_node_status_for_transport_zone(zone_id, opts = {})
      data, _status_code, _headers = list_transport_node_status_for_transport_zone_with_http_info(zone_id, opts)
      data
    end

    # Read status of transport nodes in a transport zone
    # Read status of transport nodes in a transport zone
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_transport_node_status_for_transport_zone_with_http_info(zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status_for_transport_zone ...'
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status_for_transport_zone"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status_for_transport_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_node_status_for_transport_zone, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/transport-zones/{zone-id}/transport-node-status'.sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_transport_node_status_for_transport_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List transport nodes by realized state
    # Returns a list of transport node states that have realized state as provided as query parameter 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [TransportNodeStateListResult]
    def list_transport_nodes_by_state_with_deployment_info(opts = {})
      data, _status_code, _headers = list_transport_nodes_by_state_with_deployment_info_with_http_info(opts)
      data
    end

    # List transport nodes by realized state
    # Returns a list of transport node states that have realized state as provided as query parameter 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [Array<(TransportNodeStateListResult, Fixnum, Hash)>] TransportNodeStateListResult data, response status code and response headers
    def list_transport_nodes_by_state_with_deployment_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_nodes_by_state_with_deployment_info ...'
      end
      if @api_client.config.client_side_validation && opts[:'mm_state'] && !['ENTERING', 'ENABLED', 'EXITING', 'DISABLED'].include?(opts[:'mm_state'])
        fail ArgumentError, 'invalid value for "mm_state", must be one of ENTERING, ENABLED, EXITING, DISABLED'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'IN_PROGRESS', 'SUCCESS', 'PARTIAL_SUCCESS', 'FAILED', 'ORPHANED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, IN_PROGRESS, SUCCESS, PARTIAL_SUCCESS, FAILED, ORPHANED'
      end
      # resource path
      local_var_path = '/transport-nodes/state'

      # query parameters
      query_params = {}
      query_params[:'mm_state'] = opts[:'mm_state'] if !opts[:'mm_state'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'vtep_ip'] = opts[:'vtep_ip'] if !opts[:'vtep_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_transport_nodes_by_state_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Transport Nodes
    # Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode maintenance mode flag
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id node identifier
    # @option opts [String] :node_ip Fabric node IP address
    # @option opts [String] :node_types a list of fabric node types separated by comma or a single type
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @return [TransportNodeListResult]
    def list_transport_nodes_with_deployment_info(opts = {})
      data, _status_code, _headers = list_transport_nodes_with_deployment_info_with_http_info(opts)
      data
    end

    # List Transport Nodes
    # Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode maintenance mode flag
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id node identifier
    # @option opts [String] :node_ip Fabric node IP address
    # @option opts [String] :node_types a list of fabric node types separated by comma or a single type
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_id Transport zone identifier
    # @return [Array<(TransportNodeListResult, Fixnum, Hash)>] TransportNodeListResult data, response status code and response headers
    def list_transport_nodes_with_deployment_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_nodes_with_deployment_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_nodes_with_deployment_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.list_transport_nodes_with_deployment_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/transport-nodes'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'in_maintenance_mode'] = opts[:'in_maintenance_mode'] if !opts[:'in_maintenance_mode'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'node_ip'] = opts[:'node_ip'] if !opts[:'node_ip'].nil?
      query_params[:'node_types'] = opts[:'node_types'] if !opts[:'node_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'transport_zone_id'] = opts[:'transport_zone_id'] if !opts[:'transport_zone_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#list_transport_nodes_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of tunnels
    # List of tunnels
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel as defined in RFC 5880
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :remote_node_id 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Tunnel status
    # @return [TunnelList]
    def query_tunnels(node_id, opts = {})
      data, _status_code, _headers = query_tunnels_with_http_info(node_id, opts)
      data
    end

    # List of tunnels
    # List of tunnels
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel as defined in RFC 5880
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :remote_node_id 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Tunnel status
    # @return [Array<(TunnelList, Fixnum, Hash)>] TunnelList data, response status code and response headers
    def query_tunnels_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.query_tunnels ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.query_tunnels"
      end
      if @api_client.config.client_side_validation && opts[:'bfd_diagnostic_code'] && !['0', 'NO_DIAGNOSTIC', '1', 'CONTROL_DETECTION_TIME_EXPIRED', '2', 'ECHO_FUNCTION_FAILED', '3', 'NEIGHBOR_SIGNALED_SESSION_DOWN', '4', 'FORWARDING_PLANE_RESET', '5', 'PATH_DOWN', '6', 'CONCATENATED_PATH_DOWN', '7', 'ADMINISTRATIVELY_DOWN', '8', 'REVERSE_CONCATENATED_PATH_DOWN'].include?(opts[:'bfd_diagnostic_code'])
        fail ArgumentError, 'invalid value for "bfd_diagnostic_code", must be one of 0, NO_DIAGNOSTIC, 1, CONTROL_DETECTION_TIME_EXPIRED, 2, ECHO_FUNCTION_FAILED, 3, NEIGHBOR_SIGNALED_SESSION_DOWN, 4, FORWARDING_PLANE_RESET, 5, PATH_DOWN, 6, CONCATENATED_PATH_DOWN, 7, ADMINISTRATIVELY_DOWN, 8, REVERSE_CONCATENATED_PATH_DOWN'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.query_tunnels, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportTransportNodesApi.query_tunnels, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN'
      end
      # resource path
      local_var_path = '/transport-nodes/{node-id}/tunnels'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bfd_diagnostic_code'] = opts[:'bfd_diagnostic_code'] if !opts[:'bfd_diagnostic_code'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'remote_node_id'] = opts[:'remote_node_id'] if !opts[:'remote_node_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#query_tunnels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LLDP Neighbor Properties of Transport Node by Interface Name 
    # Read LLDP Neighbor Properties for a specific interface of Transport Node 
    # @param node_id ID of transport node
    # @param interface_name Interface name to read
    # @param [Hash] opts the optional parameters
    # @return [InterfaceNeighborProperties]
    def read_neighbor_properties(node_id, interface_name, opts = {})
      data, _status_code, _headers = read_neighbor_properties_with_http_info(node_id, interface_name, opts)
      data
    end

    # Read LLDP Neighbor Properties of Transport Node by Interface Name 
    # Read LLDP Neighbor Properties for a specific interface of Transport Node 
    # @param node_id ID of transport node
    # @param interface_name Interface name to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterfaceNeighborProperties, Fixnum, Hash)>] InterfaceNeighborProperties data, response status code and response headers
    def read_neighbor_properties_with_http_info(node_id, interface_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.read_neighbor_properties ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.read_neighbor_properties"
      end
      # verify the required parameter 'interface_name' is set
      if @api_client.config.client_side_validation && interface_name.nil?
        fail ArgumentError, "Missing the required parameter 'interface_name' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.read_neighbor_properties"
      end
      # resource path
      local_var_path = '/lldp/transport-nodes/{node-id}/interfaces/{interface-name}'.sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-name' + '}', interface_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceNeighborProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#read_neighbor_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the transport node's network interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
    # @param transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceProperties]
    def read_transport_node_interface(transport_node_id, interface_id, opts = {})
      data, _status_code, _headers = read_transport_node_interface_with_http_info(transport_node_id, interface_id, opts)
      data
    end

    # Read the transport node&#39;s network interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
    # @param transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceProperties, Fixnum, Hash)>] NodeInterfaceProperties data, response status code and response headers
    def read_transport_node_interface_with_http_info(transport_node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.read_transport_node_interface ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.read_transport_node_interface"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.read_transport_node_interface"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}/network/interfaces/{interface-id}'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#read_transport_node_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the NSX Manager's Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
    # @param transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def read_transport_node_interface_statistics(transport_node_id, interface_id, opts = {})
      data, _status_code, _headers = read_transport_node_interface_statistics_with_http_info(transport_node_id, interface_id, opts)
      data
    end

    # Read the NSX Manager&#39;s Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
    # @param transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def read_transport_node_interface_statistics_with_http_info(transport_node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.read_transport_node_interface_statistics ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.read_transport_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.read_transport_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}/network/interfaces/{interface-id}/stats'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#read_transport_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh the node configuration for the Edge node.
    # The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_transport_node(transport_node_id, opts = {})
      refresh_transport_node_with_http_info(transport_node_id, opts)
      nil
    end

    # Refresh the node configuration for the Edge node.
    # The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def refresh_transport_node_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.refresh_transport_node ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.refresh_transport_node"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}?action=refresh_node_configuration&resource_type=EdgeNode'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#refresh_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart the inventory sync for the node if it is paused currently.
    # Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restart_transport_node_inventory_sync_restart_inventory_sync(transport_node_id, opts = {})
      restart_transport_node_inventory_sync_restart_inventory_sync_with_http_info(transport_node_id, opts)
      nil
    end

    # Restart the inventory sync for the node if it is paused currently.
    # Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def restart_transport_node_inventory_sync_restart_inventory_sync_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.restart_transport_node_inventory_sync_restart_inventory_sync ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.restart_transport_node_inventory_sync_restart_inventory_sync"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}?action=restart_inventory_sync'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#restart_transport_node_inventory_sync_restart_inventory_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Apply cluster level Transport Node Profile on overridden host
    # A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restore_parent_cluster_configuration_restore_cluster_config(transport_node_id, opts = {})
      restore_parent_cluster_configuration_restore_cluster_config_with_http_info(transport_node_id, opts)
      nil
    end

    # Apply cluster level Transport Node Profile on overridden host
    # A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def restore_parent_cluster_configuration_restore_cluster_config_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.restore_parent_cluster_configuration_restore_cluster_config ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.restore_parent_cluster_configuration_restore_cluster_config"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}?action=restore_cluster_config'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#restore_parent_cluster_configuration_restore_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resync a Transport Node
    # Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
    # @param transportnode_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resync_transport_node_resync_host_config(transportnode_id, opts = {})
      resync_transport_node_resync_host_config_with_http_info(transportnode_id, opts)
      nil
    end

    # Resync a Transport Node
    # Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations). 
    # @param transportnode_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resync_transport_node_resync_host_config_with_http_info(transportnode_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.resync_transport_node_resync_host_config ...'
      end
      # verify the required parameter 'transportnode_id' is set
      if @api_client.config.client_side_validation && transportnode_id.nil?
        fail ArgumentError, "Missing the required parameter 'transportnode_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.resync_transport_node_resync_host_config"
      end
      # resource path
      local_var_path = '/transport-nodes/{transportnode-id}?action=resync_host_config'.sub('{' + 'transportnode-id' + '}', transportnode_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#resync_transport_node_resync_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update compute collection transportnode template
    # Update configuration of compute collection transportnode template. Compute_collection_id isn't allowed to be changed since it represents the association between ComputeCollection and this template. This is determined when ComputeCollectionTransportNodeTemplate got created. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead. 
    # @param template_id 
    # @param compute_collection_transport_node_template 
    # @param [Hash] opts the optional parameters
    # @return [ComputeCollectionTransportNodeTemplate]
    def update_compute_collection_transport_node_template_and_tn_collection(template_id, compute_collection_transport_node_template, opts = {})
      data, _status_code, _headers = update_compute_collection_transport_node_template_and_tn_collection_with_http_info(template_id, compute_collection_transport_node_template, opts)
      data
    end

    # Update compute collection transportnode template
    # Update configuration of compute collection transportnode template. Compute_collection_id isn&#39;t allowed to be changed since it represents the association between ComputeCollection and this template. This is determined when ComputeCollectionTransportNodeTemplate got created. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead. 
    # @param template_id 
    # @param compute_collection_transport_node_template 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeCollectionTransportNodeTemplate, Fixnum, Hash)>] ComputeCollectionTransportNodeTemplate data, response status code and response headers
    def update_compute_collection_transport_node_template_and_tn_collection_with_http_info(template_id, compute_collection_transport_node_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.update_compute_collection_transport_node_template_and_tn_collection ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_compute_collection_transport_node_template_and_tn_collection"
      end
      # verify the required parameter 'compute_collection_transport_node_template' is set
      if @api_client.config.client_side_validation && compute_collection_transport_node_template.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_transport_node_template' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_compute_collection_transport_node_template_and_tn_collection"
      end
      # resource path
      local_var_path = '/compute-collection-transport-node-templates/{template-id}'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_collection_transport_node_template)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeCollectionTransportNodeTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#update_compute_collection_transport_node_template_and_tn_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a template of network migration specification.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. For a HostProfileNetworkMigrationSpec which is already associated with a compute collection, updating it would mean next time the system needs to trigger migration for hosts managed by compute collection, it will use the updated migration specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param network_migration_spec 
    # @param [Hash] opts the optional parameters
    # @return [NetworkMigrationSpec]
    def update_network_migration_spec(template_id, network_migration_spec, opts = {})
      data, _status_code, _headers = update_network_migration_spec_with_http_info(template_id, network_migration_spec, opts)
      data
    end

    # Update a template of network migration specification.
    # Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. For a HostProfileNetworkMigrationSpec which is already associated with a compute collection, updating it would mean next time the system needs to trigger migration for hosts managed by compute collection, it will use the updated migration specification. Note- transport node templates APIs are deprecated and user is recommended to use transport node profiles APIs instead.
    # @param template_id 
    # @param network_migration_spec 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkMigrationSpec, Fixnum, Hash)>] NetworkMigrationSpec data, response status code and response headers
    def update_network_migration_spec_with_http_info(template_id, network_migration_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.update_network_migration_spec ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_network_migration_spec"
      end
      # verify the required parameter 'network_migration_spec' is set
      if @api_client.config.client_side_validation && network_migration_spec.nil?
        fail ArgumentError, "Missing the required parameter 'network_migration_spec' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_network_migration_spec"
      end
      # resource path
      local_var_path = '/network-migration-specs/{template-id}'.sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_migration_spec)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkMigrationSpec')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#update_network_migration_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update transport node maintenance mode
    # Put transport node into maintenance mode or exit from maintenance mode.
    # @param transportnode_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [nil]
    def update_transport_node_maintenance_mode(transportnode_id, opts = {})
      update_transport_node_maintenance_mode_with_http_info(transportnode_id, opts)
      nil
    end

    # Update transport node maintenance mode
    # Put transport node into maintenance mode or exit from maintenance mode.
    # @param transportnode_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_transport_node_maintenance_mode_with_http_info(transportnode_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.update_transport_node_maintenance_mode ...'
      end
      # verify the required parameter 'transportnode_id' is set
      if @api_client.config.client_side_validation && transportnode_id.nil?
        fail ArgumentError, "Missing the required parameter 'transportnode_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_transport_node_maintenance_mode"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['enter_maintenance_mode', 'forced_enter_maintenance_mode', 'exit_maintenance_mode'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of enter_maintenance_mode, forced_enter_maintenance_mode, exit_maintenance_mode'
      end
      # resource path
      local_var_path = '/transport-nodes/{transportnode-id}'.sub('{' + 'transportnode-id' + '}', transportnode_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#update_transport_node_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Transport Node
    # Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is. For API backward compatibility, property host_switches will be still returned in response and will contain the configuration matching the one in host_switch_spec. In update call you should only modify configuration in either host_switch_spec or host_switches, but not both. Property host_switch_spec should be preferred over deprecated host_switches property when creating or updating transport nodes.  It also modifies attributes of node (host or edge). 
    # @param transport_node_id 
    # @param transport_node 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [TransportNode]
    def update_transport_node_with_deployment_info(transport_node_id, transport_node, opts = {})
      data, _status_code, _headers = update_transport_node_with_deployment_info_with_http_info(transport_node_id, transport_node, opts)
      data
    end

    # Update a Transport Node
    # Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is. For API backward compatibility, property host_switches will be still returned in response and will contain the configuration matching the one in host_switch_spec. In update call you should only modify configuration in either host_switch_spec or host_switches, but not both. Property host_switch_spec should be preferred over deprecated host_switches property when creating or updating transport nodes.  It also modifies attributes of node (host or edge). 
    # @param transport_node_id 
    # @param transport_node 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :esx_mgmt_if_migration_dest The network ids to which the ESX vmk interfaces will be migrated
    # @option opts [String] :if_id The ESX vmk interfaces to migrate
    # @option opts [String] :ping_ip IP Addresses to ping right after ESX vmk interfaces were migrated.
    # @option opts [String] :vnic The ESX vmk interfaces and/or VM NIC to migrate
    # @option opts [String] :vnic_migration_dest The migration destinations of ESX vmk interfaces and/or VM NIC
    # @return [Array<(TransportNode, Fixnum, Hash)>] TransportNode data, response status code and response headers
    def update_transport_node_with_deployment_info_with_http_info(transport_node_id, transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodesApi.update_transport_node_with_deployment_info ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_transport_node_with_deployment_info"
      end
      # verify the required parameter 'transport_node' is set
      if @api_client.config.client_side_validation && transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node' when calling ManagementPlaneApiNetworkTransportTransportNodesApi.update_transport_node_with_deployment_info"
      end
      # resource path
      local_var_path = '/transport-nodes/{transport-node-id}'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'esx_mgmt_if_migration_dest'] = opts[:'esx_mgmt_if_migration_dest'] if !opts[:'esx_mgmt_if_migration_dest'].nil?
      query_params[:'if_id'] = opts[:'if_id'] if !opts[:'if_id'].nil?
      query_params[:'ping_ip'] = opts[:'ping_ip'] if !opts[:'ping_ip'].nil?
      query_params[:'vnic'] = opts[:'vnic'] if !opts[:'vnic'].nil?
      query_params[:'vnic_migration_dest'] = opts[:'vnic_migration_dest'] if !opts[:'vnic_migration_dest'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodesApi#update_transport_node_with_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
