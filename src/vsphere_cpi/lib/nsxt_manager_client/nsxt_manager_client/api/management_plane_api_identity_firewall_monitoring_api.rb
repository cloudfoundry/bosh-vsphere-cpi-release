=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiIdentityFirewallMonitoringApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get list of compute collections and status.
    # Retrieve the compute collection status by ID. 
    # @param compute_collection_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [IdfwComputeCollectionStatus]
    def get_compute_collection_status_by_id(compute_collection_ext_id, opts = {})
      data, _status_code, _headers = get_compute_collection_status_by_id_with_http_info(compute_collection_ext_id, opts)
      data
    end

    # Get list of compute collections and status.
    # Retrieve the compute collection status by ID. 
    # @param compute_collection_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_compute_collection_status_by_id_with_http_info(compute_collection_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallMonitoringApi.get_compute_collection_status_by_id ...'
      end
      # verify the required parameter 'compute_collection_ext_id' is set
      if @api_client.config.client_side_validation && compute_collection_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_ext_id' when calling ManagementPlaneApiIdentityFirewallMonitoringApi.get_compute_collection_status_by_id"
      end
      # resource path
      local_var_path = '/idfw/compute-collections/{compute-collection-ext-id}/status'.sub('{' + 'compute-collection-ext-id' + '}', compute_collection_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallMonitoringApi#get_compute_collection_status_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IDFW enabled ComputeCollection statuses.
    # Retrieve all the Compute collection status. 
    # @param [Hash] opts the optional parameters
    # @return [IdfwComputeCollectionListResult]
    def list_compute_collection_statuses(opts = {})
      data, _status_code, _headers = list_compute_collection_statuses_with_http_info(opts)
      data
    end

    # List all IDFW enabled ComputeCollection statuses.
    # Retrieve all the Compute collection status. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def list_compute_collection_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallMonitoringApi.list_compute_collection_statuses ...'
      end
      # resource path
      local_var_path = '/idfw/compute-collections/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallMonitoringApi#list_compute_collection_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all transport node and statuses based on idfw enabled ComputeCollection ID.
    # Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request. 
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [IdfwTransportNodeStatusListResult]
    def list_transport_node_statuses_by_compute_collection_id(cc_ext_id, opts = {})
      data, _status_code, _headers = list_transport_node_statuses_by_compute_collection_id_with_http_info(cc_ext_id, opts)
      data
    end

    # List all transport node and statuses based on idfw enabled ComputeCollection ID.
    # Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request. 
    # @param cc_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_transport_node_statuses_by_compute_collection_id_with_http_info(cc_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallMonitoringApi.list_transport_node_statuses_by_compute_collection_id ...'
      end
      # verify the required parameter 'cc_ext_id' is set
      if @api_client.config.client_side_validation && cc_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cc_ext_id' when calling ManagementPlaneApiIdentityFirewallMonitoringApi.list_transport_node_statuses_by_compute_collection_id"
      end
      # resource path
      local_var_path = '/idfw/compute-collections/{cc-ext-id}/transport-nodes/status'.sub('{' + 'cc-ext-id' + '}', cc_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallMonitoringApi#list_transport_node_statuses_by_compute_collection_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all VM and statuses based on transport node ID of idfw enabled compute collection.
    # Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_statuses_by_transport_node_id(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_statuses_by_transport_node_id_with_http_info(transport_node_id, opts)
      data
    end

    # List all VM and statuses based on transport node ID of idfw enabled compute collection.
    # Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request. 
    # @param transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_statuses_by_transport_node_id_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallMonitoringApi.list_virtual_machine_statuses_by_transport_node_id ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiIdentityFirewallMonitoringApi.list_virtual_machine_statuses_by_transport_node_id"
      end
      # resource path
      local_var_path = '/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallMonitoringApi#list_virtual_machine_statuses_by_transport_node_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
