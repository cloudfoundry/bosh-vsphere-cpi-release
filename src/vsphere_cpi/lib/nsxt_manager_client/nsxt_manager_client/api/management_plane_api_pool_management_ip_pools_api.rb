=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiPoolManagementIpPoolsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Allocate or Release an IP Address from a Pool
    # Allocates or releases an IP address from the specified IP pool. To allocate an address, include ?action=ALLOCATE in the request and \"allocation_id\":null in the request body. When the request is successful, the response is \"allocation_id\": \"<ip-address>\", where <ip-address> is an IP address from the specified pool. To release an IP address (return it back to the pool), include ?action=RELEASE in the request and \"allocation_id\":<ip-address> in the request body, where <ip-address> is the address to be released. When the request is successful, the response is NULL. Tags, display_name and description attributes are not supported for AllocationIpAddress in this release. 
    # @param pool_id IP pool ID
    # @param allocation_ip_address 
    # @param action Specifies allocate or release action
    # @param [Hash] opts the optional parameters
    # @return [AllocationIpAddress]
    def allocate_or_release_from_ip_pool(pool_id, allocation_ip_address, action, opts = {})
      data, _status_code, _headers = allocate_or_release_from_ip_pool_with_http_info(pool_id, allocation_ip_address, action, opts)
      data
    end

    # Allocate or Release an IP Address from a Pool
    # Allocates or releases an IP address from the specified IP pool. To allocate an address, include ?action&#x3D;ALLOCATE in the request and \&quot;allocation_id\&quot;:null in the request body. When the request is successful, the response is \&quot;allocation_id\&quot;: \&quot;&lt;ip-address&gt;\&quot;, where &lt;ip-address&gt; is an IP address from the specified pool. To release an IP address (return it back to the pool), include ?action&#x3D;RELEASE in the request and \&quot;allocation_id\&quot;:&lt;ip-address&gt; in the request body, where &lt;ip-address&gt; is the address to be released. When the request is successful, the response is NULL. Tags, display_name and description attributes are not supported for AllocationIpAddress in this release. 
    # @param pool_id IP pool ID
    # @param allocation_ip_address 
    # @param action Specifies allocate or release action
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllocationIpAddress, Fixnum, Hash)>] AllocationIpAddress data, response status code and response headers
    def allocate_or_release_from_ip_pool_with_http_info(pool_id, allocation_ip_address, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.allocate_or_release_from_ip_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiPoolManagementIpPoolsApi.allocate_or_release_from_ip_pool"
      end
      # verify the required parameter 'allocation_ip_address' is set
      if @api_client.config.client_side_validation && allocation_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_ip_address' when calling ManagementPlaneApiPoolManagementIpPoolsApi.allocate_or_release_from_ip_pool"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiPoolManagementIpPoolsApi.allocate_or_release_from_ip_pool"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ALLOCATE', 'RELEASE'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ALLOCATE, RELEASE"
      end
      # resource path
      local_var_path = '/pools/ip-pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(allocation_ip_address)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AllocationIpAddress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#allocate_or_release_from_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an IP Pool
    # Creates a new IPv4 or IPv6 address pool. Required parameters are allocation_ranges and cidr. Optional parameters are display_name, description, dns_nameservers, dns_suffix, and gateway_ip. 
    # @param ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [IpPool]
    def create_ip_pool(ip_pool, opts = {})
      data, _status_code, _headers = create_ip_pool_with_http_info(ip_pool, opts)
      data
    end

    # Create an IP Pool
    # Creates a new IPv4 or IPv6 address pool. Required parameters are allocation_ranges and cidr. Optional parameters are display_name, description, dns_nameservers, dns_suffix, and gateway_ip. 
    # @param ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpPool, Fixnum, Hash)>] IpPool data, response status code and response headers
    def create_ip_pool_with_http_info(ip_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.create_ip_pool ...'
      end
      # verify the required parameter 'ip_pool' is set
      if @api_client.config.client_side_validation && ip_pool.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool' when calling ManagementPlaneApiPoolManagementIpPoolsApi.create_ip_pool"
      end
      # resource path
      local_var_path = '/pools/ip-pools'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#create_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an IP Pool
    # Deletes the specified IP address pool. By default, if the IpPool is used in other configurations (such as transport node template), it won't be deleted. In such situations, pass \"force=true\" as query param to force delete the IpPool
    # @param pool_id IP pool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_pool(pool_id, opts = {})
      delete_ip_pool_with_http_info(pool_id, opts)
      nil
    end

    # Delete an IP Pool
    # Deletes the specified IP address pool. By default, if the IpPool is used in other configurations (such as transport node template), it won&#39;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the IpPool
    # @param pool_id IP pool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.delete_ip_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiPoolManagementIpPoolsApi.delete_ip_pool"
      end
      # resource path
      local_var_path = '/pools/ip-pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#delete_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IP Pool Allocations
    # Returns information about which addresses have been allocated from a specified IP address pool. 
    # @param pool_id IP pool ID
    # @param [Hash] opts the optional parameters
    # @return [AllocationIpAddressListResult]
    def list_ip_pool_allocations(pool_id, opts = {})
      data, _status_code, _headers = list_ip_pool_allocations_with_http_info(pool_id, opts)
      data
    end

    # List IP Pool Allocations
    # Returns information about which addresses have been allocated from a specified IP address pool. 
    # @param pool_id IP pool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllocationIpAddressListResult, Fixnum, Hash)>] AllocationIpAddressListResult data, response status code and response headers
    def list_ip_pool_allocations_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.list_ip_pool_allocations ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiPoolManagementIpPoolsApi.list_ip_pool_allocations"
      end
      # resource path
      local_var_path = '/pools/ip-pools/{pool-id}/allocations'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AllocationIpAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#list_ip_pool_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IP Pools
    # Returns information about the configured IP address pools. Information includes the display name and description of the pool and the details of each of the subnets in the pool, including the DNS servers, allocation ranges, gateway, and CIDR subnet address. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpPoolListResult]
    def list_ip_pools(opts = {})
      data, _status_code, _headers = list_ip_pools_with_http_info(opts)
      data
    end

    # List IP Pools
    # Returns information about the configured IP address pools. Information includes the display name and description of the pool and the details of each of the subnets in the pool, including the DNS servers, allocation ranges, gateway, and CIDR subnet address. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpPoolListResult, Fixnum, Hash)>] IpPoolListResult data, response status code and response headers
    def list_ip_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.list_ip_pools ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiPoolManagementIpPoolsApi.list_ip_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiPoolManagementIpPoolsApi.list_ip_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/pools/ip-pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#list_ip_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IP Pool
    # Returns information about the specified IP address pool.
    # @param pool_id IP pool ID
    # @param [Hash] opts the optional parameters
    # @return [IpPool]
    def read_ip_pool(pool_id, opts = {})
      data, _status_code, _headers = read_ip_pool_with_http_info(pool_id, opts)
      data
    end

    # Read IP Pool
    # Returns information about the specified IP address pool.
    # @param pool_id IP pool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpPool, Fixnum, Hash)>] IpPool data, response status code and response headers
    def read_ip_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.read_ip_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiPoolManagementIpPoolsApi.read_ip_pool"
      end
      # resource path
      local_var_path = '/pools/ip-pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#read_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an IP Pool
    # Modifies the specified IP address pool. Modifiable parameters include the description, display_name, and all subnet information. 
    # @param pool_id IP pool ID
    # @param ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [IpPool]
    def update_ip_pool(pool_id, ip_pool, opts = {})
      data, _status_code, _headers = update_ip_pool_with_http_info(pool_id, ip_pool, opts)
      data
    end

    # Update an IP Pool
    # Modifies the specified IP address pool. Modifiable parameters include the description, display_name, and all subnet information. 
    # @param pool_id IP pool ID
    # @param ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpPool, Fixnum, Hash)>] IpPool data, response status code and response headers
    def update_ip_pool_with_http_info(pool_id, ip_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiPoolManagementIpPoolsApi.update_ip_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiPoolManagementIpPoolsApi.update_ip_pool"
      end
      # verify the required parameter 'ip_pool' is set
      if @api_client.config.client_side_validation && ip_pool.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool' when calling ManagementPlaneApiPoolManagementIpPoolsApi.update_ip_pool"
      end
      # resource path
      local_var_path = '/pools/ip-pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiPoolManagementIpPoolsApi#update_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
