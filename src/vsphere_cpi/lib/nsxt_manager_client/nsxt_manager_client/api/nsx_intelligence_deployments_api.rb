=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class NsxIntelligenceDeploymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deploy and register a Intelligence cluster node VM
    # Deploys a Intelligence cluster node VM as specified by the deployment config. 
    # @param add_intelligence_cluster_node_vm_info 
    # @param [Hash] opts the optional parameters
    # @return [IntelligenceClusterNodeVMDeploymentRequestList]
    def add_pace_cluster_node_vm(add_intelligence_cluster_node_vm_info, opts = {})
      data, _status_code, _headers = add_pace_cluster_node_vm_with_http_info(add_intelligence_cluster_node_vm_info, opts)
      data
    end

    # Deploy and register a Intelligence cluster node VM
    # Deploys a Intelligence cluster node VM as specified by the deployment config. 
    # @param add_intelligence_cluster_node_vm_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntelligenceClusterNodeVMDeploymentRequestList, Fixnum, Hash)>] IntelligenceClusterNodeVMDeploymentRequestList data, response status code and response headers
    def add_pace_cluster_node_vm_with_http_info(add_intelligence_cluster_node_vm_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NsxIntelligenceDeploymentsApi.add_pace_cluster_node_vm ...'
      end
      # verify the required parameter 'add_intelligence_cluster_node_vm_info' is set
      if @api_client.config.client_side_validation && add_intelligence_cluster_node_vm_info.nil?
        fail ArgumentError, "Missing the required parameter 'add_intelligence_cluster_node_vm_info' when calling NsxIntelligenceDeploymentsApi.add_pace_cluster_node_vm"
      end
      # resource path
      local_var_path = '/intelligence/nodes/deployments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_intelligence_cluster_node_vm_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntelligenceClusterNodeVMDeploymentRequestList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NsxIntelligenceDeploymentsApi#add_pace_cluster_node_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Attempt to delete an auto-deployed cluster node VM
    # Attempts to unregister and undeploy a specified auto-deployed cluster node VM. If it is a member of a cluster, then the VM will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the VM is not found, cleans up the deployment information associated with the deployment attempt. Note: If a VM has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the VM is successfully deleted. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete Delete by force
    # @return [nil]
    def delete_auto_deployed_pace_cluster_node_vm_delete(node_id, opts = {})
      delete_auto_deployed_pace_cluster_node_vm_delete_with_http_info(node_id, opts)
      nil
    end

    # Attempt to delete an auto-deployed cluster node VM
    # Attempts to unregister and undeploy a specified auto-deployed cluster node VM. If it is a member of a cluster, then the VM will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the VM is not found, cleans up the deployment information associated with the deployment attempt. Note: If a VM has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the VM is successfully deleted. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete Delete by force
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_auto_deployed_pace_cluster_node_vm_delete_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NsxIntelligenceDeploymentsApi.delete_auto_deployed_pace_cluster_node_vm_delete ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NsxIntelligenceDeploymentsApi.delete_auto_deployed_pace_cluster_node_vm_delete"
      end
      # resource path
      local_var_path = '/intelligence/nodes/deployments/{node-id}?action=delete'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force_delete'] = opts[:'force_delete'] if !opts[:'force_delete'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NsxIntelligenceDeploymentsApi#delete_auto_deployed_pace_cluster_node_vm_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for all cluster node VM auto-deployment attempts
    # Returns request information for every attempted deployment of a cluster node VM. 
    # @param [Hash] opts the optional parameters
    # @return [IntelligenceClusterNodeVMDeploymentRequestList]
    def list_pace_cluster_node_vm_deployment_requests(opts = {})
      data, _status_code, _headers = list_pace_cluster_node_vm_deployment_requests_with_http_info(opts)
      data
    end

    # Returns info for all cluster node VM auto-deployment attempts
    # Returns request information for every attempted deployment of a cluster node VM. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntelligenceClusterNodeVMDeploymentRequestList, Fixnum, Hash)>] IntelligenceClusterNodeVMDeploymentRequestList data, response status code and response headers
    def list_pace_cluster_node_vm_deployment_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NsxIntelligenceDeploymentsApi.list_pace_cluster_node_vm_deployment_requests ...'
      end
      # resource path
      local_var_path = '/intelligence/nodes/deployments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntelligenceClusterNodeVMDeploymentRequestList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NsxIntelligenceDeploymentsApi#list_pace_cluster_node_vm_deployment_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for a Intelligence cluster node VM auto-deployment attempt
    # Returns deployment request information for a specific attempted deployment of a cluster node VM. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [IntelligenceClusterNodeVMDeploymentRequest]
    def read_pace_cluster_node_vm_deployment_request(node_id, opts = {})
      data, _status_code, _headers = read_pace_cluster_node_vm_deployment_request_with_http_info(node_id, opts)
      data
    end

    # Returns info for a Intelligence cluster node VM auto-deployment attempt
    # Returns deployment request information for a specific attempted deployment of a cluster node VM. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntelligenceClusterNodeVMDeploymentRequest, Fixnum, Hash)>] IntelligenceClusterNodeVMDeploymentRequest data, response status code and response headers
    def read_pace_cluster_node_vm_deployment_request_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NsxIntelligenceDeploymentsApi.read_pace_cluster_node_vm_deployment_request ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NsxIntelligenceDeploymentsApi.read_pace_cluster_node_vm_deployment_request"
      end
      # resource path
      local_var_path = '/intelligence/nodes/deployments/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntelligenceClusterNodeVMDeploymentRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NsxIntelligenceDeploymentsApi#read_pace_cluster_node_vm_deployment_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the status of the VM creation/deletion
    # Returns the current deployment or undeployment status for a VM along with any other relevant current information, such as error messages. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [IntelligenceClusterNodeVMDeploymentStatusReport]
    def read_pace_cluster_node_vm_deployment_status(node_id, opts = {})
      data, _status_code, _headers = read_pace_cluster_node_vm_deployment_status_with_http_info(node_id, opts)
      data
    end

    # Returns the status of the VM creation/deletion
    # Returns the current deployment or undeployment status for a VM along with any other relevant current information, such as error messages. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntelligenceClusterNodeVMDeploymentStatusReport, Fixnum, Hash)>] IntelligenceClusterNodeVMDeploymentStatusReport data, response status code and response headers
    def read_pace_cluster_node_vm_deployment_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NsxIntelligenceDeploymentsApi.read_pace_cluster_node_vm_deployment_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NsxIntelligenceDeploymentsApi.read_pace_cluster_node_vm_deployment_status"
      end
      # resource path
      local_var_path = '/intelligence/nodes/deployments/{node-id}/status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntelligenceClusterNodeVMDeploymentStatusReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NsxIntelligenceDeploymentsApi#read_pace_cluster_node_vm_deployment_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
