=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiDirectoryServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a directory domain
    # Create a directory domain
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @return [DirectoryDomain]
    def create_directory_domain(directory_domain, opts = {})
      data, _status_code, _headers = create_directory_domain_with_http_info(directory_domain, opts)
      data
    end

    # Create a directory domain
    # Create a directory domain
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def create_directory_domain_with_http_info(directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.create_directory_domain ...'
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling ManagementPlaneApiDirectoryServiceApi.create_directory_domain"
      end
      # resource path
      local_var_path = '/directory/domains'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#create_directory_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for directory domain
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.
    # @param domain_id Directory domain identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @return [DirectoryLdapServer]
    def create_directory_ldap_server(domain_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_directory_ldap_server_with_http_info(domain_id, directory_ldap_server, opts)
      data
    end

    # Create a LDAP server for directory domain
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.
    # @param domain_id Directory domain identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_directory_ldap_server_with_http_info(domain_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.create_directory_ldap_server ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.create_directory_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling ManagementPlaneApiDirectoryServiceApi.create_directory_ldap_server"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}/ldap-servers'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#create_directory_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific domain with given identifier
    # Delete a specific domain with given identifier
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_directory_domain(domain_id, opts = {})
      delete_directory_domain_with_http_info(domain_id, opts)
      nil
    end

    # Delete a specific domain with given identifier
    # Delete a specific domain with given identifier
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_directory_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.delete_directory_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.delete_directory_domain"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#delete_directory_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for directory domain
    # Delete a LDAP server for directory domain
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_directory_ldap_server(domain_id, server_id, opts = {})
      delete_directory_ldap_server_with_http_info(domain_id, server_id, opts)
      nil
    end

    # Delete a LDAP server for directory domain
    # Delete a LDAP server for directory domain
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_directory_ldap_server_with_http_info(domain_id, server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.delete_directory_ldap_server ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.delete_directory_ldap_server"
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiDirectoryServiceApi.delete_directory_ldap_server"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}/ldap-servers/{server-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#delete_directory_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific domain with given identifier
    # Get a specific domain with given identifier
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @return [DirectoryDomain]
    def get_directory_domain(domain_id, opts = {})
      data, _status_code, _headers = get_directory_domain_with_http_info(domain_id, opts)
      data
    end

    # Get a specific domain with given identifier
    # Get a specific domain with given identifier
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def get_directory_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.get_directory_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.get_directory_domain"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#get_directory_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get domain sync statistics for the given identifier
    # Get domain sync statistics for the given identifier
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @return [DirectoryDomainSyncStats]
    def get_directory_domain_sync_stats(domain_id, opts = {})
      data, _status_code, _headers = get_directory_domain_sync_stats_with_http_info(domain_id, opts)
      data
    end

    # Get domain sync statistics for the given identifier
    # Get domain sync statistics for the given identifier
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def get_directory_domain_sync_stats_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.get_directory_domain_sync_stats ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.get_directory_domain_sync_stats"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}/sync-stats'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#get_directory_domain_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given directory domain
    # Get a specific LDAP server for a given directory domain
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @return [DirectoryLdapServer]
    def get_directory_ldap_server(domain_id, server_id, opts = {})
      data, _status_code, _headers = get_directory_ldap_server_with_http_info(domain_id, server_id, opts)
      data
    end

    # Get a specific LDAP server for a given directory domain
    # Get a specific LDAP server for a given directory domain
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def get_directory_ldap_server_with_http_info(domain_id, server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.get_directory_ldap_server ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.get_directory_ldap_server"
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiDirectoryServiceApi.get_directory_ldap_server"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}/ldap-servers/{server-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#get_directory_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domains
    # List all configured domains
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryDomainListResults]
    def list_directory_domains(opts = {})
      data, _status_code, _headers = list_directory_domains_with_http_info(opts)
      data
    end

    # List all configured domains
    # List all configured domains
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryDomainListResults, Fixnum, Hash)>] DirectoryDomainListResults data, response status code and response headers
    def list_directory_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.list_directory_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.list_directory_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.list_directory_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/directory/domains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#list_directory_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned.
    # @param domain_id Directory domain identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupMemberListResults]
    def list_directory_group_member_groups(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_directory_group_member_groups_with_http_info(domain_id, group_id, opts)
      data
    end

    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned.
    # @param domain_id Directory domain identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupMemberListResults, Fixnum, Hash)>] DirectoryGroupMemberListResults data, response status code and response headers
    def list_directory_group_member_groups_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.list_directory_group_member_groups ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.list_directory_group_member_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiDirectoryServiceApi.list_directory_group_member_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.list_directory_group_member_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.list_directory_group_member_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/directory/domains/{domain-id}/groups/{group-id}/member-groups'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupMemberListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#list_directory_group_member_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryLdapServerListResults]
    def list_directory_ldap_servers(domain_id, opts = {})
      data, _status_code, _headers = list_directory_ldap_servers_with_http_info(domain_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param domain_id Directory domain identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryLdapServerListResults, Fixnum, Hash)>] DirectoryLdapServerListResults data, response status code and response headers
    def list_directory_ldap_servers_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.list_directory_ldap_servers ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.list_directory_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.list_directory_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.list_directory_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/directory/domains/{domain-id}/ldap-servers'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#list_directory_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state.
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state.
    # @param domain_id Directory domain identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds (default to 0)
    # @return [nil]
    def request_directory_domain_sync(domain_id, action, opts = {})
      request_directory_domain_sync_with_http_info(domain_id, action, opts)
      nil
    end

    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state.
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state.
    # @param domain_id Directory domain identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_directory_domain_sync_with_http_info(domain_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.request_directory_domain_sync ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.request_directory_domain_sync"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiDirectoryServiceApi.request_directory_domain_sync"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['FULL_SYNC', 'DELTA_SYNC', 'STOP_SYNC'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of FULL_SYNC, DELTA_SYNC, STOP_SYNC"
      end
      if @api_client.config.client_side_validation && !opts[:'delay'].nil? && opts[:'delay'] < 0
        fail ArgumentError, 'invalid value for "opts[:"delay"]" when calling ManagementPlaneApiDirectoryServiceApi.request_directory_domain_sync, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/directory/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#request_directory_domain_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # @param domain_id Directory domain identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupListResults]
    def search_directory_groups(domain_id, filter_value, opts = {})
      data, _status_code, _headers = search_directory_groups_with_http_info(domain_id, filter_value, opts)
      data
    end

    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # @param domain_id Directory domain identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupListResults, Fixnum, Hash)>] DirectoryGroupListResults data, response status code and response headers
    def search_directory_groups_with_http_info(domain_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.search_directory_groups ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.search_directory_groups"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling ManagementPlaneApiDirectoryServiceApi.search_directory_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.search_directory_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiDirectoryServiceApi.search_directory_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/directory/domains/{domain-id}/groups'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#search_directory_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_directory_ldap_server(domain_id, server_id, action, opts = {})
      test_directory_ldap_server_with_http_info(domain_id, server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_directory_ldap_server_with_http_info(domain_id, server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.test_directory_ldap_server ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.test_directory_ldap_server"
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiDirectoryServiceApi.test_directory_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiDirectoryServiceApi.test_directory_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}/ldap-servers/{server-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#test_directory_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a directory domain
    # Update to any field in the directory domain will trigger a full sync
    # @param domain_id Directory domain identifier
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @return [DirectoryDomain]
    def update_directory_domain(domain_id, directory_domain, opts = {})
      data, _status_code, _headers = update_directory_domain_with_http_info(domain_id, directory_domain, opts)
      data
    end

    # Update a directory domain
    # Update to any field in the directory domain will trigger a full sync
    # @param domain_id Directory domain identifier
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def update_directory_domain_with_http_info(domain_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.update_directory_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.update_directory_domain"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling ManagementPlaneApiDirectoryServiceApi.update_directory_domain"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#update_directory_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for directory domain
    # Update a LDAP server for directory domain
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @return [DirectoryLdapServer]
    def update_directory_ldap_server(domain_id, server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = update_directory_ldap_server_with_http_info(domain_id, server_id, directory_ldap_server, opts)
      data
    end

    # Update a LDAP server for directory domain
    # Update a LDAP server for directory domain
    # @param domain_id Directory domain identifier
    # @param server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def update_directory_ldap_server_with_http_info(domain_id, server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.update_directory_ldap_server ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling ManagementPlaneApiDirectoryServiceApi.update_directory_ldap_server"
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiDirectoryServiceApi.update_directory_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling ManagementPlaneApiDirectoryServiceApi.update_directory_ldap_server"
      end
      # resource path
      local_var_path = '/directory/domains/{domain-id}/ldap-servers/{server-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#update_directory_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @return [DirectoryLdapServerStatus]
    def verify_directory_ldap_server(directory_ldap_server, action, opts = {})
      data, _status_code, _headers = verify_directory_ldap_server_with_http_info(directory_ldap_server, action, opts)
      data
    end

    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectoryLdapServerStatus, Fixnum, Hash)>] DirectoryLdapServerStatus data, response status code and response headers
    def verify_directory_ldap_server_with_http_info(directory_ldap_server, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiDirectoryServiceApi.verify_directory_ldap_server ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling ManagementPlaneApiDirectoryServiceApi.verify_directory_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiDirectoryServiceApi.verify_directory_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/directory/ldap-server'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiDirectoryServiceApi#verify_directory_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
