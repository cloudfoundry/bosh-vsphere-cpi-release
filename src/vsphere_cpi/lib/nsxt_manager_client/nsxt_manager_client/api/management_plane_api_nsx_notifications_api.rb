=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNsxNotificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new notification watcher.
    # Add a new notification watcher.
    # @param notification_watcher 
    # @param [Hash] opts the optional parameters
    # @return [NotificationWatcher]
    def add_notification_watcher(notification_watcher, opts = {})
      data, _status_code, _headers = add_notification_watcher_with_http_info(notification_watcher, opts)
      data
    end

    # Add a new notification watcher.
    # Add a new notification watcher.
    # @param notification_watcher 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationWatcher, Fixnum, Hash)>] NotificationWatcher data, response status code and response headers
    def add_notification_watcher_with_http_info(notification_watcher, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.add_notification_watcher ...'
      end
      # verify the required parameter 'notification_watcher' is set
      if @api_client.config.client_side_validation && notification_watcher.nil?
        fail ArgumentError, "Missing the required parameter 'notification_watcher' when calling ManagementPlaneApiNsxNotificationsApi.add_notification_watcher"
      end
      # resource path
      local_var_path = '/notification-watchers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(notification_watcher)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationWatcher')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#add_notification_watcher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add uri filters for the specified watcher ID.
    # Add uri filters for the specified watcher ID.
    # @param watcher_id 
    # @param notification 
    # @param [Hash] opts the optional parameters
    # @return [NotificationsList]
    def add_uri_filters_add_uri_filters(watcher_id, notification, opts = {})
      data, _status_code, _headers = add_uri_filters_add_uri_filters_with_http_info(watcher_id, notification, opts)
      data
    end

    # Add uri filters for the specified watcher ID.
    # Add uri filters for the specified watcher ID.
    # @param watcher_id 
    # @param notification 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationsList, Fixnum, Hash)>] NotificationsList data, response status code and response headers
    def add_uri_filters_add_uri_filters_with_http_info(watcher_id, notification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.add_uri_filters_add_uri_filters ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.add_uri_filters_add_uri_filters"
      end
      # verify the required parameter 'notification' is set
      if @api_client.config.client_side_validation && notification.nil?
        fail ArgumentError, "Missing the required parameter 'notification' when calling ManagementPlaneApiNsxNotificationsApi.add_uri_filters_add_uri_filters"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}/notifications?action=add_uri_filters'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(notification)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#add_uri_filters_add_uri_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing Notification-Watcher.
    # Delete notification watcher. 
    # @param watcher_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_notification_watcher(watcher_id, opts = {})
      delete_notification_watcher_with_http_info(watcher_id, opts)
      nil
    end

    # Delete an existing Notification-Watcher.
    # Delete notification watcher. 
    # @param watcher_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_notification_watcher_with_http_info(watcher_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.delete_notification_watcher ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.delete_notification_watcher"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#delete_notification_watcher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete uri filters for the specified watcher ID.
    # Delete uri filters for the specified watcher ID.
    # @param watcher_id 
    # @param notification 
    # @param [Hash] opts the optional parameters
    # @return [NotificationsList]
    def delete_uri_filters_delete_uri_filters(watcher_id, notification, opts = {})
      data, _status_code, _headers = delete_uri_filters_delete_uri_filters_with_http_info(watcher_id, notification, opts)
      data
    end

    # Delete uri filters for the specified watcher ID.
    # Delete uri filters for the specified watcher ID.
    # @param watcher_id 
    # @param notification 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationsList, Fixnum, Hash)>] NotificationsList data, response status code and response headers
    def delete_uri_filters_delete_uri_filters_with_http_info(watcher_id, notification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.delete_uri_filters_delete_uri_filters ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.delete_uri_filters_delete_uri_filters"
      end
      # verify the required parameter 'notification' is set
      if @api_client.config.client_side_validation && notification.nil?
        fail ArgumentError, "Missing the required parameter 'notification' when calling ManagementPlaneApiNsxNotificationsApi.delete_uri_filters_delete_uri_filters"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}/notifications?action=delete_uri_filters'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(notification)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#delete_uri_filters_delete_uri_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns notification watcher by watcher id.
    # Returns notification watcher by watcher id.
    # @param watcher_id 
    # @param [Hash] opts the optional parameters
    # @return [NotificationWatcher]
    def get_notification_watcher(watcher_id, opts = {})
      data, _status_code, _headers = get_notification_watcher_with_http_info(watcher_id, opts)
      data
    end

    # Returns notification watcher by watcher id.
    # Returns notification watcher by watcher id.
    # @param watcher_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationWatcher, Fixnum, Hash)>] NotificationWatcher data, response status code and response headers
    def get_notification_watcher_with_http_info(watcher_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.get_notification_watcher ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.get_notification_watcher"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationWatcher')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#get_notification_watcher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notifications for the specified watcher ID.
    # Get notifications for the specified watcher ID.
    # @param watcher_id 
    # @param [Hash] opts the optional parameters
    # @return [NotificationsList]
    def get_notifications(watcher_id, opts = {})
      data, _status_code, _headers = get_notifications_with_http_info(watcher_id, opts)
      data
    end

    # Get notifications for the specified watcher ID.
    # Get notifications for the specified watcher ID.
    # @param watcher_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationsList, Fixnum, Hash)>] NotificationsList data, response status code and response headers
    def get_notifications_with_http_info(watcher_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.get_notifications ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.get_notifications"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}/notifications'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#get_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of registered notification watchers.
    # Returns a list of registered notification watchers.
    # @param [Hash] opts the optional parameters
    # @return [NotificationWatcherListResult]
    def list_notification_watchers(opts = {})
      data, _status_code, _headers = list_notification_watchers_with_http_info(opts)
      data
    end

    # Returns a list of registered notification watchers.
    # Returns a list of registered notification watchers.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationWatcherListResult, Fixnum, Hash)>] NotificationWatcherListResult data, response status code and response headers
    def list_notification_watchers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.list_notification_watchers ...'
      end
      # resource path
      local_var_path = '/notification-watchers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationWatcherListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#list_notification_watchers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update notification watcher.
    # Update notification watcher.
    # @param watcher_id 
    # @param notification_watcher 
    # @param [Hash] opts the optional parameters
    # @return [NotificationWatcher]
    def update_notification_watcher(watcher_id, notification_watcher, opts = {})
      data, _status_code, _headers = update_notification_watcher_with_http_info(watcher_id, notification_watcher, opts)
      data
    end

    # Update notification watcher.
    # Update notification watcher.
    # @param watcher_id 
    # @param notification_watcher 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationWatcher, Fixnum, Hash)>] NotificationWatcher data, response status code and response headers
    def update_notification_watcher_with_http_info(watcher_id, notification_watcher, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.update_notification_watcher ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.update_notification_watcher"
      end
      # verify the required parameter 'notification_watcher' is set
      if @api_client.config.client_side_validation && notification_watcher.nil?
        fail ArgumentError, "Missing the required parameter 'notification_watcher' when calling ManagementPlaneApiNsxNotificationsApi.update_notification_watcher"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(notification_watcher)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationWatcher')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#update_notification_watcher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update notifications for the specified watcher ID.
    # Update notifications for the specified watcher ID.
    # @param watcher_id 
    # @param notifications_list 
    # @param [Hash] opts the optional parameters
    # @return [NotificationsList]
    def update_notifications(watcher_id, notifications_list, opts = {})
      data, _status_code, _headers = update_notifications_with_http_info(watcher_id, notifications_list, opts)
      data
    end

    # Update notifications for the specified watcher ID.
    # Update notifications for the specified watcher ID.
    # @param watcher_id 
    # @param notifications_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationsList, Fixnum, Hash)>] NotificationsList data, response status code and response headers
    def update_notifications_with_http_info(watcher_id, notifications_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxNotificationsApi.update_notifications ...'
      end
      # verify the required parameter 'watcher_id' is set
      if @api_client.config.client_side_validation && watcher_id.nil?
        fail ArgumentError, "Missing the required parameter 'watcher_id' when calling ManagementPlaneApiNsxNotificationsApi.update_notifications"
      end
      # verify the required parameter 'notifications_list' is set
      if @api_client.config.client_side_validation && notifications_list.nil?
        fail ArgumentError, "Missing the required parameter 'notifications_list' when calling ManagementPlaneApiNsxNotificationsApi.update_notifications"
      end
      # resource path
      local_var_path = '/notification-watchers/{watcher-id}/notifications'.sub('{' + 'watcher-id' + '}', watcher_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(notifications_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxNotificationsApi#update_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
