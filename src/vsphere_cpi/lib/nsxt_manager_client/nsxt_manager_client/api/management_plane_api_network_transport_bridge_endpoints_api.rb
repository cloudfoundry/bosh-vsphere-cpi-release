=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNetworkTransportBridgeEndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Bridge Endpoint
    # Creates a Bridge Endpoint. It describes the physical attributes of the bridge like vlan. A logical port can be attached to a vif providing bridging functionality from the logical overlay network to the physical vlan network 
    # @param bridge_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [BridgeEndpoint]
    def create_bridge_endpoint(bridge_endpoint, opts = {})
      data, _status_code, _headers = create_bridge_endpoint_with_http_info(bridge_endpoint, opts)
      data
    end

    # Create a Bridge Endpoint
    # Creates a Bridge Endpoint. It describes the physical attributes of the bridge like vlan. A logical port can be attached to a vif providing bridging functionality from the logical overlay network to the physical vlan network 
    # @param bridge_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeEndpoint, Fixnum, Hash)>] BridgeEndpoint data, response status code and response headers
    def create_bridge_endpoint_with_http_info(bridge_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.create_bridge_endpoint ...'
      end
      # verify the required parameter 'bridge_endpoint' is set
      if @api_client.config.client_side_validation && bridge_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_endpoint' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.create_bridge_endpoint"
      end
      # resource path
      local_var_path = '/bridge-endpoints'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#create_bridge_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Bridge Endpoint
    # Deletes the specified Bridge Endpoint.
    # @param bridgeendpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_endpoint(bridgeendpoint_id, opts = {})
      delete_bridge_endpoint_with_http_info(bridgeendpoint_id, opts)
      nil
    end

    # Delete a Bridge Endpoint
    # Deletes the specified Bridge Endpoint.
    # @param bridgeendpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_endpoint_with_http_info(bridgeendpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.delete_bridge_endpoint ...'
      end
      # verify the required parameter 'bridgeendpoint_id' is set
      if @api_client.config.client_side_validation && bridgeendpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridgeendpoint_id' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.delete_bridge_endpoint"
      end
      # resource path
      local_var_path = '/bridge-endpoints/{bridgeendpoint-id}'.sub('{' + 'bridgeendpoint-id' + '}', bridgeendpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#delete_bridge_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Information about a bridge endpoint
    # Returns information about a specified bridge endpoint.
    # @param bridgeendpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [BridgeEndpoint]
    def get_bridge_endpoint(bridgeendpoint_id, opts = {})
      data, _status_code, _headers = get_bridge_endpoint_with_http_info(bridgeendpoint_id, opts)
      data
    end

    # Get Information about a bridge endpoint
    # Returns information about a specified bridge endpoint.
    # @param bridgeendpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeEndpoint, Fixnum, Hash)>] BridgeEndpoint data, response status code and response headers
    def get_bridge_endpoint_with_http_info(bridgeendpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.get_bridge_endpoint ...'
      end
      # verify the required parameter 'bridgeendpoint_id' is set
      if @api_client.config.client_side_validation && bridgeendpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridgeendpoint_id' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.get_bridge_endpoint"
      end
      # resource path
      local_var_path = '/bridge-endpoints/{bridgeendpoint-id}'.sub('{' + 'bridgeendpoint-id' + '}', bridgeendpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#get_bridge_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns statistics of a specified Bridge Endpoint
    # Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)
    # @param endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [BridgeEndpointStatistics]
    def get_bridge_endpoint_statistics(endpoint_id, opts = {})
      data, _status_code, _headers = get_bridge_endpoint_statistics_with_http_info(endpoint_id, opts)
      data
    end

    # Returns statistics of a specified Bridge Endpoint
    # Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)
    # @param endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(BridgeEndpointStatistics, Fixnum, Hash)>] BridgeEndpointStatistics data, response status code and response headers
    def get_bridge_endpoint_statistics_with_http_info(endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.get_bridge_endpoint_statistics ...'
      end
      # verify the required parameter 'endpoint_id' is set
      if @api_client.config.client_side_validation && endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_id' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.get_bridge_endpoint_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/bridge-endpoints/{endpoint-id}/statistics'.sub('{' + 'endpoint-id' + '}', endpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#get_bridge_endpoint_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns status of a specified Bridge Endpoint
    # Get the status for the Bridge Endpoint of the given Endpoint id
    # @param endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [BridgeEndpointStatus]
    def get_bridge_endpoint_status(endpoint_id, opts = {})
      data, _status_code, _headers = get_bridge_endpoint_status_with_http_info(endpoint_id, opts)
      data
    end

    # Returns status of a specified Bridge Endpoint
    # Get the status for the Bridge Endpoint of the given Endpoint id
    # @param endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(BridgeEndpointStatus, Fixnum, Hash)>] BridgeEndpointStatus data, response status code and response headers
    def get_bridge_endpoint_status_with_http_info(endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.get_bridge_endpoint_status ...'
      end
      # verify the required parameter 'endpoint_id' is set
      if @api_client.config.client_side_validation && endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_id' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.get_bridge_endpoint_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/bridge-endpoints/{endpoint-id}/status'.sub('{' + 'endpoint-id' + '}', endpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#get_bridge_endpoint_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All Bridge Endpoints
    # Returns information about all configured bridge endoints 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bridge_cluster_id Bridge Cluster Identifier
    # @option opts [String] :bridge_endpoint_profile_id Bridge endpoint profile used by the edge cluster
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_switch_id Logical Switch Identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :vlan_transport_zone_id VLAN transport zone id used by the edge cluster
    # @return [BridgeEndpointListResult]
    def list_bridge_endpoints(opts = {})
      data, _status_code, _headers = list_bridge_endpoints_with_http_info(opts)
      data
    end

    # List All Bridge Endpoints
    # Returns information about all configured bridge endoints 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bridge_cluster_id Bridge Cluster Identifier
    # @option opts [String] :bridge_endpoint_profile_id Bridge endpoint profile used by the edge cluster
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :logical_switch_id Logical Switch Identifier
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :vlan_transport_zone_id VLAN transport zone id used by the edge cluster
    # @return [Array<(BridgeEndpointListResult, Fixnum, Hash)>] BridgeEndpointListResult data, response status code and response headers
    def list_bridge_endpoints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.list_bridge_endpoints ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.list_bridge_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.list_bridge_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/bridge-endpoints'

      # query parameters
      query_params = {}
      query_params[:'bridge_cluster_id'] = opts[:'bridge_cluster_id'] if !opts[:'bridge_cluster_id'].nil?
      query_params[:'bridge_endpoint_profile_id'] = opts[:'bridge_endpoint_profile_id'] if !opts[:'bridge_endpoint_profile_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'logical_switch_id'] = opts[:'logical_switch_id'] if !opts[:'logical_switch_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'vlan_transport_zone_id'] = opts[:'vlan_transport_zone_id'] if !opts[:'vlan_transport_zone_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#list_bridge_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Bridge Endpoint
    # Modifies a existing bridge endpoint. 
    # @param bridgeendpoint_id 
    # @param bridge_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [BridgeEndpoint]
    def update_bridge_endpoint(bridgeendpoint_id, bridge_endpoint, opts = {})
      data, _status_code, _headers = update_bridge_endpoint_with_http_info(bridgeendpoint_id, bridge_endpoint, opts)
      data
    end

    # Update a Bridge Endpoint
    # Modifies a existing bridge endpoint. 
    # @param bridgeendpoint_id 
    # @param bridge_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeEndpoint, Fixnum, Hash)>] BridgeEndpoint data, response status code and response headers
    def update_bridge_endpoint_with_http_info(bridgeendpoint_id, bridge_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeEndpointsApi.update_bridge_endpoint ...'
      end
      # verify the required parameter 'bridgeendpoint_id' is set
      if @api_client.config.client_side_validation && bridgeendpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridgeendpoint_id' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.update_bridge_endpoint"
      end
      # verify the required parameter 'bridge_endpoint' is set
      if @api_client.config.client_side_validation && bridge_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_endpoint' when calling ManagementPlaneApiNetworkTransportBridgeEndpointsApi.update_bridge_endpoint"
      end
      # resource path
      local_var_path = '/bridge-endpoints/{bridgeendpoint-id}'.sub('{' + 'bridgeendpoint-id' + '}', bridgeendpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeEndpointsApi#update_bridge_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
