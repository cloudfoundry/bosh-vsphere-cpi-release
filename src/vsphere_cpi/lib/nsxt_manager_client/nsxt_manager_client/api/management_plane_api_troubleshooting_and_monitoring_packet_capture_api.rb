=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an new packet capture session
    # Create an new packet capture session on given node with specified options 
    # @param packet_capture_request 
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSession]
    def create_packet_capture_session(packet_capture_request, opts = {})
      data, _status_code, _headers = create_packet_capture_session_with_http_info(packet_capture_request, opts)
      data
    end

    # Create an new packet capture session
    # Create an new packet capture session on given node with specified options 
    # @param packet_capture_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSession, Fixnum, Hash)>] PacketCaptureSession data, response status code and response headers
    def create_packet_capture_session_with_http_info(packet_capture_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.create_packet_capture_session ...'
      end
      # verify the required parameter 'packet_capture_request' is set
      if @api_client.config.client_side_validation && packet_capture_request.nil?
        fail ArgumentError, "Missing the required parameter 'packet_capture_request' when calling ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.create_packet_capture_session"
      end
      # resource path
      local_var_path = '/pktcap/session'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(packet_capture_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#create_packet_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all the packet capture sessions
    # Delete all the packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSessionList]
    def delete_all_capture_sessions_delete(opts = {})
      data, _status_code, _headers = delete_all_capture_sessions_delete_with_http_info(opts)
      data
    end

    # Delete all the packet capture sessions
    # Delete all the packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSessionList, Fixnum, Hash)>] PacketCaptureSessionList data, response status code and response headers
    def delete_all_capture_sessions_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.delete_all_capture_sessions_delete ...'
      end
      # resource path
      local_var_path = '/pktcap/sessions?action=delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSessionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#delete_all_capture_sessions_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the packet capture session by session id.
    # Before calling this method, terminate any running capture session. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSession]
    def delete_packet_capture_session_delete(session_id, opts = {})
      data, _status_code, _headers = delete_packet_capture_session_delete_with_http_info(session_id, opts)
      data
    end

    # Delete the packet capture session by session id.
    # Before calling this method, terminate any running capture session. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSession, Fixnum, Hash)>] PacketCaptureSession data, response status code and response headers
    def delete_packet_capture_session_delete_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.delete_packet_capture_session_delete ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.delete_packet_capture_session_delete"
      end
      # resource path
      local_var_path = '/pktcap/session/{session-id}?action=delete'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#delete_packet_capture_session_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of all packet capture sessions
    # Get the information of all packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSessionList]
    def list_packet_capture_sessions(opts = {})
      data, _status_code, _headers = list_packet_capture_sessions_with_http_info(opts)
      data
    end

    # Get the information of all packet capture sessions
    # Get the information of all packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSessionList, Fixnum, Hash)>] PacketCaptureSessionList data, response status code and response headers
    def list_packet_capture_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.list_packet_capture_sessions ...'
      end
      # resource path
      local_var_path = '/pktcap/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSessionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#list_packet_capture_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of packet capture session
    # Get the packet capture status information by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSession]
    def read_packet_capture_session(session_id, opts = {})
      data, _status_code, _headers = read_packet_capture_session_with_http_info(session_id, opts)
      data
    end

    # Get the status of packet capture session
    # Get the packet capture status information by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSession, Fixnum, Hash)>] PacketCaptureSession data, response status code and response headers
    def read_packet_capture_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.read_packet_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.read_packet_capture_session"
      end
      # resource path
      local_var_path = '/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#read_packet_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart the packet capture session
    # Restart the packet capture session 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSession]
    def restart_packet_capture_session_restart(session_id, opts = {})
      data, _status_code, _headers = restart_packet_capture_session_restart_with_http_info(session_id, opts)
      data
    end

    # Restart the packet capture session
    # Restart the packet capture session 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSession, Fixnum, Hash)>] PacketCaptureSession data, response status code and response headers
    def restart_packet_capture_session_restart_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.restart_packet_capture_session_restart ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.restart_packet_capture_session_restart"
      end
      # resource path
      local_var_path = '/pktcap/session/{session-id}?action=restart'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#restart_packet_capture_session_restart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Terminate the packet capture session by session id
    # Terminate the packet capture session by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PacketCaptureSession]
    def terminate_packet_capture_session_terminate(session_id, opts = {})
      data, _status_code, _headers = terminate_packet_capture_session_terminate_with_http_info(session_id, opts)
      data
    end

    # Terminate the packet capture session by session id
    # Terminate the packet capture session by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PacketCaptureSession, Fixnum, Hash)>] PacketCaptureSession data, response status code and response headers
    def terminate_packet_capture_session_terminate_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.terminate_packet_capture_session_terminate ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi.terminate_packet_capture_session_terminate"
      end
      # resource path
      local_var_path = '/pktcap/session/{session-id}?action=terminate'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PacketCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiTroubleshootingAndMonitoringPacketCaptureApi#terminate_packet_capture_session_terminate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
