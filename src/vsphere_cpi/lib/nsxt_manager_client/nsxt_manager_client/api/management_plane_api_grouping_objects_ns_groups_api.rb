=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiGroupingObjectsNsGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add NSGroup expression
    # Add/remove the expressions passed in the request body to/from the NSGroup 
    # @param ns_group_id NSGroup Id
    # @param ns_group_expression_list 
    # @param action Specifies addition or removal action
    # @param [Hash] opts the optional parameters
    # @return [NSGroup]
    def add_or_remove_ns_group_expression(ns_group_id, ns_group_expression_list, action, opts = {})
      data, _status_code, _headers = add_or_remove_ns_group_expression_with_http_info(ns_group_id, ns_group_expression_list, action, opts)
      data
    end

    # Add NSGroup expression
    # Add/remove the expressions passed in the request body to/from the NSGroup 
    # @param ns_group_id NSGroup Id
    # @param ns_group_expression_list 
    # @param action Specifies addition or removal action
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def add_or_remove_ns_group_expression_with_http_info(ns_group_id, ns_group_expression_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.add_or_remove_ns_group_expression ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.add_or_remove_ns_group_expression"
      end
      # verify the required parameter 'ns_group_expression_list' is set
      if @api_client.config.client_side_validation && ns_group_expression_list.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_expression_list' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.add_or_remove_ns_group_expression"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.add_or_remove_ns_group_expression"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_MEMBERS', 'REMOVE_MEMBERS'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_MEMBERS, REMOVE_MEMBERS"
      end
      # resource path
      local_var_path = '/ns-groups/{ns-group-id}'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_group_expression_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#add_or_remove_ns_group_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create NSGroup
    # Creates a new NSGroup that can group NSX resources - VIFs, Lports and LSwitches as well as the grouping objects - IPSet, MACSet and other NSGroups. For NSGroups containing VM criteria(both static and dynamic), system VMs will not be included as members. This filter applies at VM level only. Exceptions are as follows: 1. LogicalPorts and VNI of System VMs will be included in NSGroup if the criteria  is based on LogicalPort, LogicalSwitch or VNI directly. 
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [NSGroup]
    def create_ns_group(ns_group, opts = {})
      data, _status_code, _headers = create_ns_group_with_http_info(ns_group, opts)
      data
    end

    # Create NSGroup
    # Creates a new NSGroup that can group NSX resources - VIFs, Lports and LSwitches as well as the grouping objects - IPSet, MACSet and other NSGroups. For NSGroups containing VM criteria(both static and dynamic), system VMs will not be included as members. This filter applies at VM level only. Exceptions are as follows: 1. LogicalPorts and VNI of System VMs will be included in NSGroup if the criteria  is based on LogicalPort, LogicalSwitch or VNI directly. 
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def create_ns_group_with_http_info(ns_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.create_ns_group ...'
      end
      # verify the required parameter 'ns_group' is set
      if @api_client.config.client_side_validation && ns_group.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.create_ns_group"
      end
      # resource path
      local_var_path = '/ns-groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#create_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NSGroup
    # Deletes the specified NSGroup. By default, if the NSGroup is added to another NSGroup, it won't be deleted. In such situations, pass \"force=true\" as query param to force delete the NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ns_group(ns_group_id, opts = {})
      delete_ns_group_with_http_info(ns_group_id, opts)
      nil
    end

    # Delete NSGroup
    # Deletes the specified NSGroup. By default, if the NSGroup is added to another NSGroup, it won&#39;t be deleted. In such situations, pass \&quot;force&#x3D;true\&quot; as query param to force delete the NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ns_group_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.delete_ns_group ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.delete_ns_group"
      end
      # resource path
      local_var_path = '/ns-groups/{ns-group-id}'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#delete_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective Directory Groups of the specified NSGroup.
    # Returns effective directory groups which are members of the specified NSGroup. This API is applicable only for NSGroups containing DirectoryGroup member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_active_directory_groups(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_active_directory_groups_with_http_info(ns_group_id, opts)
      data
    end

    # Get Effective Directory Groups of the specified NSGroup.
    # Returns effective directory groups which are members of the specified NSGroup. This API is applicable only for NSGroups containing DirectoryGroup member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_active_directory_groups_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_active_directory_groups ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_active_directory_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_active_directory_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_active_directory_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-directory-group-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_active_directory_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective IPAddress translated from the NSGroup
    # Returns effective ip address members of the specified NSGroup. This API is applicable only for NSGroups containing either VirtualMachine, VIF, LogicalSwitch, LogicalPort or IPSet member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveIPAddressMemberListResult]
    def get_effective_ip_address_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_ip_address_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get Effective IPAddress translated from the NSGroup
    # Returns effective ip address members of the specified NSGroup. This API is applicable only for NSGroups containing either VirtualMachine, VIF, LogicalSwitch, LogicalPort or IPSet member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveIPAddressMemberListResult, Fixnum, Hash)>] EffectiveIPAddressMemberListResult data, response status code and response headers
    def get_effective_ip_address_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_address_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_address_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_address_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_address_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-ip-address-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveIPAddressMemberListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_ip_address_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective IPSets of the specified NSGroup.
    # Returns effective IPSets which are members of the specified NSGroup. This API is applicable only for NSGroups containing IPSet member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_ip_set_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_ip_set_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get Effective IPSets of the specified NSGroup.
    # Returns effective IPSets which are members of the specified NSGroup. This API is applicable only for NSGroups containing IPSet member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_ip_set_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_set_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_set_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_set_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_ip_set_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-ipset-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_ip_set_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective Logical Ports translated from the NSgroup
    # Returns effective logical port members of the specified NSGroup. This API is applicable only for NSGroups containing either VirtualMachines, LogicalSwitch or LogicalPort member types.For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_logical_port_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_logical_port_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get Effective Logical Ports translated from the NSgroup
    # Returns effective logical port members of the specified NSGroup. This API is applicable only for NSGroups containing either VirtualMachines, LogicalSwitch or LogicalPort member types.For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_logical_port_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_port_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_port_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_port_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_port_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-logical-port-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_logical_port_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective switch members translated from the NSGroup
    # Returns effective logical switch members of the specified NSGroup. This API is applicable for NSGroups containing LogicalSwitch members. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_logical_switch_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_logical_switch_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get Effective switch members translated from the NSGroup
    # Returns effective logical switch members of the specified NSGroup. This API is applicable for NSGroups containing LogicalSwitch members. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_logical_switch_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_switch_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_switch_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_switch_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_logical_switch_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-logical-switch-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_logical_switch_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get effective transport node members translated from the NSGroup
    # Returns effective transport node members of the specified NSGroup. This API is applicable only for NSGroups containing TransportNode member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberResourceListResult]
    def get_effective_transport_node_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_transport_node_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get effective transport node members translated from the NSGroup
    # Returns effective transport node members of the specified NSGroup. This API is applicable only for NSGroups containing TransportNode member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberResourceListResult, Fixnum, Hash)>] EffectiveMemberResourceListResult data, response status code and response headers
    def get_effective_transport_node_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_transport_node_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_transport_node_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_transport_node_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_transport_node_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-transport-node-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_transport_node_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get effective VIF members translated from the NSGroup
    # Returns effective VIF members of the specified NSGroup. This API is applicable only for NSGroups containing either VirtualMachines or VIF member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualNetworkInterfaceListResult]
    def get_effective_vif_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_vif_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get effective VIF members translated from the NSGroup
    # Returns effective VIF members of the specified NSGroup. This API is applicable only for NSGroups containing either VirtualMachines or VIF member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualNetworkInterfaceListResult, Fixnum, Hash)>] VirtualNetworkInterfaceListResult data, response status code and response headers
    def get_effective_vif_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_vif_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_vif_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_vif_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_vif_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-vif-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualNetworkInterfaceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_vif_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective Virtual Machine members of the specified NSGroup.
    # Returns effective virtual machine members of the specified NSGroup. This API is applicable only for NSGroups containing VirtualMachine member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualMachineListResult]
    def get_effective_virtual_machine_members(ns_group_id, opts = {})
      data, _status_code, _headers = get_effective_virtual_machine_members_with_http_info(ns_group_id, opts)
      data
    end

    # Get Effective Virtual Machine members of the specified NSGroup.
    # Returns effective virtual machine members of the specified NSGroup. This API is applicable only for NSGroups containing VirtualMachine member type. For NSGroups containing other member types,it returns an empty list. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualMachineListResult, Fixnum, Hash)>] VirtualMachineListResult data, response status code and response headers
    def get_effective_virtual_machine_members_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_virtual_machine_members ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_virtual_machine_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_virtual_machine_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_effective_virtual_machine_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/effective-virtual-machine-members'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualMachineListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_effective_virtual_machine_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get member types from NSGroup
    # Returns member types for a specified NSGroup including child NSGroups. This considers static members and members added via membership criteria only 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveMemberTypeListResult]
    def get_member_types(ns_group_id, opts = {})
      data, _status_code, _headers = get_member_types_with_http_info(ns_group_id, opts)
      data
    end

    # Get member types from NSGroup
    # Returns member types for a specified NSGroup including child NSGroups. This considers static members and members added via membership criteria only 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveMemberTypeListResult, Fixnum, Hash)>] EffectiveMemberTypeListResult data, response status code and response headers
    def get_member_types_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_member_types ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_member_types"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_member_types, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_member_types, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{ns-group-id}/member-types'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveMemberTypeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_member_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get services to which the given nsgroup belongs to 
    # Returns information about services that are associated with the given NSGroup. The service name is passed by service_type parameter 
    # @param nsgroup_id 
    # @param service_type 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :fetch_parentgroup_associations Fetch complete list of associated resources considering nesting  (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceAssociationListResult]
    def get_service_associations(nsgroup_id, service_type, opts = {})
      data, _status_code, _headers = get_service_associations_with_http_info(nsgroup_id, service_type, opts)
      data
    end

    # Get services to which the given nsgroup belongs to 
    # Returns information about services that are associated with the given NSGroup. The service name is passed by service_type parameter 
    # @param nsgroup_id 
    # @param service_type 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :fetch_parentgroup_associations Fetch complete list of associated resources considering nesting 
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceAssociationListResult, Fixnum, Hash)>] ServiceAssociationListResult data, response status code and response headers
    def get_service_associations_with_http_info(nsgroup_id, service_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_service_associations ...'
      end
      # verify the required parameter 'nsgroup_id' is set
      if @api_client.config.client_side_validation && nsgroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'nsgroup_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_service_associations"
      end
      # verify the required parameter 'service_type' is set
      if @api_client.config.client_side_validation && service_type.nil?
        fail ArgumentError, "Missing the required parameter 'service_type' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_service_associations"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['firewall', 'ipfix'].include?(service_type)
        fail ArgumentError, "invalid value for 'service_type', must be one of firewall, ipfix"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_service_associations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_service_associations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/{nsgroup-id}/service-associations'.sub('{' + 'nsgroup-id' + '}', nsgroup_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'service_type'] = service_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'fetch_parentgroup_associations'] = opts[:'fetch_parentgroup_associations'] if !opts[:'fetch_parentgroup_associations'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceAssociationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_service_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of all the virtual machines that are not a part of any existing NSGroup.
    # Get the list of all the virtual machines that are not a part of any existing NSGroup. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display Name of the virtual machine
    # @option opts [String] :external_id External id of the virtual machine
    # @option opts [String] :host_id Id of the host where this vif is located
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UnassociatedVMListResult]
    def get_unassociated_virtual_machines(opts = {})
      data, _status_code, _headers = get_unassociated_virtual_machines_with_http_info(opts)
      data
    end

    # Get the list of all the virtual machines that are not a part of any existing NSGroup.
    # Get the list of all the virtual machines that are not a part of any existing NSGroup. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :display_name Display Name of the virtual machine
    # @option opts [String] :external_id External id of the virtual machine
    # @option opts [String] :host_id Id of the host where this vif is located
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UnassociatedVMListResult, Fixnum, Hash)>] UnassociatedVMListResult data, response status code and response headers
    def get_unassociated_virtual_machines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.get_unassociated_virtual_machines ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_unassociated_virtual_machines, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.get_unassociated_virtual_machines, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups/unassociated-virtual-machines'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnassociatedVMListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#get_unassociated_virtual_machines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NSGroups
    # List the NSGroups in a paginated format. The page size is restricted to 50 NSGroups so that the size of the response remains small even in the worst case. Optionally, specify valid member types as request parameter to filter NSGroups. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Specify member types to filter corresponding NSGroups 
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions  (default to false)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NSGroupListResult]
    def list_ns_groups(opts = {})
      data, _status_code, _headers = list_ns_groups_with_http_info(opts)
      data
    end

    # List NSGroups
    # List the NSGroups in a paginated format. The page size is restricted to 50 NSGroups so that the size of the response remains small even in the worst case. Optionally, specify valid member types as request parameter to filter NSGroups. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Specify member types to filter corresponding NSGroups 
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NSGroupListResult, Fixnum, Hash)>] NSGroupListResult data, response status code and response headers
    def list_ns_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.list_ns_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.list_ns_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.list_ns_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ns-groups'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'member_types'] = opts[:'member_types'] if !opts[:'member_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'populate_references'] = opts[:'populate_references'] if !opts[:'populate_references'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#list_ns_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read NSGroup
    # Returns information about the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions  (default to false)
    # @return [NSGroup]
    def read_ns_group(ns_group_id, opts = {})
      data, _status_code, _headers = read_ns_group_with_http_info(ns_group_id, opts)
      data
    end

    # Read NSGroup
    # Returns information about the specified NSGroup. 
    # @param ns_group_id NSGroup Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :populate_references Populate metadata of resource referenced by NSGroupExpressions 
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def read_ns_group_with_http_info(ns_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.read_ns_group ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.read_ns_group"
      end
      # resource path
      local_var_path = '/ns-groups/{ns-group-id}'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'populate_references'] = opts[:'populate_references'] if !opts[:'populate_references'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#read_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NSGroup
    # Updates the specified NSGroup. Modifiable parameters include the description, display_name and members. For NSGroups containing VM criteria(both static and dynamic), system VMs will not be included as members. This filter applies at VM level only. Exceptions are as follows. 1. LogicalPorts and VNI of system VMs will be included in NSGroup if the criteria  is based on LogicalPort, LogicalSwitch or VNI directly. 
    # @param ns_group_id NSGroup Id
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [NSGroup]
    def update_ns_group(ns_group_id, ns_group, opts = {})
      data, _status_code, _headers = update_ns_group_with_http_info(ns_group_id, ns_group, opts)
      data
    end

    # Update NSGroup
    # Updates the specified NSGroup. Modifiable parameters include the description, display_name and members. For NSGroups containing VM criteria(both static and dynamic), system VMs will not be included as members. This filter applies at VM level only. Exceptions are as follows. 1. LogicalPorts and VNI of system VMs will be included in NSGroup if the criteria  is based on LogicalPort, LogicalSwitch or VNI directly. 
    # @param ns_group_id NSGroup Id
    # @param ns_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSGroup, Fixnum, Hash)>] NSGroup data, response status code and response headers
    def update_ns_group_with_http_info(ns_group_id, ns_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiGroupingObjectsNsGroupsApi.update_ns_group ...'
      end
      # verify the required parameter 'ns_group_id' is set
      if @api_client.config.client_side_validation && ns_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group_id' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.update_ns_group"
      end
      # verify the required parameter 'ns_group' is set
      if @api_client.config.client_side_validation && ns_group.nil?
        fail ArgumentError, "Missing the required parameter 'ns_group' when calling ManagementPlaneApiGroupingObjectsNsGroupsApi.update_ns_group"
      end
      # resource path
      local_var_path = '/ns-groups/{ns-group-id}'.sub('{' + 'ns-group-id' + '}', ns_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ns_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiGroupingObjectsNsGroupsApi#update_ns_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
