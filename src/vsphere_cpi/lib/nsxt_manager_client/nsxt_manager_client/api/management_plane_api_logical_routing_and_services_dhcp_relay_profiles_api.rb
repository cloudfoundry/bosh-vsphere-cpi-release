=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a DHCP Relay Profile
    # Creates a dhcp relay profile. 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayProfile]
    def create_dhcp_relay_profile(dhcp_relay_profile, opts = {})
      data, _status_code, _headers = create_dhcp_relay_profile_with_http_info(dhcp_relay_profile, opts)
      data
    end

    # Create a DHCP Relay Profile
    # Creates a dhcp relay profile. 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayProfile, Fixnum, Hash)>] DhcpRelayProfile data, response status code and response headers
    def create_dhcp_relay_profile_with_http_info(dhcp_relay_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.create_dhcp_relay_profile ...'
      end
      # verify the required parameter 'dhcp_relay_profile' is set
      if @api_client.config.client_side_validation && dhcp_relay_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_profile' when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.create_dhcp_relay_profile"
      end
      # resource path
      local_var_path = '/dhcp/relay-profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi#create_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a DHCP Relay Profile
    # Deletes the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_relay_profile(relay_profile_id, opts = {})
      delete_dhcp_relay_profile_with_http_info(relay_profile_id, opts)
      nil
    end

    # Delete a DHCP Relay Profile
    # Deletes the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_relay_profile_with_http_info(relay_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.delete_dhcp_relay_profile ...'
      end
      # verify the required parameter 'relay_profile_id' is set
      if @api_client.config.client_side_validation && relay_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.delete_dhcp_relay_profile"
      end
      # resource path
      local_var_path = '/dhcp/relay-profiles/{relay-profile-id}'.sub('{' + 'relay-profile-id' + '}', relay_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi#delete_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All DHCP Relay Profiles
    # Returns information about all dhcp relay profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayProfileListResult]
    def list_dhcp_relay_profiles(opts = {})
      data, _status_code, _headers = list_dhcp_relay_profiles_with_http_info(opts)
      data
    end

    # List All DHCP Relay Profiles
    # Returns information about all dhcp relay profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayProfileListResult, Fixnum, Hash)>] DhcpRelayProfileListResult data, response status code and response headers
    def list_dhcp_relay_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.list_dhcp_relay_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.list_dhcp_relay_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.list_dhcp_relay_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/relay-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi#list_dhcp_relay_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a DHCP Relay Profile
    # Returns information about the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayProfile]
    def read_dhcp_relay_profile(relay_profile_id, opts = {})
      data, _status_code, _headers = read_dhcp_relay_profile_with_http_info(relay_profile_id, opts)
      data
    end

    # Read a DHCP Relay Profile
    # Returns information about the specified dhcp relay profile.
    # @param relay_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayProfile, Fixnum, Hash)>] DhcpRelayProfile data, response status code and response headers
    def read_dhcp_relay_profile_with_http_info(relay_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.read_dhcp_relay_profile ...'
      end
      # verify the required parameter 'relay_profile_id' is set
      if @api_client.config.client_side_validation && relay_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.read_dhcp_relay_profile"
      end
      # resource path
      local_var_path = '/dhcp/relay-profiles/{relay-profile-id}'.sub('{' + 'relay-profile-id' + '}', relay_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi#read_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a DHCP Relay Profile
    # Modifies the specified dhcp relay profile. 
    # @param relay_profile_id 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayProfile]
    def update_dhcp_relay_profile(relay_profile_id, dhcp_relay_profile, opts = {})
      data, _status_code, _headers = update_dhcp_relay_profile_with_http_info(relay_profile_id, dhcp_relay_profile, opts)
      data
    end

    # Update a DHCP Relay Profile
    # Modifies the specified dhcp relay profile. 
    # @param relay_profile_id 
    # @param dhcp_relay_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayProfile, Fixnum, Hash)>] DhcpRelayProfile data, response status code and response headers
    def update_dhcp_relay_profile_with_http_info(relay_profile_id, dhcp_relay_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.update_dhcp_relay_profile ...'
      end
      # verify the required parameter 'relay_profile_id' is set
      if @api_client.config.client_side_validation && relay_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'relay_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.update_dhcp_relay_profile"
      end
      # verify the required parameter 'dhcp_relay_profile' is set
      if @api_client.config.client_side_validation && dhcp_relay_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_profile' when calling ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi.update_dhcp_relay_profile"
      end
      # resource path
      local_var_path = '/dhcp/relay-profiles/{relay-profile-id}'.sub('{' + 'relay-profile-id' + '}', relay_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesDhcpRelayProfilesApi#update_dhcp_relay_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
