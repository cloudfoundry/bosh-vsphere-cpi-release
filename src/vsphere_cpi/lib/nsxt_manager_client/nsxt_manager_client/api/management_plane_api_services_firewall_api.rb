=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiServicesFirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new object in the exclude list
    # Add a new object in the exclude list
    # @param resource_reference 
    # @param [Hash] opts the optional parameters
    # @return [ResourceReference]
    def add_member_add_member(resource_reference, opts = {})
      data, _status_code, _headers = add_member_add_member_with_http_info(resource_reference, opts)
      data
    end

    # Add a new object in the exclude list
    # Add a new object in the exclude list
    # @param resource_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceReference, Fixnum, Hash)>] ResourceReference data, response status code and response headers
    def add_member_add_member_with_http_info(resource_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.add_member_add_member ...'
      end
      # verify the required parameter 'resource_reference' is set
      if @api_client.config.client_side_validation && resource_reference.nil?
        fail ArgumentError, "Missing the required parameter 'resource_reference' when calling ManagementPlaneApiServicesFirewallApi.add_member_add_member"
      end
      # resource path
      local_var_path = '/firewall/excludelist?action=add_member'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(resource_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#add_member_add_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a Single Rule in a Section
    # Adds a new firewall rule in existing firewall section. Adding firewall rule to a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale content to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallRule]
    def add_rule_in_section(section_id, firewall_rule, opts = {})
      data, _status_code, _headers = add_rule_in_section_with_http_info(section_id, firewall_rule, opts)
      data
    end

    # Add a Single Rule in a Section
    # Adds a new firewall rule in existing firewall section. Adding firewall rule to a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale content to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallRule, Fixnum, Hash)>] FirewallRule data, response status code and response headers
    def add_rule_in_section_with_http_info(section_id, firewall_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.add_rule_in_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.add_rule_in_section"
      end
      # verify the required parameter 'firewall_rule' is set
      if @api_client.config.client_side_validation && firewall_rule.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_rule' when calling ManagementPlaneApiServicesFirewallApi.add_rule_in_section"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.add_rule_in_section, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#add_rule_in_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Multiple Rules in a Section
    # Create multiple firewall rules in existing firewall section bounded by limit of 1000 firewall rules per section. Adding multiple firewall rules in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallRuleList]
    def add_rules_in_section_create_multiple(section_id, firewall_rule_list, opts = {})
      data, _status_code, _headers = add_rules_in_section_create_multiple_with_http_info(section_id, firewall_rule_list, opts)
      data
    end

    # Add Multiple Rules in a Section
    # Create multiple firewall rules in existing firewall section bounded by limit of 1000 firewall rules per section. Adding multiple firewall rules in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallRuleList, Fixnum, Hash)>] FirewallRuleList data, response status code and response headers
    def add_rules_in_section_create_multiple_with_http_info(section_id, firewall_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.add_rules_in_section_create_multiple ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.add_rules_in_section_create_multiple"
      end
      # verify the required parameter 'firewall_rule_list' is set
      if @api_client.config.client_side_validation && firewall_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_rule_list' when calling ManagementPlaneApiServicesFirewallApi.add_rules_in_section_create_multiple"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.add_rules_in_section_create_multiple, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules?action=create_multiple'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#add_rules_in_section_create_multiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a New Empty Section
    # Creates new empty firewall section in the system. 
    # @param firewall_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallSection]
    def add_section(firewall_section, opts = {})
      data, _status_code, _headers = add_section_with_http_info(firewall_section, opts)
      data
    end

    # Create a New Empty Section
    # Creates new empty firewall section in the system. 
    # @param firewall_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallSection, Fixnum, Hash)>] FirewallSection data, response status code and response headers
    def add_section_with_http_info(firewall_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.add_section ...'
      end
      # verify the required parameter 'firewall_section' is set
      if @api_client.config.client_side_validation && firewall_section.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section' when calling ManagementPlaneApiServicesFirewallApi.add_section"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.add_section, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#add_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Section with Rules
    # Creates a new firewall section with rules. The limit on the number of rules is defined by maxItems in collection types for FirewallRule (FirewallRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/firewall/sections  To create rules, use: POST /api/v1/firewall/sections/&lt;section-id&gt;/rules 
    # @param firewall_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallSectionRuleList]
    def add_section_with_rules_create_with_rules(firewall_section_rule_list, opts = {})
      data, _status_code, _headers = add_section_with_rules_create_with_rules_with_http_info(firewall_section_rule_list, opts)
      data
    end

    # Create a Section with Rules
    # Creates a new firewall section with rules. The limit on the number of rules is defined by maxItems in collection types for FirewallRule (FirewallRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/firewall/sections  To create rules, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules 
    # @param firewall_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallSectionRuleList, Fixnum, Hash)>] FirewallSectionRuleList data, response status code and response headers
    def add_section_with_rules_create_with_rules_with_http_info(firewall_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.add_section_with_rules_create_with_rules ...'
      end
      # verify the required parameter 'firewall_section_rule_list' is set
      if @api_client.config.client_side_validation && firewall_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_rule_list' when calling ManagementPlaneApiServicesFirewallApi.add_section_with_rules_create_with_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.add_section_with_rules_create_with_rules, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections?action=create_with_rules'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#add_section_with_rules_create_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check if the object a member of the exclude list
    # Check if the object a member of the exclude list
    # @param object_id identifier of the object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :object_type Object type of an entity
    # @return [ResourceReference]
    def check_member_if_exists_check_if_exists(object_id, opts = {})
      data, _status_code, _headers = check_member_if_exists_check_if_exists_with_http_info(object_id, opts)
      data
    end

    # Check if the object a member of the exclude list
    # Check if the object a member of the exclude list
    # @param object_id identifier of the object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :object_type Object type of an entity
    # @return [Array<(ResourceReference, Fixnum, Hash)>] ResourceReference data, response status code and response headers
    def check_member_if_exists_check_if_exists_with_http_info(object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.check_member_if_exists_check_if_exists ...'
      end
      # verify the required parameter 'object_id' is set
      if @api_client.config.client_side_validation && object_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_id' when calling ManagementPlaneApiServicesFirewallApi.check_member_if_exists_check_if_exists"
      end
      if @api_client.config.client_side_validation && object_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "object_id" when calling ManagementPlaneApiServicesFirewallApi.check_member_if_exists_check_if_exists, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'object_type'] && !['NSGroup', 'LogicalPort', 'LogicalSwitch'].include?(opts[:'object_type'])
        fail ArgumentError, 'invalid value for "object_type", must be one of NSGroup, LogicalPort, LogicalSwitch'
      end
      # resource path
      local_var_path = '/firewall/excludelist?action=check_if_exists'

      # query parameters
      query_params = {}
      query_params[:'object_id'] = object_id
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'object_type'] = opts[:'object_type'] if !opts[:'object_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#check_member_if_exists_check_if_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a firewall profile.
    # Create a firewall profile with values provided. It creates profile based resource_type in the payload. 
    # @param base_firewall_profile 
    # @param [Hash] opts the optional parameters
    # @return [BaseFirewallProfile]
    def create_firewall_profile(base_firewall_profile, opts = {})
      data, _status_code, _headers = create_firewall_profile_with_http_info(base_firewall_profile, opts)
      data
    end

    # Create a firewall profile.
    # Create a firewall profile with values provided. It creates profile based resource_type in the payload. 
    # @param base_firewall_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseFirewallProfile, Fixnum, Hash)>] BaseFirewallProfile data, response status code and response headers
    def create_firewall_profile_with_http_info(base_firewall_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.create_firewall_profile ...'
      end
      # verify the required parameter 'base_firewall_profile' is set
      if @api_client.config.client_side_validation && base_firewall_profile.nil?
        fail ArgumentError, "Missing the required parameter 'base_firewall_profile' when calling ManagementPlaneApiServicesFirewallApi.create_firewall_profile"
      end
      # resource path
      local_var_path = '/firewall/profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_firewall_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseFirewallProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#create_firewall_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a firewall profile.
    # Deletes a firewall profile. 
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_firewall_profile(profile_id, opts = {})
      delete_firewall_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete a firewall profile.
    # Deletes a firewall profile. 
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.delete_firewall_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ManagementPlaneApiServicesFirewallApi.delete_firewall_profile"
      end
      # resource path
      local_var_path = '/firewall/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#delete_firewall_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Existing Rule
    # Delete existing firewall rule in a firewall section. Deleting firewall rule in a section modifies parent section and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rule(section_id, rule_id, opts = {})
      delete_rule_with_http_info(section_id, rule_id, opts)
      nil
    end

    # Delete an Existing Rule
    # Delete existing firewall rule in a firewall section. Deleting firewall rule in a section modifies parent section and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_rule_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.delete_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.delete_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.delete_rule"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Existing Section and Its Associated Rules
    # Removes firewall section from the system. Firewall section with rules can only be deleted by passing \"cascade=true\" parameter. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete of this object to all it&#39;s child objects. (default to false)
    # @return [nil]
    def delete_section(section_id, opts = {})
      delete_section_with_http_info(section_id, opts)
      nil
    end

    # Delete an Existing Section and Its Associated Rules
    # Removes firewall section from the system. Firewall section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete of this object to all it&#39;s child objects.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_section_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.delete_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.delete_section"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#delete_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable firewall on target resource in dfw context
    # Disable firewall on target resource in dfw context
    # @param context_type 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [TargetResourceStatus]
    def disable_firewall_on_target_resource_disable_firewall(context_type, id, opts = {})
      data, _status_code, _headers = disable_firewall_on_target_resource_disable_firewall_with_http_info(context_type, id, opts)
      data
    end

    # Disable firewall on target resource in dfw context
    # Disable firewall on target resource in dfw context
    # @param context_type 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetResourceStatus, Fixnum, Hash)>] TargetResourceStatus data, response status code and response headers
    def disable_firewall_on_target_resource_disable_firewall_with_http_info(context_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.disable_firewall_on_target_resource_disable_firewall ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesFirewallApi.disable_firewall_on_target_resource_disable_firewall"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiServicesFirewallApi.disable_firewall_on_target_resource_disable_firewall"
      end
      # resource path
      local_var_path = '/firewall/status/{context-type}/{id}?action=disable_firewall'.sub('{' + 'context-type' + '}', context_type.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TargetResourceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#disable_firewall_on_target_resource_disable_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable firewall on target resource in dfw context
    # Enable firewall on target resource in dfw context
    # @param context_type 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [TargetResourceStatus]
    def enable_firewall_on_target_resource_enable_firewall(context_type, id, opts = {})
      data, _status_code, _headers = enable_firewall_on_target_resource_enable_firewall_with_http_info(context_type, id, opts)
      data
    end

    # Enable firewall on target resource in dfw context
    # Enable firewall on target resource in dfw context
    # @param context_type 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetResourceStatus, Fixnum, Hash)>] TargetResourceStatus data, response status code and response headers
    def enable_firewall_on_target_resource_enable_firewall_with_http_info(context_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.enable_firewall_on_target_resource_enable_firewall ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesFirewallApi.enable_firewall_on_target_resource_enable_firewall"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiServicesFirewallApi.enable_firewall_on_target_resource_enable_firewall"
      end
      # resource path
      local_var_path = '/firewall/status/{context-type}/{id}?action=enable_firewall'.sub('{' + 'context-type' + '}', context_type.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TargetResourceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#enable_firewall_on_target_resource_enable_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of entities in exclude list
    # Get list of entities in exclude list
    # @param [Hash] opts the optional parameters
    # @return [ExcludeList]
    def get_exclude_list(opts = {})
      data, _status_code, _headers = get_exclude_list_with_http_info(opts)
      data
    end

    # Get list of entities in exclude list
    # Get list of entities in exclude list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExcludeList, Fixnum, Hash)>] ExcludeList data, response status code and response headers
    def get_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_exclude_list ...'
      end
      # resource path
      local_var_path = '/firewall/excludelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all firewall session timer profiles.
    # Return firewall session timer profile. 
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [BaseFirewallProfile]
    def get_firewall_profile(profile_id, opts = {})
      data, _status_code, _headers = get_firewall_profile_with_http_info(profile_id, opts)
      data
    end

    # Get all firewall session timer profiles.
    # Return firewall session timer profile. 
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseFirewallProfile, Fixnum, Hash)>] BaseFirewallProfile data, response status code and response headers
    def get_firewall_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_firewall_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_profile"
      end
      # resource path
      local_var_path = '/firewall/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseFirewallProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_firewall_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall section level statistics section
    # Get aggregated statistics for all rules for a given firewall section. The API only supports access to cached (source=cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [FirewallStatsList]
    def get_firewall_section_stats(section_id, opts = {})
      data, _status_code, _headers = get_firewall_section_stats_with_http_info(section_id, opts)
      data
    end

    # Get Firewall section level statistics section
    # Get aggregated statistics for all rules for a given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(FirewallStatsList, Fixnum, Hash)>] FirewallStatsList data, response status code and response headers
    def get_firewall_section_stats_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_firewall_section_stats ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_section_stats"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules/stats'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallStatsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_firewall_section_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall rule level statistics
    # Get aggregated statistics for a rule for given firewall section. The API only supports access to cached (source=cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [FirewallStats]
    def get_firewall_stats(section_id, rule_id, opts = {})
      data, _status_code, _headers = get_firewall_stats_with_http_info(section_id, rule_id, opts)
      data
    end

    # Get Firewall rule level statistics
    # Get aggregated statistics for a rule for given firewall section. The API only supports access to cached (source&#x3D;cached) statistical data collected offline in the system. Data includes total number of packets, bytes, sessions counters and popularity index for a firewall rule and overall session count, max session count and max popularity index for all firewall rules on transport nodes or edge nodes. Aggregated statistics like maximum popularity index, maximum session count and total session count are computed with lower frequency compared to individual generic rule statistics, hence they may have a computation delay up to 15 minutes to reflect in response to this API. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(FirewallStats, Fixnum, Hash)>] FirewallStats data, response status code and response headers
    def get_firewall_stats_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_firewall_stats ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_stats"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_stats"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules/{rule-id}/stats'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_firewall_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get firewall global status for dfw context
    # Get firewall global status for dfw context
    # @param context_type 
    # @param [Hash] opts the optional parameters
    # @return [FirewallStatus]
    def get_firewall_status(context_type, opts = {})
      data, _status_code, _headers = get_firewall_status_with_http_info(context_type, opts)
      data
    end

    # Get firewall global status for dfw context
    # Get firewall global status for dfw context
    # @param context_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallStatus, Fixnum, Hash)>] FirewallStatus data, response status code and response headers
    def get_firewall_status_with_http_info(context_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_firewall_status ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_status"
      end
      # resource path
      local_var_path = '/firewall/status/{context-type}'.sub('{' + 'context-type' + '}', context_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_firewall_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get firewall status for target resource in dfw context
    # Get firewall status for target resource in dfw context
    # @param context_type 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [TargetResourceStatus]
    def get_firewall_status_on_target_resource(context_type, id, opts = {})
      data, _status_code, _headers = get_firewall_status_on_target_resource_with_http_info(context_type, id, opts)
      data
    end

    # Get firewall status for target resource in dfw context
    # Get firewall status for target resource in dfw context
    # @param context_type 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetResourceStatus, Fixnum, Hash)>] TargetResourceStatus data, response status code and response headers
    def get_firewall_status_on_target_resource_with_http_info(context_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_firewall_status_on_target_resource ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_status_on_target_resource"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiServicesFirewallApi.get_firewall_status_on_target_resource"
      end
      # resource path
      local_var_path = '/firewall/status/{context-type}/{id}'.sub('{' + 'context-type' + '}', context_type.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TargetResourceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_firewall_status_on_target_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Existing Rule
    # Return existing firewall rule information in a firewall section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [FirewallRule]
    def get_rule(section_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(section_id, rule_id, opts)
      data
    end

    # Read an Existing Rule
    # Return existing firewall rule information in a firewall section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallRule, Fixnum, Hash)>] FirewallRule data, response status code and response headers
    def get_rule_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.get_rule"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a Firewall Rule
    # Return realized state information of a firewall rule. Returned response is same as rule's section realization state response. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [RuleState]
    def get_rule_state(rule_id, opts = {})
      data, _status_code, _headers = get_rule_state_with_http_info(rule_id, opts)
      data
    end

    # Get the Realized State of a Firewall Rule
    # Return realized state information of a firewall rule. Returned response is same as rule&#39;s section realization state response. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(RuleState, Fixnum, Hash)>] RuleState data, response status code and response headers
    def get_rule_state_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_rule_state ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.get_rule_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiServicesFirewallApi.get_rule_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/firewall/rules/{rule-id}/state'.sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_rule_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All the Rules for a Section
    # Return all firewall rule(s) information for a given firewall section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :context_profiles Limits results to sections having rules with specific Context Profiles.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :deep_search Toggle to search with direct or indirect references. (default to false)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :extended_sources Limits results to sections having rules with specific Extended Sources.
    # @option opts [String] :filter_type Filter type (default to FILTER)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :search_invalid_references Return invalid references in results. (default to false)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [FirewallRuleListResult]
    def get_rules(section_id, opts = {})
      data, _status_code, _headers = get_rules_with_http_info(section_id, opts)
      data
    end

    # Get All the Rules for a Section
    # Return all firewall rule(s) information for a given firewall section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :context_profiles Limits results to sections having rules with specific Context Profiles.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :deep_search Toggle to search with direct or indirect references.
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :extended_sources Limits results to sections having rules with specific Extended Sources.
    # @option opts [String] :filter_type Filter type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :search_invalid_references Return invalid references in results.
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [Array<(FirewallRuleListResult, Fixnum, Hash)>] FirewallRuleListResult data, response status code and response headers
    def get_rules_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_rules"
      end
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !['FILTER', 'SEARCH'].include?(opts[:'filter_type'])
        fail ArgumentError, 'invalid value for "filter_type", must be one of FILTER, SEARCH'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesFirewallApi.get_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesFirewallApi.get_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applied_tos'] = opts[:'applied_tos'] if !opts[:'applied_tos'].nil?
      query_params[:'context_profiles'] = opts[:'context_profiles'] if !opts[:'context_profiles'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'deep_search'] = opts[:'deep_search'] if !opts[:'deep_search'].nil?
      query_params[:'destinations'] = opts[:'destinations'] if !opts[:'destinations'].nil?
      query_params[:'extended_sources'] = opts[:'extended_sources'] if !opts[:'extended_sources'].nil?
      query_params[:'filter_type'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'search_invalid_references'] = opts[:'search_invalid_references'] if !opts[:'search_invalid_references'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sources'] = opts[:'sources'] if !opts[:'sources'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Existing Section
    # Returns information about firewall section for the identifier. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [FirewallSection]
    def get_section(section_id, opts = {})
      data, _status_code, _headers = get_section_with_http_info(section_id, opts)
      data
    end

    # Get an Existing Section
    # Returns information about firewall section for the identifier. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallSection, Fixnum, Hash)>] FirewallSection data, response status code and response headers
    def get_section_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_section"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a Firewall Section
    # Return realized state information of a firewall section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [FirewallSectionState]
    def get_section_state(section_id, opts = {})
      data, _status_code, _headers = get_section_state_with_http_info(section_id, opts)
      data
    end

    # Get the Realized State of a Firewall Section
    # Return realized state information of a firewall section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(FirewallSectionState, Fixnum, Hash)>] FirewallSectionState data, response status code and response headers
    def get_section_state_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_section_state ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_section_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiServicesFirewallApi.get_section_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/firewall/sections/{section-id}/state'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_section_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Existing Section, Including Rules
    # Returns firewall section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read firewall rules, use: GET /api/v1/firewall/sections/&lt;section-id&gt;/rules with the appropriate page_size. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [FirewallSectionRuleList]
    def get_section_with_rules_list_with_rules(section_id, opts = {})
      data, _status_code, _headers = get_section_with_rules_list_with_rules_with_http_info(section_id, opts)
      data
    end

    # Get an Existing Section, Including Rules
    # Returns firewall section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read firewall rules, use: GET /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallSectionRuleList, Fixnum, Hash)>] FirewallSectionRuleList data, response status code and response headers
    def get_section_with_rules_list_with_rules_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_section_with_rules_list_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.get_section_with_rules_list_with_rules"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}?action=list_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_section_with_rules_list_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of sections in the firewall configuration.
    # List the summary of number of sections and number of rules for each firewall category (L2DFW, L3DFW). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [FirewallSectionsSummaryList]
    def get_sections_summary(opts = {})
      data, _status_code, _headers = get_sections_summary_with_http_info(opts)
      data
    end

    # Get the summary of sections in the firewall configuration.
    # List the summary of number of sections and number of rules for each firewall category (L2DFW, L3DFW). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(FirewallSectionsSummaryList, Fixnum, Hash)>] FirewallSectionsSummaryList data, response status code and response headers
    def get_sections_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.get_sections_summary ...'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/firewall/sections/summary'

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionsSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#get_sections_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get firewall profiles available.
    # List all the firewall profiles available by requested resource_type. 
    # @param resource_type Profile resource type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FirewallProfileListResult]
    def list_firewall_profiles(resource_type, opts = {})
      data, _status_code, _headers = list_firewall_profiles_with_http_info(resource_type, opts)
      data
    end

    # Get firewall profiles available.
    # List all the firewall profiles available by requested resource_type. 
    # @param resource_type Profile resource type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FirewallProfileListResult, Fixnum, Hash)>] FirewallProfileListResult data, response status code and response headers
    def list_firewall_profiles_with_http_info(resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.list_firewall_profiles ...'
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling ManagementPlaneApiServicesFirewallApi.list_firewall_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesFirewallApi.list_firewall_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesFirewallApi.list_firewall_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/firewall/profiles'

      # query parameters
      query_params = {}
      query_params[:'resource_type'] = resource_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#list_firewall_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall status for supported contexts
    # List all firewall status for supported contexts
    # @param [Hash] opts the optional parameters
    # @return [FirewallStatusListResult]
    def list_firewall_status(opts = {})
      data, _status_code, _headers = list_firewall_status_with_http_info(opts)
      data
    end

    # List all firewall status for supported contexts
    # List all firewall status for supported contexts
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallStatusListResult, Fixnum, Hash)>] FirewallStatusListResult data, response status code and response headers
    def list_firewall_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.list_firewall_status ...'
      end
      # resource path
      local_var_path = '/firewall/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#list_firewall_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All Firewall Sections
    # List all firewall section in paginated form. A default page size is limited to 1000 firewall sections. By default list of section is filtered by LAYER3 type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :context_profiles Limits results to sections having rules with specific Context Profiles.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :deep_search Toggle to search with direct or indirect references. (default to false)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :enforced_on Type of attachment for logical port; for query only.
    # @option opts [String] :exclude_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :extended_sources Limits results to sections having rules with specific Extended Sources.
    # @option opts [String] :filter_type Filter type (default to FILTER)
    # @option opts [String] :include_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :locked Limit results to sections which are locked/unlocked
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :search_invalid_references Return invalid references in results. (default to false)
    # @option opts [String] :search_scope Limit result to sections of a specific enforcement point
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :type Section Type (default to LAYER3)
    # @return [FirewallSectionListResult]
    def list_sections(opts = {})
      data, _status_code, _headers = list_sections_with_http_info(opts)
      data
    end

    # List All Firewall Sections
    # List all firewall section in paginated form. A default page size is limited to 1000 firewall sections. By default list of section is filtered by LAYER3 type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :context_profiles Limits results to sections having rules with specific Context Profiles.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :deep_search Toggle to search with direct or indirect references.
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :enforced_on Type of attachment for logical port; for query only.
    # @option opts [String] :exclude_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :extended_sources Limits results to sections having rules with specific Extended Sources.
    # @option opts [String] :filter_type Filter type
    # @option opts [String] :include_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [BOOLEAN] :locked Limit results to sections which are locked/unlocked
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :search_invalid_references Return invalid references in results.
    # @option opts [String] :search_scope Limit result to sections of a specific enforcement point
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :type Section Type
    # @return [Array<(FirewallSectionListResult, Fixnum, Hash)>] FirewallSectionListResult data, response status code and response headers
    def list_sections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.list_sections ...'
      end
      if @api_client.config.client_side_validation && opts[:'enforced_on'] && !['VIF', 'LOGICALROUTER', 'BRIDGEENDPOINT', 'DHCP_SERVICE', 'METADATA_PROXY', 'L2VPN_SESSION', 'NONE'].include?(opts[:'enforced_on'])
        fail ArgumentError, 'invalid value for "enforced_on", must be one of VIF, LOGICALROUTER, BRIDGEENDPOINT, DHCP_SERVICE, METADATA_PROXY, L2VPN_SESSION, NONE'
      end
      if @api_client.config.client_side_validation && opts[:'exclude_applied_to_type'] && !['NSGroup', 'LogicalSwitch', 'LogicalRouter', 'LogicalPort'].include?(opts[:'exclude_applied_to_type'])
        fail ArgumentError, 'invalid value for "exclude_applied_to_type", must be one of NSGroup, LogicalSwitch, LogicalRouter, LogicalPort'
      end
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !['FILTER', 'SEARCH'].include?(opts[:'filter_type'])
        fail ArgumentError, 'invalid value for "filter_type", must be one of FILTER, SEARCH'
      end
      if @api_client.config.client_side_validation && opts[:'include_applied_to_type'] && !['NSGroup', 'LogicalSwitch', 'LogicalRouter', 'LogicalPort'].include?(opts[:'include_applied_to_type'])
        fail ArgumentError, 'invalid value for "include_applied_to_type", must be one of NSGroup, LogicalSwitch, LogicalRouter, LogicalPort'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesFirewallApi.list_sections, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesFirewallApi.list_sections, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['LAYER2', 'LAYER3'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of LAYER2, LAYER3'
      end
      # resource path
      local_var_path = '/firewall/sections'

      # query parameters
      query_params = {}
      query_params[:'applied_tos'] = opts[:'applied_tos'] if !opts[:'applied_tos'].nil?
      query_params[:'context_profiles'] = opts[:'context_profiles'] if !opts[:'context_profiles'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'deep_search'] = opts[:'deep_search'] if !opts[:'deep_search'].nil?
      query_params[:'destinations'] = opts[:'destinations'] if !opts[:'destinations'].nil?
      query_params[:'enforced_on'] = opts[:'enforced_on'] if !opts[:'enforced_on'].nil?
      query_params[:'exclude_applied_to_type'] = opts[:'exclude_applied_to_type'] if !opts[:'exclude_applied_to_type'].nil?
      query_params[:'extended_sources'] = opts[:'extended_sources'] if !opts[:'extended_sources'].nil?
      query_params[:'filter_type'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'include_applied_to_type'] = opts[:'include_applied_to_type'] if !opts[:'include_applied_to_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'locked'] = opts[:'locked'] if !opts[:'locked'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'search_invalid_references'] = opts[:'search_invalid_references'] if !opts[:'search_invalid_references'].nil?
      query_params[:'search_scope'] = opts[:'search_scope'] if !opts[:'search_scope'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sources'] = opts[:'sources'] if !opts[:'sources'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#list_sections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lock a section
    # Lock a section 
    # @param section_id 
    # @param firewall_section_lock 
    # @param [Hash] opts the optional parameters
    # @return [FirewallSection]
    def lock_section_lock(section_id, firewall_section_lock, opts = {})
      data, _status_code, _headers = lock_section_lock_with_http_info(section_id, firewall_section_lock, opts)
      data
    end

    # Lock a section
    # Lock a section 
    # @param section_id 
    # @param firewall_section_lock 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallSection, Fixnum, Hash)>] FirewallSection data, response status code and response headers
    def lock_section_lock_with_http_info(section_id, firewall_section_lock, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.lock_section_lock ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.lock_section_lock"
      end
      # verify the required parameter 'firewall_section_lock' is set
      if @api_client.config.client_side_validation && firewall_section_lock.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_lock' when calling ManagementPlaneApiServicesFirewallApi.lock_section_lock"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}?action=lock'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section_lock)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#lock_section_lock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Existing Rule
    # Return existing firewall rule information. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [FirewallRule]
    def read_firewall_rule(rule_id, opts = {})
      data, _status_code, _headers = read_firewall_rule_with_http_info(rule_id, opts)
      data
    end

    # Read an Existing Rule
    # Return existing firewall rule information. 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallRule, Fixnum, Hash)>] FirewallRule data, response status code and response headers
    def read_firewall_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.read_firewall_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.read_firewall_rule"
      end
      # resource path
      local_var_path = '/firewall/rules/{rule-id}'.sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#read_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove an existing object from the exclude list
    # Remove an existing object from the exclude list
    # @param object_id identifier of the object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :object_type Object type of an entity
    # @return [ResourceReference]
    def remove_member_remove_member(object_id, opts = {})
      data, _status_code, _headers = remove_member_remove_member_with_http_info(object_id, opts)
      data
    end

    # Remove an existing object from the exclude list
    # Remove an existing object from the exclude list
    # @param object_id identifier of the object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :object_type Object type of an entity
    # @return [Array<(ResourceReference, Fixnum, Hash)>] ResourceReference data, response status code and response headers
    def remove_member_remove_member_with_http_info(object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.remove_member_remove_member ...'
      end
      # verify the required parameter 'object_id' is set
      if @api_client.config.client_side_validation && object_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_id' when calling ManagementPlaneApiServicesFirewallApi.remove_member_remove_member"
      end
      if @api_client.config.client_side_validation && object_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "object_id" when calling ManagementPlaneApiServicesFirewallApi.remove_member_remove_member, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'object_type'] && !['NSGroup', 'LogicalPort', 'LogicalSwitch'].include?(opts[:'object_type'])
        fail ArgumentError, 'invalid value for "object_type", must be one of NSGroup, LogicalPort, LogicalSwitch'
      end
      # resource path
      local_var_path = '/firewall/excludelist?action=remove_member'

      # query parameters
      query_params = {}
      query_params[:'object_id'] = object_id
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'object_type'] = opts[:'object_type'] if !opts[:'object_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#remove_member_remove_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: L3DFW i.e. for all layer3 firewall (transport nodes only) rules or L3EDGE i.e. for all layer3 edge firewall (edge nodes only) rules or L3BRIDGEPORT i.e. for all layer3 bridge port firewall (bridge ports only) rules. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_firewall_rule_stats_reset(category, opts = {})
      reset_firewall_rule_stats_reset_with_http_info(category, opts)
      nil
    end

    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: L3DFW i.e. for all layer3 firewall (transport nodes only) rules or L3EDGE i.e. for all layer3 edge firewall (edge nodes only) rules or L3BRIDGEPORT i.e. for all layer3 bridge port firewall (bridge ports only) rules. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_firewall_rule_stats_reset_with_http_info(category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.reset_firewall_rule_stats_reset ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling ManagementPlaneApiServicesFirewallApi.reset_firewall_rule_stats_reset"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['L3DFW', 'L3EDGE', 'L3BRIDGEPORT'].include?(category)
        fail ArgumentError, "invalid value for 'category', must be one of L3DFW, L3EDGE, L3BRIDGEPORT"
      end
      # resource path
      local_var_path = '/firewall/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = category

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#reset_firewall_rule_stats_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Rule and Reorder the Rule
    # Modifies existing firewall rule along with relative position among other firewall rules inside a firewall section. Revising firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param rule_id 
    # @param firewall_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallRule]
    def revise_rule_revise(section_id, rule_id, firewall_rule, opts = {})
      data, _status_code, _headers = revise_rule_revise_with_http_info(section_id, rule_id, firewall_rule, opts)
      data
    end

    # Update an Existing Rule and Reorder the Rule
    # Modifies existing firewall rule along with relative position among other firewall rules inside a firewall section. Revising firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param rule_id 
    # @param firewall_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallRule, Fixnum, Hash)>] FirewallRule data, response status code and response headers
    def revise_rule_revise_with_http_info(section_id, rule_id, firewall_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.revise_rule_revise ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.revise_rule_revise"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.revise_rule_revise"
      end
      # verify the required parameter 'firewall_rule' is set
      if @api_client.config.client_side_validation && firewall_rule.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_rule' when calling ManagementPlaneApiServicesFirewallApi.revise_rule_revise"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.revise_rule_revise, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules/{rule-id}?action=revise'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#revise_rule_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section, Including Its Position
    # Modifies an existing firewall section along with its relative position among other firewall sections in the system. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallSection]
    def revise_section_revise(section_id, firewall_section, opts = {})
      data, _status_code, _headers = revise_section_revise_with_http_info(section_id, firewall_section, opts)
      data
    end

    # Update an Existing Section, Including Its Position
    # Modifies an existing firewall section along with its relative position among other firewall sections in the system. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallSection, Fixnum, Hash)>] FirewallSection data, response status code and response headers
    def revise_section_revise_with_http_info(section_id, firewall_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.revise_section_revise ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.revise_section_revise"
      end
      # verify the required parameter 'firewall_section' is set
      if @api_client.config.client_side_validation && firewall_section.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section' when calling ManagementPlaneApiServicesFirewallApi.revise_section_revise"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.revise_section_revise, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}?action=revise'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#revise_section_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section with Rules
    # Modifies an existing firewall section along with its relative position among other firewall sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/firewall/sections/&lt;section-id&gt;?action=revise  To modify rules, use: PUT /api/v1/firewall/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [FirewallSectionRuleList]
    def revise_section_with_rules_revise_with_rules(section_id, firewall_section_rule_list, opts = {})
      data, _status_code, _headers = revise_section_with_rules_revise_with_rules_with_http_info(section_id, firewall_section_rule_list, opts)
      data
    end

    # Update an Existing Section with Rules
    # Modifies an existing firewall section along with its relative position among other firewall sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(FirewallSectionRuleList, Fixnum, Hash)>] FirewallSectionRuleList data, response status code and response headers
    def revise_section_with_rules_revise_with_rules_with_http_info(section_id, firewall_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.revise_section_with_rules_revise_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.revise_section_with_rules_revise_with_rules"
      end
      # verify the required parameter 'firewall_section_rule_list' is set
      if @api_client.config.client_side_validation && firewall_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_rule_list' when calling ManagementPlaneApiServicesFirewallApi.revise_section_with_rules_revise_with_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesFirewallApi.revise_section_with_rules_revise_with_rules, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}?action=revise_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#revise_section_with_rules_revise_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unlock a section
    # Unlock a section 
    # @param section_id 
    # @param firewall_section_lock 
    # @param [Hash] opts the optional parameters
    # @return [FirewallSection]
    def unlock_section_unlock(section_id, firewall_section_lock, opts = {})
      data, _status_code, _headers = unlock_section_unlock_with_http_info(section_id, firewall_section_lock, opts)
      data
    end

    # Unlock a section
    # Unlock a section 
    # @param section_id 
    # @param firewall_section_lock 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallSection, Fixnum, Hash)>] FirewallSection data, response status code and response headers
    def unlock_section_unlock_with_http_info(section_id, firewall_section_lock, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.unlock_section_unlock ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.unlock_section_unlock"
      end
      # verify the required parameter 'firewall_section_lock' is set
      if @api_client.config.client_side_validation && firewall_section_lock.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_lock' when calling ManagementPlaneApiServicesFirewallApi.unlock_section_unlock"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}?action=unlock'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section_lock)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#unlock_section_unlock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify exclude list
    # Modify exclude list
    # @param exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [ExcludeList]
    def update_exclude_list(exclude_list, opts = {})
      data, _status_code, _headers = update_exclude_list_with_http_info(exclude_list, opts)
      data
    end

    # Modify exclude list
    # Modify exclude list
    # @param exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExcludeList, Fixnum, Hash)>] ExcludeList data, response status code and response headers
    def update_exclude_list_with_http_info(exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.update_exclude_list ...'
      end
      # verify the required parameter 'exclude_list' is set
      if @api_client.config.client_side_validation && exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'exclude_list' when calling ManagementPlaneApiServicesFirewallApi.update_exclude_list"
      end
      # resource path
      local_var_path = '/firewall/excludelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#update_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a firewall profile.
    # Update user configurable properties of firewall profile. 
    # @param profile_id 
    # @param base_firewall_profile 
    # @param [Hash] opts the optional parameters
    # @return [BaseFirewallProfile]
    def update_firewall_profile(profile_id, base_firewall_profile, opts = {})
      data, _status_code, _headers = update_firewall_profile_with_http_info(profile_id, base_firewall_profile, opts)
      data
    end

    # Update a firewall profile.
    # Update user configurable properties of firewall profile. 
    # @param profile_id 
    # @param base_firewall_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseFirewallProfile, Fixnum, Hash)>] BaseFirewallProfile data, response status code and response headers
    def update_firewall_profile_with_http_info(profile_id, base_firewall_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.update_firewall_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ManagementPlaneApiServicesFirewallApi.update_firewall_profile"
      end
      # verify the required parameter 'base_firewall_profile' is set
      if @api_client.config.client_side_validation && base_firewall_profile.nil?
        fail ArgumentError, "Missing the required parameter 'base_firewall_profile' when calling ManagementPlaneApiServicesFirewallApi.update_firewall_profile"
      end
      # resource path
      local_var_path = '/firewall/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(base_firewall_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseFirewallProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#update_firewall_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update global firewall status for dfw context
    # Update global firewall status for dfw context
    # @param context_type 
    # @param firewall_status 
    # @param [Hash] opts the optional parameters
    # @return [FirewallStatus]
    def update_firewall_status(context_type, firewall_status, opts = {})
      data, _status_code, _headers = update_firewall_status_with_http_info(context_type, firewall_status, opts)
      data
    end

    # Update global firewall status for dfw context
    # Update global firewall status for dfw context
    # @param context_type 
    # @param firewall_status 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallStatus, Fixnum, Hash)>] FirewallStatus data, response status code and response headers
    def update_firewall_status_with_http_info(context_type, firewall_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.update_firewall_status ...'
      end
      # verify the required parameter 'context_type' is set
      if @api_client.config.client_side_validation && context_type.nil?
        fail ArgumentError, "Missing the required parameter 'context_type' when calling ManagementPlaneApiServicesFirewallApi.update_firewall_status"
      end
      # verify the required parameter 'firewall_status' is set
      if @api_client.config.client_side_validation && firewall_status.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_status' when calling ManagementPlaneApiServicesFirewallApi.update_firewall_status"
      end
      # resource path
      local_var_path = '/firewall/status/{context-type}'.sub('{' + 'context-type' + '}', context_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_status)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#update_firewall_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Rule
    # Modifies existing firewall rule in a firewall section. Updating firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param rule_id 
    # @param firewall_rule 
    # @param [Hash] opts the optional parameters
    # @return [FirewallRule]
    def update_rule(section_id, rule_id, firewall_rule, opts = {})
      data, _status_code, _headers = update_rule_with_http_info(section_id, rule_id, firewall_rule, opts)
      data
    end

    # Update an Existing Rule
    # Modifies existing firewall rule in a firewall section. Updating firewall rule in a section modifies parent section entity and simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param rule_id 
    # @param firewall_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallRule, Fixnum, Hash)>] FirewallRule data, response status code and response headers
    def update_rule_with_http_info(section_id, rule_id, firewall_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.update_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.update_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesFirewallApi.update_rule"
      end
      # verify the required parameter 'firewall_rule' is set
      if @api_client.config.client_side_validation && firewall_rule.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_rule' when calling ManagementPlaneApiServicesFirewallApi.update_rule"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section
    # Modifies the specified section, but does not modify the section's associated rules. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section 
    # @param [Hash] opts the optional parameters
    # @return [FirewallSection]
    def update_section(section_id, firewall_section, opts = {})
      data, _status_code, _headers = update_section_with_http_info(section_id, firewall_section, opts)
      data
    end

    # Update an Existing Section
    # Modifies the specified section, but does not modify the section&#39;s associated rules. Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallSection, Fixnum, Hash)>] FirewallSection data, response status code and response headers
    def update_section_with_http_info(section_id, firewall_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.update_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.update_section"
      end
      # verify the required parameter 'firewall_section' is set
      if @api_client.config.client_side_validation && firewall_section.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section' when calling ManagementPlaneApiServicesFirewallApi.update_section"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#update_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section, Including Its Rules
    # Modifies existing firewall section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/firewall/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [FirewallSectionRuleList]
    def update_section_with_rules_update_with_rules(section_id, firewall_section_rule_list, opts = {})
      data, _status_code, _headers = update_section_with_rules_update_with_rules_with_http_info(section_id, firewall_section_rule_list, opts)
      data
    end

    # Update an Existing Section, Including Its Rules
    # Modifies existing firewall section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/firewall/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt;  Simultaneous update (modify) operations on same section are not allowed to prevent overwriting stale contents to firewall section. If a concurrent update is performed, HTTP response code 409 will be returned to the client operating on stale data. That client should retrieve the firewall section again and re-apply its update. 
    # @param section_id 
    # @param firewall_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirewallSectionRuleList, Fixnum, Hash)>] FirewallSectionRuleList data, response status code and response headers
    def update_section_with_rules_update_with_rules_with_http_info(section_id, firewall_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesFirewallApi.update_section_with_rules_update_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesFirewallApi.update_section_with_rules_update_with_rules"
      end
      # verify the required parameter 'firewall_section_rule_list' is set
      if @api_client.config.client_side_validation && firewall_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_rule_list' when calling ManagementPlaneApiServicesFirewallApi.update_section_with_rules_update_with_rules"
      end
      # resource path
      local_var_path = '/firewall/sections/{section-id}?action=update_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(firewall_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirewallSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesFirewallApi#update_section_with_rules_update_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
