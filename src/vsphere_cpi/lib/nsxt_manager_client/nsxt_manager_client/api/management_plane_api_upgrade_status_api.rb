=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiUpgradeStatusApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get functional state of the upgrade coordinator
    # Get the functional state of the upgrade coordinator. 
    # @param [Hash] opts the optional parameters
    # @return [UcFunctionalState]
    def get_uc_functional_state(opts = {})
      data, _status_code, _headers = get_uc_functional_state_with_http_info(opts)
      data
    end

    # Get functional state of the upgrade coordinator
    # Get the functional state of the upgrade coordinator. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UcFunctionalState, Fixnum, Hash)>] UcFunctionalState data, response status code and response headers
    def get_uc_functional_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeStatusApi.get_uc_functional_state ...'
      end
      # resource path
      local_var_path = '/upgrade/functional-state'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UcFunctionalState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeStatusApi#get_uc_functional_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade-coordinator upgrade status
    # Get upgrade-coordinator upgrade status 
    # @param [Hash] opts the optional parameters
    # @return [UcUpgradeStatus]
    def get_uc_upgrade_status(opts = {})
      data, _status_code, _headers = get_uc_upgrade_status_with_http_info(opts)
      data
    end

    # Get upgrade-coordinator upgrade status
    # Get upgrade-coordinator upgrade status 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UcUpgradeStatus, Fixnum, Hash)>] UcUpgradeStatus data, response status code and response headers
    def get_uc_upgrade_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeStatusApi.get_uc_upgrade_status ...'
      end
      # resource path
      local_var_path = '/upgrade/uc-upgrade-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UcUpgradeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeStatusApi#get_uc_upgrade_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade status summary
    # Get upgrade status summary
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :selection_status Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units (default to ALL)
    # @option opts [BOOLEAN] :show_history Get upgrade activity for a given component
    # @return [UpgradeStatus]
    def get_upgrade_status_summary(opts = {})
      data, _status_code, _headers = get_upgrade_status_summary_with_http_info(opts)
      data
    end

    # Get upgrade status summary
    # Get upgrade status summary
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade units to be filtered
    # @option opts [String] :selection_status Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units
    # @option opts [BOOLEAN] :show_history Get upgrade activity for a given component
    # @return [Array<(UpgradeStatus, Fixnum, Hash)>] UpgradeStatus data, response status code and response headers
    def get_upgrade_status_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeStatusApi.get_upgrade_status_summary ...'
      end
      if @api_client.config.client_side_validation && opts[:'selection_status'] && !['SELECTED', 'DESELECTED', 'ALL'].include?(opts[:'selection_status'])
        fail ArgumentError, 'invalid value for "selection_status", must be one of SELECTED, DESELECTED, ALL'
      end
      # resource path
      local_var_path = '/upgrade/status-summary'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'selection_status'] = opts[:'selection_status'] if !opts[:'selection_status'].nil?
      query_params[:'show_history'] = opts[:'show_history'] if !opts[:'show_history'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeStatusApi#get_upgrade_status_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade summary
    # Get upgrade summary
    # @param [Hash] opts the optional parameters
    # @return [UpgradeSummary]
    def get_upgrade_summary(opts = {})
      data, _status_code, _headers = get_upgrade_summary_with_http_info(opts)
      data
    end

    # Get upgrade summary
    # Get upgrade summary
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeSummary, Fixnum, Hash)>] UpgradeSummary data, response status code and response headers
    def get_upgrade_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeStatusApi.get_upgrade_summary ...'
      end
      # resource path
      local_var_path = '/upgrade/summary'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeStatusApi#get_upgrade_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
