=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiServicesDhcpApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an ip pool for a DHCP server
    # Create an ip pool for a local DHCP server
    # @param server_id 
    # @param dhcp_ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [DhcpIpPool]
    def create_dhcp_ip_pool(server_id, dhcp_ip_pool, opts = {})
      data, _status_code, _headers = create_dhcp_ip_pool_with_http_info(server_id, dhcp_ip_pool, opts)
      data
    end

    # Create an ip pool for a DHCP server
    # Create an ip pool for a local DHCP server
    # @param server_id 
    # @param dhcp_ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpIpPool, Fixnum, Hash)>] DhcpIpPool data, response status code and response headers
    def create_dhcp_ip_pool_with_http_info(server_id, dhcp_ip_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.create_dhcp_ip_pool ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.create_dhcp_ip_pool"
      end
      # verify the required parameter 'dhcp_ip_pool' is set
      if @api_client.config.client_side_validation && dhcp_ip_pool.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_ip_pool' when calling ManagementPlaneApiServicesDhcpApi.create_dhcp_ip_pool"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/ip-pools'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_ip_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpIpPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#create_dhcp_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a DHCP server profile
    # Create a DHCP server profile. If no edge member is specified, edge members to run the dhcp servers will be auto-allocated from the edge cluster. 
    # @param dhcp_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpProfile]
    def create_dhcp_profile(dhcp_profile, opts = {})
      data, _status_code, _headers = create_dhcp_profile_with_http_info(dhcp_profile, opts)
      data
    end

    # Create a DHCP server profile
    # Create a DHCP server profile. If no edge member is specified, edge members to run the dhcp servers will be auto-allocated from the edge cluster. 
    # @param dhcp_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpProfile, Fixnum, Hash)>] DhcpProfile data, response status code and response headers
    def create_dhcp_profile_with_http_info(dhcp_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.create_dhcp_profile ...'
      end
      # verify the required parameter 'dhcp_profile' is set
      if @api_client.config.client_side_validation && dhcp_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_profile' when calling ManagementPlaneApiServicesDhcpApi.create_dhcp_profile"
      end
      # resource path
      local_var_path = '/dhcp/server-profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#create_dhcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a DHCP server
    # Create a logical DHCP server.
    # @param logical_dhcp_server 
    # @param [Hash] opts the optional parameters
    # @return [LogicalDhcpServer]
    def create_dhcp_server(logical_dhcp_server, opts = {})
      data, _status_code, _headers = create_dhcp_server_with_http_info(logical_dhcp_server, opts)
      data
    end

    # Create a DHCP server
    # Create a logical DHCP server.
    # @param logical_dhcp_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalDhcpServer, Fixnum, Hash)>] LogicalDhcpServer data, response status code and response headers
    def create_dhcp_server_with_http_info(logical_dhcp_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.create_dhcp_server ...'
      end
      # verify the required parameter 'logical_dhcp_server' is set
      if @api_client.config.client_side_validation && logical_dhcp_server.nil?
        fail ArgumentError, "Missing the required parameter 'logical_dhcp_server' when calling ManagementPlaneApiServicesDhcpApi.create_dhcp_server"
      end
      # resource path
      local_var_path = '/dhcp/servers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_dhcp_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalDhcpServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#create_dhcp_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a static binding for a DHCP server
    # Create a static binding for a logical DHCP server.
    # @param server_id 
    # @param dhcp_static_binding 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBinding]
    def create_dhcp_static_binding(server_id, dhcp_static_binding, opts = {})
      data, _status_code, _headers = create_dhcp_static_binding_with_http_info(server_id, dhcp_static_binding, opts)
      data
    end

    # Create a static binding for a DHCP server
    # Create a static binding for a logical DHCP server.
    # @param server_id 
    # @param dhcp_static_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBinding, Fixnum, Hash)>] DhcpStaticBinding data, response status code and response headers
    def create_dhcp_static_binding_with_http_info(server_id, dhcp_static_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.create_dhcp_static_binding ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.create_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding' is set
      if @api_client.config.client_side_validation && dhcp_static_binding.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding' when calling ManagementPlaneApiServicesDhcpApi.create_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/static-bindings'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#create_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single DHCP lease entry specified by ip and mac.
    # Delete a single DHCP lease entry specified by ip and mac.  The DHCP server matches the DHCP lease with the given ip address and the mac address. The matched lease entry will be deleted. If no lease matches, the request is ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param server_id 
    # @param ip IPv4 or IPv6 address
    # @param mac MAC Address
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_dhcp_lease(server_id, ip, mac, opts = {})
      delete_a_dhcp_lease_with_http_info(server_id, ip, mac, opts)
      nil
    end

    # Delete a single DHCP lease entry specified by ip and mac.
    # Delete a single DHCP lease entry specified by ip and mac.  The DHCP server matches the DHCP lease with the given ip address and the mac address. The matched lease entry will be deleted. If no lease matches, the request is ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param server_id 
    # @param ip IPv4 or IPv6 address
    # @param mac MAC Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_a_dhcp_lease_with_http_info(server_id, ip, mac, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.delete_a_dhcp_lease ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.delete_a_dhcp_lease"
      end
      # verify the required parameter 'ip' is set
      if @api_client.config.client_side_validation && ip.nil?
        fail ArgumentError, "Missing the required parameter 'ip' when calling ManagementPlaneApiServicesDhcpApi.delete_a_dhcp_lease"
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling ManagementPlaneApiServicesDhcpApi.delete_a_dhcp_lease"
      end
      if @api_client.config.client_side_validation && mac !~ Regexp.new(/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/)
        fail ArgumentError, "invalid value for 'mac' when calling ManagementPlaneApiServicesDhcpApi.delete_a_dhcp_lease, must conform to the pattern /^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/."
      end

      # resource path
      local_var_path = '/dhcp/servers/{server-id}/leases'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ip'] = ip
      query_params[:'mac'] = mac

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#delete_a_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a DHCP server's IP pool
    # Delete a specific ip pool of a given logical DHCP server.
    # @param server_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_ip_pool(server_id, pool_id, opts = {})
      delete_dhcp_ip_pool_with_http_info(server_id, pool_id, opts)
      nil
    end

    # Delete a DHCP server&#39;s IP pool
    # Delete a specific ip pool of a given logical DHCP server.
    # @param server_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_ip_pool_with_http_info(server_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.delete_dhcp_ip_pool ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.delete_dhcp_ip_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesDhcpApi.delete_dhcp_ip_pool"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/ip-pools/{pool-id}'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#delete_dhcp_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a DHCP server profile
    # Delete a DHCP server profile specified by the profile id.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_profile(profile_id, opts = {})
      delete_dhcp_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete a DHCP server profile
    # Delete a DHCP server profile specified by the profile id.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.delete_dhcp_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ManagementPlaneApiServicesDhcpApi.delete_dhcp_profile"
      end
      # resource path
      local_var_path = '/dhcp/server-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#delete_dhcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a DHCP server
    # Delete a logical DHCP server specified by server id.
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_server(server_id, opts = {})
      delete_dhcp_server_with_http_info(server_id, opts)
      nil
    end

    # Delete a DHCP server
    # Delete a logical DHCP server specified by server id.
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_server_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.delete_dhcp_server ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.delete_dhcp_server"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#delete_dhcp_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a static binding
    # Delete a specific static binding of a given logical DHCP server.
    # @param server_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_static_binding(server_id, binding_id, opts = {})
      delete_dhcp_static_binding_with_http_info(server_id, binding_id, opts)
      nil
    end

    # Delete a static binding
    # Delete a specific static binding of a given logical DHCP server.
    # @param server_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_static_binding_with_http_info(server_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.delete_dhcp_static_binding ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.delete_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling ManagementPlaneApiServicesDhcpApi.delete_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/static-bindings/{binding-id}'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#delete_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the realized state of a dhcp ip pool
    # Return realized state information of a dhcp ip pool. After a dhcp ip pool is created or updated, you can invoke this API to get the realization information of the ip pool. 
    # @param server_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [ConfigurationState]
    def get_dhcp_ip_pool_state(server_id, pool_id, opts = {})
      data, _status_code, _headers = get_dhcp_ip_pool_state_with_http_info(server_id, pool_id, opts)
      data
    end

    # Get the realized state of a dhcp ip pool
    # Return realized state information of a dhcp ip pool. After a dhcp ip pool is created or updated, you can invoke this API to get the realization information of the ip pool. 
    # @param server_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_dhcp_ip_pool_state_with_http_info(server_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.get_dhcp_ip_pool_state ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_ip_pool_state"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_ip_pool_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_ip_pool_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/servers/{server-id}/ip-pools/{pool-id}/state'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#get_dhcp_ip_pool_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get specific leases of a given dhcp server
    # Get specific leases of a given dhcp server. As a dhcp server could manage millions of leases, the API has to limit the number of the returned leases via two mutually-excluded request parameters, i.e. \"pool_id\" and \"address\". Either a \"pool_id\" or an \"address\" can be provided, but not both in a same call.  If a \"pool_id\" is specified, the leases of the specific pool are returned. If an \"address\" is specified, only the lease(s) represented y this address is(are) returned. The \"address\" can be a single IP, an ip-range, or a mac address. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address can be an ip address, or an ip range, or a mac address
    # @option opts [String] :pool_id The uuid of dhcp ip pool
    # @option opts [String] :source Data source type.
    # @return [DhcpLeases]
    def get_dhcp_lease_info(server_id, opts = {})
      data, _status_code, _headers = get_dhcp_lease_info_with_http_info(server_id, opts)
      data
    end

    # Get specific leases of a given dhcp server
    # Get specific leases of a given dhcp server. As a dhcp server could manage millions of leases, the API has to limit the number of the returned leases via two mutually-excluded request parameters, i.e. \&quot;pool_id\&quot; and \&quot;address\&quot;. Either a \&quot;pool_id\&quot; or an \&quot;address\&quot; can be provided, but not both in a same call.  If a \&quot;pool_id\&quot; is specified, the leases of the specific pool are returned. If an \&quot;address\&quot; is specified, only the lease(s) represented y this address is(are) returned. The \&quot;address\&quot; can be a single IP, an ip-range, or a mac address. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address can be an ip address, or an ip range, or a mac address
    # @option opts [String] :pool_id The uuid of dhcp ip pool
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeases, Fixnum, Hash)>] DhcpLeases data, response status code and response headers
    def get_dhcp_lease_info_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.get_dhcp_lease_info ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_lease_info"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/leases'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'pool_id'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeases')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#get_dhcp_lease_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the realized state of a dhcp server
    # Return realized state information of a dhcp server. After a dhcp server is created or updated, you can invoke this API to get the realization information of the server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [ConfigurationState]
    def get_dhcp_server_state(server_id, opts = {})
      data, _status_code, _headers = get_dhcp_server_state_with_http_info(server_id, opts)
      data
    end

    # Get the realized state of a dhcp server
    # Return realized state information of a dhcp server. After a dhcp server is created or updated, you can invoke this API to get the realization information of the server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_dhcp_server_state_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.get_dhcp_server_state ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/servers/{server-id}/state'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#get_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the realized state of a dhcp static binding
    # Return realized state information of a dhcp static binding. After a dhcp static binding is created or updated, you can invoke this API to get the realization information of the static binding. 
    # @param server_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [ConfigurationState]
    def get_dhcp_static_binding_state(server_id, binding_id, opts = {})
      data, _status_code, _headers = get_dhcp_static_binding_state_with_http_info(server_id, binding_id, opts)
      data
    end

    # Get the realized state of a dhcp static binding
    # Return realized state information of a dhcp static binding. After a dhcp static binding is created or updated, you can invoke this API to get the realization information of the static binding. 
    # @param server_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_dhcp_static_binding_state_with_http_info(server_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.get_dhcp_static_binding_state ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_static_binding_state"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_static_binding_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_static_binding_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/servers/{server-id}/static-bindings/{binding-id}/state'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#get_dhcp_static_binding_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DHCP statistics with given dhcp server id
    # Returns the statistics of the given dhcp server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStatistics]
    def get_dhcp_statistics(server_id, opts = {})
      data, _status_code, _headers = get_dhcp_statistics_with_http_info(server_id, opts)
      data
    end

    # Get DHCP statistics with given dhcp server id
    # Returns the statistics of the given dhcp server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStatistics, Fixnum, Hash)>] DhcpStatistics data, response status code and response headers
    def get_dhcp_statistics_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.get_dhcp_statistics ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_statistics"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/statistics'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#get_dhcp_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DHCP service status with given dhcp server id
    # Returns the service status of the given dhcp server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerStatus]
    def get_dhcp_status(server_id, opts = {})
      data, _status_code, _headers = get_dhcp_status_with_http_info(server_id, opts)
      data
    end

    # Get DHCP service status with given dhcp server id
    # Returns the service status of the given dhcp server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def get_dhcp_status_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.get_dhcp_status ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.get_dhcp_status"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/status'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#get_dhcp_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of a DHCP server's IP pools
    # List the ip pools of a logical DHCP server with pagination support. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpIpPoolListResult]
    def list_dhcp_ip_pools(server_id, opts = {})
      data, _status_code, _headers = list_dhcp_ip_pools_with_http_info(server_id, opts)
      data
    end

    # Get a paginated list of a DHCP server&#39;s IP pools
    # List the ip pools of a logical DHCP server with pagination support. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpIpPoolListResult, Fixnum, Hash)>] DhcpIpPoolListResult data, response status code and response headers
    def list_dhcp_ip_pools_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.list_dhcp_ip_pools ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_ip_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_ip_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_ip_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/servers/{server-id}/ip-pools'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpIpPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#list_dhcp_ip_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of DHCP server profiles
    # Get a paginated list of DHCP server profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpProfileListResult]
    def list_dhcp_profiles(opts = {})
      data, _status_code, _headers = list_dhcp_profiles_with_http_info(opts)
      data
    end

    # Get a paginated list of DHCP server profiles
    # Get a paginated list of DHCP server profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpProfileListResult, Fixnum, Hash)>] DhcpProfileListResult data, response status code and response headers
    def list_dhcp_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.list_dhcp_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/server-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#list_dhcp_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of DHCP servers
    # List logical DHCP servers with pagination support.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LogicalDhcpServerListResult]
    def list_dhcp_servers(opts = {})
      data, _status_code, _headers = list_dhcp_servers_with_http_info(opts)
      data
    end

    # Get a paginated list of DHCP servers
    # List logical DHCP servers with pagination support.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LogicalDhcpServerListResult, Fixnum, Hash)>] LogicalDhcpServerListResult data, response status code and response headers
    def list_dhcp_servers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.list_dhcp_servers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/servers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalDhcpServerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#list_dhcp_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of a DHCP server's static bindings
    # Return a paginated list of a static bindings of a given logical DHCP server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingListResult]
    def list_dhcp_static_bindings(server_id, opts = {})
      data, _status_code, _headers = list_dhcp_static_bindings_with_http_info(server_id, opts)
      data
    end

    # Get a paginated list of a DHCP server&#39;s static bindings
    # Return a paginated list of a static bindings of a given logical DHCP server. 
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingListResult, Fixnum, Hash)>] DhcpStaticBindingListResult data, response status code and response headers
    def list_dhcp_static_bindings_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.list_dhcp_static_bindings ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_static_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_static_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesDhcpApi.list_dhcp_static_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/dhcp/servers/{server-id}/static-bindings'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#list_dhcp_static_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a DHCP server's IP pool with the specified pool ID
    # Return a specific ip pool of a given logical DHCP server.
    # @param server_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpIpPool]
    def read_dhcp_ip_pool(server_id, pool_id, opts = {})
      data, _status_code, _headers = read_dhcp_ip_pool_with_http_info(server_id, pool_id, opts)
      data
    end

    # Get a DHCP server&#39;s IP pool with the specified pool ID
    # Return a specific ip pool of a given logical DHCP server.
    # @param server_id 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpIpPool, Fixnum, Hash)>] DhcpIpPool data, response status code and response headers
    def read_dhcp_ip_pool_with_http_info(server_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.read_dhcp_ip_pool ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.read_dhcp_ip_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesDhcpApi.read_dhcp_ip_pool"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/ip-pools/{pool-id}'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpIpPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#read_dhcp_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a DHCP server profile
    # Return the DHCP profile specified by the profile id.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpProfile]
    def read_dhcp_profile(profile_id, opts = {})
      data, _status_code, _headers = read_dhcp_profile_with_http_info(profile_id, opts)
      data
    end

    # Get a DHCP server profile
    # Return the DHCP profile specified by the profile id.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpProfile, Fixnum, Hash)>] DhcpProfile data, response status code and response headers
    def read_dhcp_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.read_dhcp_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ManagementPlaneApiServicesDhcpApi.read_dhcp_profile"
      end
      # resource path
      local_var_path = '/dhcp/server-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#read_dhcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a DHCP server
    # Retrieve a logical DHCP server specified by server id.
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalDhcpServer]
    def read_dhcp_server(server_id, opts = {})
      data, _status_code, _headers = read_dhcp_server_with_http_info(server_id, opts)
      data
    end

    # Get a DHCP server
    # Retrieve a logical DHCP server specified by server id.
    # @param server_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalDhcpServer, Fixnum, Hash)>] LogicalDhcpServer data, response status code and response headers
    def read_dhcp_server_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.read_dhcp_server ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.read_dhcp_server"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalDhcpServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#read_dhcp_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a DHCP server's static binding with the specified binding ID
    # Return a specific static binding of a given logical DHCP server. 
    # @param server_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBinding]
    def read_dhcp_static_binding(server_id, binding_id, opts = {})
      data, _status_code, _headers = read_dhcp_static_binding_with_http_info(server_id, binding_id, opts)
      data
    end

    # Get a DHCP server&#39;s static binding with the specified binding ID
    # Return a specific static binding of a given logical DHCP server. 
    # @param server_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBinding, Fixnum, Hash)>] DhcpStaticBinding data, response status code and response headers
    def read_dhcp_static_binding_with_http_info(server_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.read_dhcp_static_binding ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.read_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling ManagementPlaneApiServicesDhcpApi.read_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/static-bindings/{binding-id}'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#read_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reallocate edge cluster and members of given DHCP profile.
    # As changing edge-cluster-id of a DhcpProfile by a PUT is disallowed, this re-allocate API is used to modify the edge-cluster-id and members of a given DhcpProfile.  Only the edge-cluster-id and the edge-cluster-member-indexes fields will be picked up by this re-allication API. The othere fields in the payload will be ignored.  If the edge-cluster-id in the payload DhcpProfile is different from the current edge-cluster-id of the profile, the referencing DHCP server(s) will be re-allocated to the new edge cluster. If the edge-cluster-id is not changed, the referencing DHCP server(s) will be re-allocated to the given edge members in the edge cluster. In this case, this REST API will act same as that of updating a DhcpProfile.  If the edge cluster member indexes are provided, they should exist in the given edge cluster. If the indexes are not specified in the DhcpProfile, edge members will be auto-allocated from the given edge cluster.  Please note that re-allocating edge-cluster will cause lose of all exisitng DHCP lease information. This API is used only when loosing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses. 
    # @param server_profile_id 
    # @param dhcp_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpProfile]
    def reallocate_dhcp_profile_edge_cluster_reallocate(server_profile_id, dhcp_profile, opts = {})
      data, _status_code, _headers = reallocate_dhcp_profile_edge_cluster_reallocate_with_http_info(server_profile_id, dhcp_profile, opts)
      data
    end

    # Reallocate edge cluster and members of given DHCP profile.
    # As changing edge-cluster-id of a DhcpProfile by a PUT is disallowed, this re-allocate API is used to modify the edge-cluster-id and members of a given DhcpProfile.  Only the edge-cluster-id and the edge-cluster-member-indexes fields will be picked up by this re-allication API. The othere fields in the payload will be ignored.  If the edge-cluster-id in the payload DhcpProfile is different from the current edge-cluster-id of the profile, the referencing DHCP server(s) will be re-allocated to the new edge cluster. If the edge-cluster-id is not changed, the referencing DHCP server(s) will be re-allocated to the given edge members in the edge cluster. In this case, this REST API will act same as that of updating a DhcpProfile.  If the edge cluster member indexes are provided, they should exist in the given edge cluster. If the indexes are not specified in the DhcpProfile, edge members will be auto-allocated from the given edge cluster.  Please note that re-allocating edge-cluster will cause lose of all exisitng DHCP lease information. This API is used only when loosing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses. 
    # @param server_profile_id 
    # @param dhcp_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpProfile, Fixnum, Hash)>] DhcpProfile data, response status code and response headers
    def reallocate_dhcp_profile_edge_cluster_reallocate_with_http_info(server_profile_id, dhcp_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.reallocate_dhcp_profile_edge_cluster_reallocate ...'
      end
      # verify the required parameter 'server_profile_id' is set
      if @api_client.config.client_side_validation && server_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_profile_id' when calling ManagementPlaneApiServicesDhcpApi.reallocate_dhcp_profile_edge_cluster_reallocate"
      end
      # verify the required parameter 'dhcp_profile' is set
      if @api_client.config.client_side_validation && dhcp_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_profile' when calling ManagementPlaneApiServicesDhcpApi.reallocate_dhcp_profile_edge_cluster_reallocate"
      end
      # resource path
      local_var_path = '/dhcp/server-profiles/{server-profile-id}?action=reallocate'.sub('{' + 'server-profile-id' + '}', server_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#reallocate_dhcp_profile_edge_cluster_reallocate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a DHCP server's IP pool
    # Update a specific ip pool of a given logical DHCP server.
    # @param server_id 
    # @param pool_id 
    # @param dhcp_ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [DhcpIpPool]
    def update_dhcp_ip_pool(server_id, pool_id, dhcp_ip_pool, opts = {})
      data, _status_code, _headers = update_dhcp_ip_pool_with_http_info(server_id, pool_id, dhcp_ip_pool, opts)
      data
    end

    # Update a DHCP server&#39;s IP pool
    # Update a specific ip pool of a given logical DHCP server.
    # @param server_id 
    # @param pool_id 
    # @param dhcp_ip_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpIpPool, Fixnum, Hash)>] DhcpIpPool data, response status code and response headers
    def update_dhcp_ip_pool_with_http_info(server_id, pool_id, dhcp_ip_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.update_dhcp_ip_pool ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_ip_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_ip_pool"
      end
      # verify the required parameter 'dhcp_ip_pool' is set
      if @api_client.config.client_side_validation && dhcp_ip_pool.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_ip_pool' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_ip_pool"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/ip-pools/{pool-id}'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_ip_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpIpPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#update_dhcp_ip_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a DHCP server profile
    # Please note, the edge_cluster_id in DhcpProfile can NOT be changed by this PUT operation because all existing DHCP leases will lost. If loosing leases is not a problem, a dedicated re-allocation API is suggested to modify the edge-cluster-id.  If both the edge_cluster_member_indexes in the DhcpProfile are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause the network crash due to ip conflicts. Hence the suggestion is to change only one member index in one single update, e.g. from [a, b] to [a,y]. 
    # @param profile_id 
    # @param dhcp_profile 
    # @param [Hash] opts the optional parameters
    # @return [DhcpProfile]
    def update_dhcp_profile(profile_id, dhcp_profile, opts = {})
      data, _status_code, _headers = update_dhcp_profile_with_http_info(profile_id, dhcp_profile, opts)
      data
    end

    # Update a DHCP server profile
    # Please note, the edge_cluster_id in DhcpProfile can NOT be changed by this PUT operation because all existing DHCP leases will lost. If loosing leases is not a problem, a dedicated re-allocation API is suggested to modify the edge-cluster-id.  If both the edge_cluster_member_indexes in the DhcpProfile are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause the network crash due to ip conflicts. Hence the suggestion is to change only one member index in one single update, e.g. from [a, b] to [a,y]. 
    # @param profile_id 
    # @param dhcp_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpProfile, Fixnum, Hash)>] DhcpProfile data, response status code and response headers
    def update_dhcp_profile_with_http_info(profile_id, dhcp_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.update_dhcp_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_profile"
      end
      # verify the required parameter 'dhcp_profile' is set
      if @api_client.config.client_side_validation && dhcp_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_profile' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_profile"
      end
      # resource path
      local_var_path = '/dhcp/server-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#update_dhcp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a DHCP server
    # Update a logical DHCP server with new configurations.
    # @param server_id 
    # @param logical_dhcp_server 
    # @param [Hash] opts the optional parameters
    # @return [LogicalDhcpServer]
    def update_dhcp_server(server_id, logical_dhcp_server, opts = {})
      data, _status_code, _headers = update_dhcp_server_with_http_info(server_id, logical_dhcp_server, opts)
      data
    end

    # Update a DHCP server
    # Update a logical DHCP server with new configurations.
    # @param server_id 
    # @param logical_dhcp_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalDhcpServer, Fixnum, Hash)>] LogicalDhcpServer data, response status code and response headers
    def update_dhcp_server_with_http_info(server_id, logical_dhcp_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.update_dhcp_server ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_server"
      end
      # verify the required parameter 'logical_dhcp_server' is set
      if @api_client.config.client_side_validation && logical_dhcp_server.nil?
        fail ArgumentError, "Missing the required parameter 'logical_dhcp_server' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_server"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}'.sub('{' + 'server-id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_dhcp_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalDhcpServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#update_dhcp_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a DHCP server's static binding
    # Update a specific static binding of a given local DHCP server.
    # @param server_id 
    # @param binding_id 
    # @param dhcp_static_binding 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBinding]
    def update_dhcp_static_binding(server_id, binding_id, dhcp_static_binding, opts = {})
      data, _status_code, _headers = update_dhcp_static_binding_with_http_info(server_id, binding_id, dhcp_static_binding, opts)
      data
    end

    # Update a DHCP server&#39;s static binding
    # Update a specific static binding of a given local DHCP server.
    # @param server_id 
    # @param binding_id 
    # @param dhcp_static_binding 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBinding, Fixnum, Hash)>] DhcpStaticBinding data, response status code and response headers
    def update_dhcp_static_binding_with_http_info(server_id, binding_id, dhcp_static_binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesDhcpApi.update_dhcp_static_binding ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding' is set
      if @api_client.config.client_side_validation && dhcp_static_binding.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding' when calling ManagementPlaneApiServicesDhcpApi.update_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/dhcp/servers/{server-id}/static-bindings/{binding-id}'.sub('{' + 'server-id' + '}', server_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesDhcpApi#update_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
