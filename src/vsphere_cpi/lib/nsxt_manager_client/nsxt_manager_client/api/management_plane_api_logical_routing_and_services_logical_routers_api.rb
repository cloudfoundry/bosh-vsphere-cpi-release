=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Logical Router
    # Creates a logical router. The required parameters are router_type (TIER0 or TIER1) and edge_cluster_id (TIER0 only). Optional parameters include internal and external transit network addresses. 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def create_logical_router(logical_router, opts = {})
      data, _status_code, _headers = create_logical_router_with_http_info(logical_router, opts)
      data
    end

    # Create a Logical Router
    # Creates a logical router. The required parameters are router_type (TIER0 or TIER1) and edge_cluster_id (TIER0 only). Optional parameters include internal and external transit network addresses. 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def create_logical_router_with_http_info(logical_router, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.create_logical_router ...'
      end
      # verify the required parameter 'logical_router' is set
      if @api_client.config.client_side_validation && logical_router.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.create_logical_router"
      end
      # resource path
      local_var_path = '/logical-routers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#create_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Logical Router
    # Deletes the specified logical router. You must delete associated logical router ports before you can delete a logical router. Otherwise use force delete which will delete all related ports and other entities associated with that LR. To force delete logical router pass force=true in query param. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade_delete_linked_ports Flag to specify whether to delete related logical switch ports (default to false)
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_logical_router(logical_router_id, opts = {})
      delete_logical_router_with_http_info(logical_router_id, opts)
      nil
    end

    # Delete a Logical Router
    # Deletes the specified logical router. You must delete associated logical router ports before you can delete a logical router. Otherwise use force delete which will delete all related ports and other entities associated with that LR. To force delete logical router pass force&#x3D;true in query param. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade_delete_linked_ports Flag to specify whether to delete related logical switch ports
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_router_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.delete_logical_router ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.delete_logical_router"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade_delete_linked_ports'] = opts[:'cascade_delete_linked_ports'] if !opts[:'cascade_delete_linked_ports'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#delete_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get BGP neighbor advertised routes
    # Returns routes advertised by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighborRouteDetails]
    def get_bgp_neighbor_advertised_routes(logical_router_id, neighbor_id, opts = {})
      data, _status_code, _headers = get_bgp_neighbor_advertised_routes_with_http_info(logical_router_id, neighbor_id, opts)
      data
    end

    # Get BGP neighbor advertised routes
    # Returns routes advertised by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighborRouteDetails, Fixnum, Hash)>] BgpNeighborRouteDetails data, response status code and response headers
    def get_bgp_neighbor_advertised_routes_with_http_info(logical_router_id, neighbor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_advertised_routes ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_advertised_routes"
      end
      # verify the required parameter 'neighbor_id' is set
      if @api_client.config.client_side_validation && neighbor_id.nil?
        fail ArgumentError, "Missing the required parameter 'neighbor_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_advertised_routes"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{neighbor-id}/advertised-routes'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'neighbor-id' + '}', neighbor_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborRouteDetails')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_bgp_neighbor_advertised_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get BGP neighbor advertised routes in CSV format 
    # Returns routes advertised by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled in CSV format. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighborRouteDetailsInCsvFormat]
    def get_bgp_neighbor_advertised_routes_in_csv_format_csv(logical_router_id, neighbor_id, opts = {})
      data, _status_code, _headers = get_bgp_neighbor_advertised_routes_in_csv_format_csv_with_http_info(logical_router_id, neighbor_id, opts)
      data
    end

    # Get BGP neighbor advertised routes in CSV format 
    # Returns routes advertised by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled in CSV format. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighborRouteDetailsInCsvFormat, Fixnum, Hash)>] BgpNeighborRouteDetailsInCsvFormat data, response status code and response headers
    def get_bgp_neighbor_advertised_routes_in_csv_format_csv_with_http_info(logical_router_id, neighbor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_advertised_routes_in_csv_format_csv ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_advertised_routes_in_csv_format_csv"
      end
      # verify the required parameter 'neighbor_id' is set
      if @api_client.config.client_side_validation && neighbor_id.nil?
        fail ArgumentError, "Missing the required parameter 'neighbor_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_advertised_routes_in_csv_format_csv"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{neighbor-id}/advertised-routes?format=csv'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'neighbor-id' + '}', neighbor_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborRouteDetailsInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_bgp_neighbor_advertised_routes_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get BGP neighbor learned routes
    # Returns routes learned by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighborRouteDetails]
    def get_bgp_neighbor_routes(logical_router_id, neighbor_id, opts = {})
      data, _status_code, _headers = get_bgp_neighbor_routes_with_http_info(logical_router_id, neighbor_id, opts)
      data
    end

    # Get BGP neighbor learned routes
    # Returns routes learned by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighborRouteDetails, Fixnum, Hash)>] BgpNeighborRouteDetails data, response status code and response headers
    def get_bgp_neighbor_routes_with_http_info(logical_router_id, neighbor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_routes ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_routes"
      end
      # verify the required parameter 'neighbor_id' is set
      if @api_client.config.client_side_validation && neighbor_id.nil?
        fail ArgumentError, "Missing the required parameter 'neighbor_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_routes"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{neighbor-id}/routes'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'neighbor-id' + '}', neighbor_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborRouteDetails')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_bgp_neighbor_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get BGP neighbor learned routes in CSV format 
    # Returns routes learned by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled in CSV format. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighborRouteDetailsInCsvFormat]
    def get_bgp_neighbor_routes_in_csv_format_csv(logical_router_id, neighbor_id, opts = {})
      data, _status_code, _headers = get_bgp_neighbor_routes_in_csv_format_csv_with_http_info(logical_router_id, neighbor_id, opts)
      data
    end

    # Get BGP neighbor learned routes in CSV format 
    # Returns routes learned by BGP neighbor from all edge transport nodes on which this neighbor is currently enabled in CSV format. It always returns realtime response. 
    # @param logical_router_id 
    # @param neighbor_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighborRouteDetailsInCsvFormat, Fixnum, Hash)>] BgpNeighborRouteDetailsInCsvFormat data, response status code and response headers
    def get_bgp_neighbor_routes_in_csv_format_csv_with_http_info(logical_router_id, neighbor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_routes_in_csv_format_csv ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_routes_in_csv_format_csv"
      end
      # verify the required parameter 'neighbor_id' is set
      if @api_client.config.client_side_validation && neighbor_id.nil?
        fail ArgumentError, "Missing the required parameter 'neighbor_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbor_routes_in_csv_format_csv"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{neighbor-id}/routes?format=csv'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'neighbor-id' + '}', neighbor_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborRouteDetailsInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_bgp_neighbor_routes_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of all the BGP neighbors for the Logical Router of the given id
    # Returns the status of all the BGP neighbors for the Logical Router of the given id. To get BGP neighbors status for the logical router from particular node, parameter \"transport_node_id=<transportnode_id>\" needs to be specified. Query parameter \"source=realtime\" is the only supported source.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id Transport node id
    # @return [BgpNeighborsStatusListResult]
    def get_bgp_neighbors_status(logical_router_id, opts = {})
      data, _status_code, _headers = get_bgp_neighbors_status_with_http_info(logical_router_id, opts)
      data
    end

    # Get the status of all the BGP neighbors for the Logical Router of the given id
    # Returns the status of all the BGP neighbors for the Logical Router of the given id. To get BGP neighbors status for the logical router from particular node, parameter \&quot;transport_node_id&#x3D;&lt;transportnode_id&gt;\&quot; needs to be specified. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id Transport node id
    # @return [Array<(BgpNeighborsStatusListResult, Fixnum, Hash)>] BgpNeighborsStatusListResult data, response status code and response headers
    def get_bgp_neighbors_status_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbors_status ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbors_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbors_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_bgp_neighbors_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/status'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborsStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_bgp_neighbors_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get FIB table on a specified node for a logical router
    # Returns the FIB for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTable]
    def get_logical_router_forwarding_table(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_forwarding_table_with_http_info(logical_router_id, transport_node_id, opts)
      data
    end

    # Get FIB table on a specified node for a logical router
    # Returns the FIB for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, paramter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTable, Fixnum, Hash)>] LogicalRouterRouteTable data, response status code and response headers
    def get_logical_router_forwarding_table_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/forwarding-table'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_forwarding_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get FIB table on a specified node for a logical router
    # Returns the FIB table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTableInCsvFormat]
    def get_logical_router_forwarding_table_in_csv_format_csv(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_forwarding_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts)
      data
    end

    # Get FIB table on a specified node for a logical router
    # Returns the FIB table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, paramter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTableInCsvFormat, Fixnum, Hash)>] LogicalRouterRouteTableInCsvFormat data, response status code and response headers
    def get_logical_router_forwarding_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table_in_csv_format_csv ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table_in_csv_format_csv"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_forwarding_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/forwarding-table?format=csv'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_forwarding_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get route table on a given node for a logical router
    # Deprecated - Please use /logical-routers/<logical-router-id>/routing/routing-table for RIB and /logical-routers/<logical-router-id>/routing/forwarding-table for FIB. Returns the route table for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTable]
    def get_logical_router_route_table(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_route_table_with_http_info(logical_router_id, transport_node_id, opts)
      data
    end

    # Get route table on a given node for a logical router
    # Deprecated - Please use /logical-routers/&lt;logical-router-id&gt;/routing/routing-table for RIB and /logical-routers/&lt;logical-router-id&gt;/routing/forwarding-table for FIB. Returns the route table for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTable, Fixnum, Hash)>] LogicalRouterRouteTable data, response status code and response headers
    def get_logical_router_route_table_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-table'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_route_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get route table on a node for a logical router
    # Deprecated - Please use /logical-routers/<logical-router-id>/routing/routing-table for RIB and /logical-routers/<logical-router-id>/routing/forwarding-table for FIB. Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTableInCsvFormat]
    def get_logical_router_route_table_in_csv_format_csv(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_route_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts)
      data
    end

    # Get route table on a node for a logical router
    # Deprecated - Please use /logical-routers/&lt;logical-router-id&gt;/routing/routing-table for RIB and /logical-routers/&lt;logical-router-id&gt;/routing/forwarding-table for FIB. Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTableInCsvFormat, Fixnum, Hash)>] LogicalRouterRouteTableInCsvFormat data, response status code and response headers
    def get_logical_router_route_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table_in_csv_format_csv ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table_in_csv_format_csv"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_route_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-table?format=csv'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_route_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get RIB table on a specified node for a logical router
    # Returns the route table(RIB) for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, parameter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. To filter the result by route source, parameter \"route_source=<source_type>\" needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Route source filter parameter
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTable]
    def get_logical_router_routing_table(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_routing_table_with_http_info(logical_router_id, transport_node_id, opts)
      data
    end

    # Get RIB table on a specified node for a logical router
    # Returns the route table(RIB) for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, parameter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. To filter the result by route source, parameter \&quot;route_source&#x3D;&lt;source_type&gt;\&quot; needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Route source filter parameter
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTable, Fixnum, Hash)>] LogicalRouterRouteTable data, response status code and response headers
    def get_logical_router_routing_table_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/routing-table'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_routing_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get RIB table on a specified node for a logical router
    # Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required. To filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\" needs to be specified. To filter the result by route source, parameter \"route_source=<source_type>\" needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. Query parameter \"source=realtime\" is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [String] :route_source Route source filter parameter
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterRouteTableInCsvFormat]
    def get_logical_router_routing_table_in_csv_format_csv(logical_router_id, transport_node_id, opts = {})
      data, _status_code, _headers = get_logical_router_routing_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts)
      data
    end

    # Get RIB table on a specified node for a logical router
    # Returns the route table in CSV format for the logical router on a node of the given transport-node-id. Query parameter \&quot;transport_node_id&#x3D;&lt;transport-node-id&gt;\&quot; is required. To filter the result by network address, paramter \&quot;network_prefix&#x3D;&lt;a.b.c.d/mask&gt;\&quot; needs to be specified. To filter the result by route source, parameter \&quot;route_source&#x3D;&lt;source_type&gt;\&quot; needs to be specified where source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT. It is also possible to filter the RIB table using both network address and route source filter together. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param logical_router_id 
    # @param transport_node_id TransportNode Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_prefix IPv4 or IPv6 CIDR Block
    # @option opts [String] :route_source Route source filter parameter
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterRouteTableInCsvFormat, Fixnum, Hash)>] LogicalRouterRouteTableInCsvFormat data, response status code and response headers
    def get_logical_router_routing_table_in_csv_format_csv_with_http_info(logical_router_id, transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table_in_csv_format_csv ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table_in_csv_format_csv"
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_routing_table_in_csv_format_csv"
      end
      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/routing-table?format=csv'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = transport_node_id
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_routing_table_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a Logical Router
    # Return realized state information of a logical router. Any configuration update that affects the logical router can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router, static routes, etc. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [LogicalRouterState]
    def get_logical_router_state(logical_router_id, opts = {})
      data, _status_code, _headers = get_logical_router_state_with_http_info(logical_router_id, opts)
      data
    end

    # Get the Realized State of a Logical Router
    # Return realized state information of a logical router. Any configuration update that affects the logical router can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of logical router, static routes, etc. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(LogicalRouterState, Fixnum, Hash)>] LogicalRouterState data, response status code and response headers
    def get_logical_router_state_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_state ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/state'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status for the Logical Router of the given id
    # Returns status for the Logical Router of the given id.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [LogicalRouterStatus]
    def get_logical_router_status(logical_router_id, opts = {})
      data, _status_code, _headers = get_logical_router_status_with_http_info(logical_router_id, opts)
      data
    end

    # Get the status for the Logical Router of the given id
    # Returns status for the Logical Router of the given id.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(LogicalRouterStatus, Fixnum, Hash)>] LogicalRouterStatus data, response status code and response headers
    def get_logical_router_status_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_status ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_router_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/status'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_router_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a Logical Service Router Cluster
    # Return realized state information of a logical service router cluster. Any configuration update that affects the logical service router cluster can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of nat, bgp, bfd, etc. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [LogicalServiceRouterClusterState]
    def get_logical_service_router_cluster_state(logical_router_id, opts = {})
      data, _status_code, _headers = get_logical_service_router_cluster_state_with_http_info(logical_router_id, opts)
      data
    end

    # Get the Realized State of a Logical Service Router Cluster
    # Return realized state information of a logical service router cluster. Any configuration update that affects the logical service router cluster can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of nat, bgp, bfd, etc. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(LogicalServiceRouterClusterState, Fixnum, Hash)>] LogicalServiceRouterClusterState data, response status code and response headers
    def get_logical_service_router_cluster_state_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_service_router_cluster_state ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_service_router_cluster_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.get_logical_service_router_cluster_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/service-cluster/state'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalServiceRouterClusterState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#get_logical_service_router_cluster_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Logical Routers
    # Returns information about all logical routers, including the UUID, internal and external transit network addresses, and the router type (TIER0 or TIER1). You can get information for only TIER0 routers or only the TIER1 routers by including the router_type query parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :router_type Type of Logical Router
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LogicalRouterListResult]
    def list_logical_routers(opts = {})
      data, _status_code, _headers = list_logical_routers_with_http_info(opts)
      data
    end

    # List Logical Routers
    # Returns information about all logical routers, including the UUID, internal and external transit network addresses, and the router type (TIER0 or TIER1). You can get information for only TIER0 routers or only the TIER1 routers by including the router_type query parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :router_type Type of Logical Router
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LogicalRouterListResult, Fixnum, Hash)>] LogicalRouterListResult data, response status code and response headers
    def list_logical_routers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.list_logical_routers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.list_logical_routers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.list_logical_routers, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'router_type'] && !['TIER0', 'TIER1'].include?(opts[:'router_type'])
        fail ArgumentError, 'invalid value for "router_type", must be one of TIER0, TIER1'
      end
      # resource path
      local_var_path = '/logical-routers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'router_type'] = opts[:'router_type'] if !opts[:'router_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#list_logical_routers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re allocate edge node placement of TIER1 service routers
    # API to re allocate edge node placement for TIER1 logical router. You can re-allocate service routers of TIER1 in same edge cluster or different edge cluster. You can also place edge nodes manually and provide maximum two indices for HA mode ACTIVE_STANDBY. To re-allocate on new edge cluster you must have existing edge cluster for TIER1 logical router. This will be disruptive operation and all existing statistics of logical router will be remove. 
    # @param logical_router_id 
    # @param service_router_allocation_config 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def re_allocate_service_routers_reallocate(logical_router_id, service_router_allocation_config, opts = {})
      data, _status_code, _headers = re_allocate_service_routers_reallocate_with_http_info(logical_router_id, service_router_allocation_config, opts)
      data
    end

    # Re allocate edge node placement of TIER1 service routers
    # API to re allocate edge node placement for TIER1 logical router. You can re-allocate service routers of TIER1 in same edge cluster or different edge cluster. You can also place edge nodes manually and provide maximum two indices for HA mode ACTIVE_STANDBY. To re-allocate on new edge cluster you must have existing edge cluster for TIER1 logical router. This will be disruptive operation and all existing statistics of logical router will be remove. 
    # @param logical_router_id 
    # @param service_router_allocation_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def re_allocate_service_routers_reallocate_with_http_info(logical_router_id, service_router_allocation_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.re_allocate_service_routers_reallocate ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.re_allocate_service_routers_reallocate"
      end
      # verify the required parameter 'service_router_allocation_config' is set
      if @api_client.config.client_side_validation && service_router_allocation_config.nil?
        fail ArgumentError, "Missing the required parameter 'service_router_allocation_config' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.re_allocate_service_routers_reallocate"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}?action=reallocate'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_router_allocation_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#re_allocate_service_routers_reallocate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reprocesses a logical router configuration and publish updates to controller
    # Reprocess logical router configuration and configuration of related entities like logical router ports, static routing, etc. Any missing Updates are published to controller. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def re_process_logical_router_reprocess(logical_router_id, opts = {})
      re_process_logical_router_reprocess_with_http_info(logical_router_id, opts)
      nil
    end

    # Reprocesses a logical router configuration and publish updates to controller
    # Reprocess logical router configuration and configuration of related entities like logical router ports, static routing, etc. Any missing Updates are published to controller. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def re_process_logical_router_reprocess_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.re_process_logical_router_reprocess ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.re_process_logical_router_reprocess"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}?action=reprocess'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#re_process_logical_router_reprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Logical Router
    # Returns information about the specified logical router.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def read_logical_router(logical_router_id, opts = {})
      data, _status_code, _headers = read_logical_router_with_http_info(logical_router_id, opts)
      data
    end

    # Read Logical Router
    # Returns information about the specified logical router.
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def read_logical_router_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.read_logical_router ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.read_logical_router"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#read_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Logical Router
    # Modifies the specified logical router. Modifiable attributes include the internal_transit_network, external_transit_networks, and edge_cluster_id (for TIER0 routers). 
    # @param logical_router_id 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [LogicalRouter]
    def update_logical_router(logical_router_id, logical_router, opts = {})
      data, _status_code, _headers = update_logical_router_with_http_info(logical_router_id, logical_router, opts)
      data
    end

    # Update a Logical Router
    # Modifies the specified logical router. Modifiable attributes include the internal_transit_network, external_transit_networks, and edge_cluster_id (for TIER0 routers). 
    # @param logical_router_id 
    # @param logical_router 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalRouter, Fixnum, Hash)>] LogicalRouter data, response status code and response headers
    def update_logical_router_with_http_info(logical_router_id, logical_router, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.update_logical_router ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.update_logical_router"
      end
      # verify the required parameter 'logical_router' is set
      if @api_client.config.client_side_validation && logical_router.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router' when calling ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi.update_logical_router"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_router)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalRouter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesLogicalRoutersApi#update_logical_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
