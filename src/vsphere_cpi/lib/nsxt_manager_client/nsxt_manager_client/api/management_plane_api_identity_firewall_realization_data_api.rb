=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiIdentityFirewallRealizationDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all IDFW NSGroup VM details for a given NSGroup
    # Get all Identity Firewall NSGroup VM details for a given NSGroup.
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [IdfwNsgroupVmDetailListResult]
    def get_nsgroup_vm_details(group_id, opts = {})
      data, _status_code, _headers = get_nsgroup_vm_details_with_http_info(group_id, opts)
      data
    end

    # Get all IDFW NSGroup VM details for a given NSGroup
    # Get all Identity Firewall NSGroup VM details for a given NSGroup.
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwNsgroupVmDetailListResult, Fixnum, Hash)>] IdfwNsgroupVmDetailListResult data, response status code and response headers
    def get_nsgroup_vm_details_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallRealizationDataApi.get_nsgroup_vm_details ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiIdentityFirewallRealizationDataApi.get_nsgroup_vm_details"
      end
      # resource path
      local_var_path = '/idfw/nsgroup-vm-details/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwNsgroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallRealizationDataApi#get_nsgroup_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # Get IDFW system statistics data.
    # @param [Hash] opts the optional parameters
    # @return [IdfwSystemStats]
    def get_system_stats(opts = {})
      data, _status_code, _headers = get_system_stats_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # Get IDFW system statistics data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_system_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallRealizationDataApi.get_system_stats ...'
      end
      # resource path
      local_var_path = '/idfw/system-stats'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallRealizationDataApi#get_system_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # Get IDFW user login events for a given user (all active plus up to 5 most recent archived entries). 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [IdfwUserStats]
    def get_user_stats(user_id, opts = {})
      data, _status_code, _headers = get_user_stats_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # Get IDFW user login events for a given user (all active plus up to 5 most recent archived entries). 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_stats_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallRealizationDataApi.get_user_stats ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ManagementPlaneApiIdentityFirewallRealizationDataApi.get_user_stats"
      end
      # resource path
      local_var_path = '/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallRealizationDataApi#get_user_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # Get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [IdfwVmStats]
    def get_vm_stats(vm_ext_id, opts = {})
      data, _status_code, _headers = get_vm_stats_with_http_info(vm_ext_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # Get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_ext_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_vm_stats_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallRealizationDataApi.get_vm_stats ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling ManagementPlaneApiIdentityFirewallRealizationDataApi.get_vm_stats"
      end
      # resource path
      local_var_path = '/idfw/vm-stats/{vm-ext-id}'.sub('{' + 'vm-ext-id' + '}', vm_ext_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallRealizationDataApi#get_vm_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # Get user session data.
    # @param [Hash] opts the optional parameters
    # @return [IdfwUserSessionDataAndMappings]
    def list_user_sessions(opts = {})
      data, _status_code, _headers = list_user_sessions_with_http_info(opts)
      data
    end

    # Get user session data
    # Get user session data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def list_user_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiIdentityFirewallRealizationDataApi.list_user_sessions ...'
      end
      # resource path
      local_var_path = '/idfw/user-session-data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiIdentityFirewallRealizationDataApi#list_user_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
