=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNsxComponentAdministrationClusterManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a controller to the cluster
    # Add a new controller to the NSX cluster. Deprecated. Use POST /cluster?action=join_cluster to join a node to cluster. The controller comes with the new node. 
    # @param add_cluster_node_spec 
    # @param action 
    # @param [Hash] opts the optional parameters
    # @return [ClusterNodeConfig]
    def add_cluster_node(add_cluster_node_spec, action, opts = {})
      data, _status_code, _headers = add_cluster_node_with_http_info(add_cluster_node_spec, action, opts)
      data
    end

    # Add a controller to the cluster
    # Add a new controller to the NSX cluster. Deprecated. Use POST /cluster?action&#x3D;join_cluster to join a node to cluster. The controller comes with the new node. 
    # @param add_cluster_node_spec 
    # @param action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterNodeConfig, Fixnum, Hash)>] ClusterNodeConfig data, response status code and response headers
    def add_cluster_node_with_http_info(add_cluster_node_spec, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.add_cluster_node ...'
      end
      # verify the required parameter 'add_cluster_node_spec' is set
      if @api_client.config.client_side_validation && add_cluster_node_spec.nil?
        fail ArgumentError, "Missing the required parameter 'add_cluster_node_spec' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.add_cluster_node"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.add_cluster_node"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['add_cluster_node'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of add_cluster_node"
      end
      # resource path
      local_var_path = '/cluster/nodes'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_cluster_node_spec)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterNodeConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#add_cluster_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clear the cluster certificate
    # Clears the certificate used for the MP cluster. This does not affect the certificate itself. This API is deprecated. Instead use the  /api/v1/cluster/api-certificate?action=set_cluster_certificate API to set the cluster certificate to a different one. It just means that from now on, individual certificates will be used on each MP node. This affects all nodes in the cluster. 
    # @param certificate_id Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [ClusterCertificateId]
    def clear_cluster_certificate_clear_cluster_certificate(certificate_id, opts = {})
      data, _status_code, _headers = clear_cluster_certificate_clear_cluster_certificate_with_http_info(certificate_id, opts)
      data
    end

    # Clear the cluster certificate
    # Clears the certificate used for the MP cluster. This does not affect the certificate itself. This API is deprecated. Instead use the  /api/v1/cluster/api-certificate?action&#x3D;set_cluster_certificate API to set the cluster certificate to a different one. It just means that from now on, individual certificates will be used on each MP node. This affects all nodes in the cluster. 
    # @param certificate_id Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterCertificateId, Fixnum, Hash)>] ClusterCertificateId data, response status code and response headers
    def clear_cluster_certificate_clear_cluster_certificate_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.clear_cluster_certificate_clear_cluster_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.clear_cluster_certificate_clear_cluster_certificate"
      end
      # resource path
      local_var_path = '/cluster/api-certificate?action=clear_cluster_certificate'

      # query parameters
      query_params = {}
      query_params[:'certificate_id'] = certificate_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterCertificateId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#clear_cluster_certificate_clear_cluster_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clear cluster virtual IP address
    # Clears the cluster virtual IP address. 
    # @param [Hash] opts the optional parameters
    # @return [ClusterVirtualIpProperties]
    def clear_cluster_virtual_ip_clear_virtual_ip(opts = {})
      data, _status_code, _headers = clear_cluster_virtual_ip_clear_virtual_ip_with_http_info(opts)
      data
    end

    # Clear cluster virtual IP address
    # Clears the cluster virtual IP address. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterVirtualIpProperties, Fixnum, Hash)>] ClusterVirtualIpProperties data, response status code and response headers
    def clear_cluster_virtual_ip_clear_virtual_ip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.clear_cluster_virtual_ip_clear_virtual_ip ...'
      end
      # resource path
      local_var_path = '/cluster/api-virtual-ip?action=clear_virtual_ip'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterVirtualIpProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#clear_cluster_virtual_ip_clear_virtual_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a controller from the cluster
    # Removes the specified controller from the NSX cluster. Before you can remove a controller from the cluster, you must shut down the controller service with the \"stop service controller\" command. Deprecated. Use POST /cluster/<node-id>?action=remove_node to detach a node from cluster. The controller is removed with the node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cluster_node_config(node_id, opts = {})
      delete_cluster_node_config_with_http_info(node_id, opts)
      nil
    end

    # Remove a controller from the cluster
    # Removes the specified controller from the NSX cluster. Before you can remove a controller from the cluster, you must shut down the controller service with the \&quot;stop service controller\&quot; command. Deprecated. Use POST /cluster/&lt;node-id&gt;?action&#x3D;remove_node to detach a node from cluster. The controller is removed with the node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cluster_node_config_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.delete_cluster_node_config ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.delete_cluster_node_config"
      end
      # resource path
      local_var_path = '/cluster/nodes/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#delete_cluster_node_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Detach a node from the Cluster
    # Detach a node from the Cluster
    # @param node_id UUID of the node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :force 
    # @option opts [String] :graceful_shutdown  (default to false)
    # @option opts [String] :ignore_repository_ip_check  (default to false)
    # @return [ClusterConfiguration]
    def detach_cluster_node_remove_node(node_id, opts = {})
      data, _status_code, _headers = detach_cluster_node_remove_node_with_http_info(node_id, opts)
      data
    end

    # Detach a node from the Cluster
    # Detach a node from the Cluster
    # @param node_id UUID of the node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :force 
    # @option opts [String] :graceful_shutdown 
    # @option opts [String] :ignore_repository_ip_check 
    # @return [Array<(ClusterConfiguration, Fixnum, Hash)>] ClusterConfiguration data, response status code and response headers
    def detach_cluster_node_remove_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.detach_cluster_node_remove_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.detach_cluster_node_remove_node"
      end
      if @api_client.config.client_side_validation && opts[:'force'] && !['true', 'false'].include?(opts[:'force'])
        fail ArgumentError, 'invalid value for "force", must be one of true, false'
      end
      if @api_client.config.client_side_validation && opts[:'graceful_shutdown'] && !['true', 'false'].include?(opts[:'graceful_shutdown'])
        fail ArgumentError, 'invalid value for "graceful_shutdown", must be one of true, false'
      end
      if @api_client.config.client_side_validation && opts[:'ignore_repository_ip_check'] && !['true', 'false'].include?(opts[:'ignore_repository_ip_check'])
        fail ArgumentError, 'invalid value for "ignore_repository_ip_check", must be one of true, false'
      end
      # resource path
      local_var_path = '/cluster/{node-id}?action=remove_node'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'graceful-shutdown'] = opts[:'graceful_shutdown'] if !opts[:'graceful_shutdown'].nil?
      query_params[:'ignore-repository-ip-check'] = opts[:'ignore_repository_ip_check'] if !opts[:'ignore_repository_ip_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#detach_cluster_node_remove_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read API service properties
    # Read the configuration of the NSX API service. 
    # @param [Hash] opts the optional parameters
    # @return [ApiServiceConfig]
    def get_api_service_config(opts = {})
      data, _status_code, _headers = get_api_service_config_with_http_info(opts)
      data
    end

    # Read API service properties
    # Read the configuration of the NSX API service. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiServiceConfig, Fixnum, Hash)>] ApiServiceConfig data, response status code and response headers
    def get_api_service_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.get_api_service_config ...'
      end
      # resource path
      local_var_path = '/cluster/api-service'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#get_api_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read cluster certificate ID
    # Returns the ID of the certificate that is used as the cluster certificate for MP 
    # @param [Hash] opts the optional parameters
    # @return [ClusterCertificateId]
    def get_cluster_certificate_id(opts = {})
      data, _status_code, _headers = get_cluster_certificate_id_with_http_info(opts)
      data
    end

    # Read cluster certificate ID
    # Returns the ID of the certificate that is used as the cluster certificate for MP 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterCertificateId, Fixnum, Hash)>] ClusterCertificateId data, response status code and response headers
    def get_cluster_certificate_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.get_cluster_certificate_id ...'
      end
      # resource path
      local_var_path = '/cluster/api-certificate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterCertificateId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#get_cluster_certificate_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read cluster node configuration
    # Returns information about the specified NSX cluster node.
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ClusterNodeInfo]
    def get_cluster_node_config(node_id, opts = {})
      data, _status_code, _headers = get_cluster_node_config_with_http_info(node_id, opts)
      data
    end

    # Read cluster node configuration
    # Returns information about the specified NSX cluster node.
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterNodeInfo, Fixnum, Hash)>] ClusterNodeInfo data, response status code and response headers
    def get_cluster_node_config_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.get_cluster_node_config ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.get_cluster_node_config"
      end
      # resource path
      local_var_path = '/cluster/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterNodeInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#get_cluster_node_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read cluster virtual IP address
    # Returns the configured cluster virtual IP address or null if not configured. 
    # @param [Hash] opts the optional parameters
    # @return [ClusterVirtualIpProperties]
    def get_cluster_virtual_ip(opts = {})
      data, _status_code, _headers = get_cluster_virtual_ip_with_http_info(opts)
      data
    end

    # Read cluster virtual IP address
    # Returns the configured cluster virtual IP address or null if not configured. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterVirtualIpProperties, Fixnum, Hash)>] ClusterVirtualIpProperties data, response status code and response headers
    def get_cluster_virtual_ip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.get_cluster_virtual_ip ...'
      end
      # resource path
      local_var_path = '/cluster/api-virtual-ip'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterVirtualIpProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#get_cluster_virtual_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Join this node to a NSX Cluster
    # Join this node to a NSX Cluster
    # @param join_cluster_parameters 
    # @param [Hash] opts the optional parameters
    # @return [ClusterConfiguration]
    def join_cluster_join_cluster(join_cluster_parameters, opts = {})
      data, _status_code, _headers = join_cluster_join_cluster_with_http_info(join_cluster_parameters, opts)
      data
    end

    # Join this node to a NSX Cluster
    # Join this node to a NSX Cluster
    # @param join_cluster_parameters 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterConfiguration, Fixnum, Hash)>] ClusterConfiguration data, response status code and response headers
    def join_cluster_join_cluster_with_http_info(join_cluster_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.join_cluster_join_cluster ...'
      end
      # verify the required parameter 'join_cluster_parameters' is set
      if @api_client.config.client_side_validation && join_cluster_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'join_cluster_parameters' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.join_cluster_join_cluster"
      end
      # resource path
      local_var_path = '/cluster?action=join_cluster'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(join_cluster_parameters)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#join_cluster_join_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Cluster Node Configurations
    # Returns information about all NSX cluster nodes. Deprecated. Use GET /cluster to get cluster configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ClusterNodeConfigListResult]
    def list_cluster_node_configs(opts = {})
      data, _status_code, _headers = list_cluster_node_configs_with_http_info(opts)
      data
    end

    # List Cluster Node Configurations
    # Returns information about all NSX cluster nodes. Deprecated. Use GET /cluster to get cluster configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ClusterNodeConfigListResult, Fixnum, Hash)>] ClusterNodeConfigListResult data, response status code and response headers
    def list_cluster_node_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.list_cluster_node_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.list_cluster_node_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.list_cluster_node_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/cluster/nodes'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterNodeConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#list_cluster_node_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the specified node's Network Interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_cluster_node_interfaces(node_id, opts = {})
      data, _status_code, _headers = list_cluster_node_interfaces_with_http_info(node_id, opts)
      data
    end

    # List the specified node&#39;s Network Interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_cluster_node_interfaces_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.list_cluster_node_interfaces ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.list_cluster_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/cluster/nodes/{node-id}/network/interfaces'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#list_cluster_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Cluster Configuration
    # Returns information about the NSX cluster configuration. An NSX cluster has two functions or purposes, commonly referred to as \"roles.\" These two roles are control and management. Each NSX installation has a single cluster. Separate NSX clusters do not share data. In other words, a given data-plane node is attached to only one cluster, not to multiple clusters. 
    # @param [Hash] opts the optional parameters
    # @return [ClusterConfig]
    def read_cluster_config(opts = {})
      data, _status_code, _headers = read_cluster_config_with_http_info(opts)
      data
    end

    # Read Cluster Configuration
    # Returns information about the NSX cluster configuration. An NSX cluster has two functions or purposes, commonly referred to as \&quot;roles.\&quot; These two roles are control and management. Each NSX installation has a single cluster. Separate NSX clusters do not share data. In other words, a given data-plane node is attached to only one cluster, not to multiple clusters. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterConfig, Fixnum, Hash)>] ClusterConfig data, response status code and response headers
    def read_cluster_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_config ...'
      end
      # resource path
      local_var_path = '/cluster'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Cluster Node Configuration
    # Returns information about the specified NSX cluster node. Deprecated. Use GET /cluster/<node-id> to get cluster node configuration. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ClusterNodeConfig]
    def read_cluster_node_config(node_id, opts = {})
      data, _status_code, _headers = read_cluster_node_config_with_http_info(node_id, opts)
      data
    end

    # Read Cluster Node Configuration
    # Returns information about the specified NSX cluster node. Deprecated. Use GET /cluster/&lt;node-id&gt; to get cluster node configuration. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterNodeConfig, Fixnum, Hash)>] ClusterNodeConfig data, response status code and response headers
    def read_cluster_node_config_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_config ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_config"
      end
      # resource path
      local_var_path = '/cluster/nodes/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterNodeConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_node_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the node's Network Interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceProperties]
    def read_cluster_node_interface(node_id, interface_id, opts = {})
      data, _status_code, _headers = read_cluster_node_interface_with_http_info(node_id, interface_id, opts)
      data
    end

    # Read the node&#39;s Network Interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceProperties, Fixnum, Hash)>] NodeInterfaceProperties data, response status code and response headers
    def read_cluster_node_interface_with_http_info(node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_interface ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_interface"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_interface"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/cluster/nodes/{node-id}/network/interfaces/{interface-id}'.sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_node_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the NSX Manager/Controller's Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def read_cluster_node_interface_statistics(node_id, interface_id, opts = {})
      data, _status_code, _headers = read_cluster_node_interface_statistics_with_http_info(node_id, interface_id, opts)
      data
    end

    # Read the NSX Manager/Controller&#39;s Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def read_cluster_node_interface_statistics_with_http_info(node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_interface_statistics ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/cluster/nodes/{node-id}/network/interfaces/{interface-id}/stats'.sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read cluster node runtime status
    # Read aggregated runtime status of cluster node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [ClusterNodeStatus]
    def read_cluster_node_status(node_id, opts = {})
      data, _status_code, _headers = read_cluster_node_status_with_http_info(node_id, opts)
      data
    end

    # Read cluster node runtime status
    # Read aggregated runtime status of cluster node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(ClusterNodeStatus, Fixnum, Hash)>] ClusterNodeStatus data, response status code and response headers
    def read_cluster_node_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/cluster/nodes/{node-id}/status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read cluster runtime status
    # Read aggregated runtime status of all cluster nodes. Deprecated. Use GET /cluster/status instead. 
    # @param [Hash] opts the optional parameters
    # @return [ClustersAggregateInfo]
    def read_cluster_nodes_aggregate_status(opts = {})
      data, _status_code, _headers = read_cluster_nodes_aggregate_status_with_http_info(opts)
      data
    end

    # Read cluster runtime status
    # Read aggregated runtime status of all cluster nodes. Deprecated. Use GET /cluster/status instead. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClustersAggregateInfo, Fixnum, Hash)>] ClustersAggregateInfo data, response status code and response headers
    def read_cluster_nodes_aggregate_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_nodes_aggregate_status ...'
      end
      # resource path
      local_var_path = '/cluster/nodes/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClustersAggregateInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_nodes_aggregate_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Cluster Status
    # Returns status information for the NSX cluster control role and management role. 
    # @param [Hash] opts the optional parameters
    # @return [ClusterStatus]
    def read_cluster_status(opts = {})
      data, _status_code, _headers = read_cluster_status_with_http_info(opts)
      data
    end

    # Read Cluster Status
    # Returns status information for the NSX cluster control role and management role. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterStatus, Fixnum, Hash)>] ClusterStatus data, response status code and response headers
    def read_cluster_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.read_cluster_status ...'
      end
      # resource path
      local_var_path = '/cluster/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#read_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the cluster certificate
    # Sets the certificate used for the MP cluster. Issuing this request causes the http service to restart so that the service can begin using the new certificate. When the POST request succeeds, it doesn't return a valid response. The request times out because of the restart. This affects all nodes in the cluster. 
    # @param certificate_id Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [ClusterCertificateId]
    def set_cluster_certificate_set_cluster_certificate(certificate_id, opts = {})
      data, _status_code, _headers = set_cluster_certificate_set_cluster_certificate_with_http_info(certificate_id, opts)
      data
    end

    # Set the cluster certificate
    # Sets the certificate used for the MP cluster. Issuing this request causes the http service to restart so that the service can begin using the new certificate. When the POST request succeeds, it doesn&#39;t return a valid response. The request times out because of the restart. This affects all nodes in the cluster. 
    # @param certificate_id Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterCertificateId, Fixnum, Hash)>] ClusterCertificateId data, response status code and response headers
    def set_cluster_certificate_set_cluster_certificate_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.set_cluster_certificate_set_cluster_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.set_cluster_certificate_set_cluster_certificate"
      end
      # resource path
      local_var_path = '/cluster/api-certificate?action=set_cluster_certificate'

      # query parameters
      query_params = {}
      query_params[:'certificate_id'] = certificate_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterCertificateId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#set_cluster_certificate_set_cluster_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set cluster virtual IP address
    # Sets the cluster virtual IP address. Note, all nodes in the management cluster must be in the same subnet. If not, a 409 CONFLICT status is returned. 
    # @param ip_address Virtual IP address, 0.0.0.0 if not configured
    # @param [Hash] opts the optional parameters
    # @return [ClusterVirtualIpProperties]
    def set_cluster_virtual_ip_set_virtual_ip(ip_address, opts = {})
      data, _status_code, _headers = set_cluster_virtual_ip_set_virtual_ip_with_http_info(ip_address, opts)
      data
    end

    # Set cluster virtual IP address
    # Sets the cluster virtual IP address. Note, all nodes in the management cluster must be in the same subnet. If not, a 409 CONFLICT status is returned. 
    # @param ip_address Virtual IP address, 0.0.0.0 if not configured
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterVirtualIpProperties, Fixnum, Hash)>] ClusterVirtualIpProperties data, response status code and response headers
    def set_cluster_virtual_ip_set_virtual_ip_with_http_info(ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.set_cluster_virtual_ip_set_virtual_ip ...'
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.set_cluster_virtual_ip_set_virtual_ip"
      end
      # resource path
      local_var_path = '/cluster/api-virtual-ip?action=set_virtual_ip'

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterVirtualIpProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#set_cluster_virtual_ip_set_virtual_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update API service properties
    # Read the configuration of the NSX API service. Changes are applied to all nodes in the cluster. The API service on each node will restart after it is updated using this API. There may be a delay of up to a minute or so between the time this API call completes and when the new configuration goes into effect.
    # @param api_service_config 
    # @param [Hash] opts the optional parameters
    # @return [ApiServiceConfig]
    def update_api_service_config(api_service_config, opts = {})
      data, _status_code, _headers = update_api_service_config_with_http_info(api_service_config, opts)
      data
    end

    # Update API service properties
    # Read the configuration of the NSX API service. Changes are applied to all nodes in the cluster. The API service on each node will restart after it is updated using this API. There may be a delay of up to a minute or so between the time this API call completes and when the new configuration goes into effect.
    # @param api_service_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiServiceConfig, Fixnum, Hash)>] ApiServiceConfig data, response status code and response headers
    def update_api_service_config_with_http_info(api_service_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.update_api_service_config ...'
      end
      # verify the required parameter 'api_service_config' is set
      if @api_client.config.client_side_validation && api_service_config.nil?
        fail ArgumentError, "Missing the required parameter 'api_service_config' when calling ManagementPlaneApiNsxComponentAdministrationClusterManagementApi.update_api_service_config"
      end
      # resource path
      local_var_path = '/cluster/api-service'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(api_service_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNsxComponentAdministrationClusterManagementApi#update_api_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
