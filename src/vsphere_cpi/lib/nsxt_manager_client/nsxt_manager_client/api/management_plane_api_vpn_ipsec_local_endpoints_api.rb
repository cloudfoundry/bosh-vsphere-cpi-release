=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiVpnIpsecLocalEndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create custom local endpoint
    # Create custom IPSec local endpoint.
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNLocalEndpoint]
    def create_ip_sec_vpn_local_endpoint(ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_ip_sec_vpn_local_endpoint_with_http_info(ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create custom local endpoint
    # Create custom IPSec local endpoint.
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNLocalEndpoint, Fixnum, Hash)>] IPSecVPNLocalEndpoint data, response status code and response headers
    def create_ip_sec_vpn_local_endpoint_with_http_info(ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecLocalEndpointsApi.create_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.create_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/vpn/ipsec/local-endpoints'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecLocalEndpointsApi#create_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete custom IPSec local endpoint
    # Delete custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_ip_sec_vpn_local_endpoint(ipsec_vpn_local_endpoint_id, opts = {})
      delete_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts)
      nil
    end

    # Delete custom IPSec local endpoint
    # Delete custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecLocalEndpointsApi.delete_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'ipsec_vpn_local_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_local_endpoint_id' when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.delete_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}'.sub('{' + 'ipsec-vpn-local-endpoint-id' + '}', ipsec_vpn_local_endpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecLocalEndpointsApi#delete_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get custom IPSec local endpoint
    # Get custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNLocalEndpoint]
    def get_ip_sec_vpn_local_endpoint(ipsec_vpn_local_endpoint_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts)
      data
    end

    # Get custom IPSec local endpoint
    # Get custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNLocalEndpoint, Fixnum, Hash)>] IPSecVPNLocalEndpoint data, response status code and response headers
    def get_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecLocalEndpointsApi.get_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'ipsec_vpn_local_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_local_endpoint_id' when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.get_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}'.sub('{' + 'ipsec-vpn-local-endpoint-id' + '}', ipsec_vpn_local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecLocalEndpointsApi#get_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec local endpoint list result
    # Get paginated list of all local endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVPNLocalEndpointListResult]
    def list_ip_sec_vpn_local_endpoints(opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_local_endpoints_with_http_info(opts)
      data
    end

    # Get IPSec local endpoint list result
    # Get paginated list of all local endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ipsec_vpn_service_id Id of the IPSec VPN service
    # @option opts [String] :logical_router_id Id of logical router
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVPNLocalEndpointListResult, Fixnum, Hash)>] IPSecVPNLocalEndpointListResult data, response status code and response headers
    def list_ip_sec_vpn_local_endpoints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecLocalEndpointsApi.list_ip_sec_vpn_local_endpoints ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.list_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.list_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/vpn/ipsec/local-endpoints'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ipsec_vpn_service_id'] = opts[:'ipsec_vpn_service_id'] if !opts[:'ipsec_vpn_service_id'].nil?
      query_params[:'logical_router_id'] = opts[:'logical_router_id'] if !opts[:'logical_router_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecLocalEndpointsApi#list_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit custom IPSec local endpoint
    # Edit custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVPNLocalEndpoint]
    def update_ip_sec_vpn_local_endpoint(ipsec_vpn_local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = update_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Edit custom IPSec local endpoint
    # Edit custom IPSec local endpoint.
    # @param ipsec_vpn_local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVPNLocalEndpoint, Fixnum, Hash)>] IPSecVPNLocalEndpoint data, response status code and response headers
    def update_ip_sec_vpn_local_endpoint_with_http_info(ipsec_vpn_local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiVpnIpsecLocalEndpointsApi.update_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'ipsec_vpn_local_endpoint_id' is set
      if @api_client.config.client_side_validation && ipsec_vpn_local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_vpn_local_endpoint_id' when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.update_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling ManagementPlaneApiVpnIpsecLocalEndpointsApi.update_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}'.sub('{' + 'ipsec-vpn-local-endpoint-id' + '}', ipsec_vpn_local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVPNLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiVpnIpsecLocalEndpointsApi#update_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
