=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiUpgradePlanApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Abort pre-upgrade checks
    # Aborts execution of pre-upgrade checks if already in progress. Halts the execution of checks awaiting execution at this point and makes best-effort attempts to stop checks already in execution. Returns without action if execution of pre-upgrade checks is not in progress. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def abort_pre_upgrade_checks_abort_pre_upgrade_checks(opts = {})
      abort_pre_upgrade_checks_abort_pre_upgrade_checks_with_http_info(opts)
      nil
    end

    # Abort pre-upgrade checks
    # Aborts execution of pre-upgrade checks if already in progress. Halts the execution of checks awaiting execution at this point and makes best-effort attempts to stop checks already in execution. Returns without action if execution of pre-upgrade checks is not in progress. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def abort_pre_upgrade_checks_abort_pre_upgrade_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.abort_pre_upgrade_checks_abort_pre_upgrade_checks ...'
      end
      # resource path
      local_var_path = '/upgrade?action=abort_pre_upgrade_checks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#abort_pre_upgrade_checks_abort_pre_upgrade_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Continue upgrade
    # Continue the upgrade. Resumes the upgrade from the point where it was paused. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component to upgrade.
    # @option opts [BOOLEAN] :skip Skip to upgrade of next component. (default to false)
    # @return [nil]
    def continue_upgrade_continue(opts = {})
      continue_upgrade_continue_with_http_info(opts)
      nil
    end

    # Continue upgrade
    # Continue the upgrade. Resumes the upgrade from the point where it was paused. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component to upgrade.
    # @option opts [BOOLEAN] :skip Skip to upgrade of next component.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def continue_upgrade_continue_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.continue_upgrade_continue ...'
      end
      # resource path
      local_var_path = '/upgrade/plan?action=continue'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#continue_upgrade_continue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Execute post-upgrade checks
    # Run pre-defined checks to identify issues after upgrade of a component. The results of the checks are added to the respective upgrade units aggregate-info. The progress and status of post-upgrade checks is part of aggregate-info of individual upgrade unit groups. Returns HTTP status 500 with error code 30953 if execution of post-upgrade checks is already in progress. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def execute_post_upgrade_checks_execute_post_upgrade_checks(component_type, opts = {})
      execute_post_upgrade_checks_execute_post_upgrade_checks_with_http_info(component_type, opts)
      nil
    end

    # Execute post-upgrade checks
    # Run pre-defined checks to identify issues after upgrade of a component. The results of the checks are added to the respective upgrade units aggregate-info. The progress and status of post-upgrade checks is part of aggregate-info of individual upgrade unit groups. Returns HTTP status 500 with error code 30953 if execution of post-upgrade checks is already in progress. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def execute_post_upgrade_checks_execute_post_upgrade_checks_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.execute_post_upgrade_checks_execute_post_upgrade_checks ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiUpgradePlanApi.execute_post_upgrade_checks_execute_post_upgrade_checks"
      end
      # resource path
      local_var_path = '/upgrade/{component-type}?action=execute_post_upgrade_checks'.sub('{' + 'component-type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#execute_post_upgrade_checks_execute_post_upgrade_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Execute pre-upgrade checks
    # Run pre-defined checks to identify potential issues which can be encountered during an upgrade or can cause an upgrade to fail. The results of the checks are added to the respective upgrade units aggregate-info. The progress and status of operation is part of upgrade status summary of individual components. Returns HTTP status 500 with error code 30953 if execution of pre-upgrade checks is already in progress. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type on which the action is performed or on which the results are filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def execute_pre_upgrade_checks_execute_pre_upgrade_checks(opts = {})
      execute_pre_upgrade_checks_execute_pre_upgrade_checks_with_http_info(opts)
      nil
    end

    # Execute pre-upgrade checks
    # Run pre-defined checks to identify potential issues which can be encountered during an upgrade or can cause an upgrade to fail. The results of the checks are added to the respective upgrade units aggregate-info. The progress and status of operation is part of upgrade status summary of individual components. Returns HTTP status 500 with error code 30953 if execution of pre-upgrade checks is already in progress. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type on which the action is performed or on which the results are filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def execute_pre_upgrade_checks_execute_pre_upgrade_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.execute_pre_upgrade_checks_execute_pre_upgrade_checks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradePlanApi.execute_pre_upgrade_checks_execute_pre_upgrade_checks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradePlanApi.execute_pre_upgrade_checks_execute_pre_upgrade_checks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/upgrade?action=execute_pre_upgrade_checks'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#execute_pre_upgrade_checks_execute_pre_upgrade_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns pre-upgrade checks in csv format
    # Returns pre-upgrade checks in csv format 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCheckCsvListResult]
    def get_all_pre_upgrade_checks_in_csv_format_csv(opts = {})
      data, _status_code, _headers = get_all_pre_upgrade_checks_in_csv_format_csv_with_http_info(opts)
      data
    end

    # Returns pre-upgrade checks in csv format
    # Returns pre-upgrade checks in csv format 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCheckCsvListResult, Fixnum, Hash)>] UpgradeCheckCsvListResult data, response status code and response headers
    def get_all_pre_upgrade_checks_in_csv_format_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.get_all_pre_upgrade_checks_in_csv_format_csv ...'
      end
      # resource path
      local_var_path = '/upgrade/pre-upgrade-checks?format=csv'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCheckCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#get_all_pre_upgrade_checks_in_csv_format_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information about upgrade checks
    # Returns information of pre-upgrade and post-upgrade checks. If request parameter component type is specified, then returns information about all pre-upgrade and post-upgrade for the component. Otherwise returns information of checks across all component types. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade checks are to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComponentUpgradeChecksInfoListResult]
    def get_upgrade_checks_info(opts = {})
      data, _status_code, _headers = get_upgrade_checks_info_with_http_info(opts)
      data
    end

    # Returns information about upgrade checks
    # Returns information of pre-upgrade and post-upgrade checks. If request parameter component type is specified, then returns information about all pre-upgrade and post-upgrade for the component. Otherwise returns information of checks across all component types. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade checks are to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComponentUpgradeChecksInfoListResult, Fixnum, Hash)>] ComponentUpgradeChecksInfoListResult data, response status code and response headers
    def get_upgrade_checks_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.get_upgrade_checks_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradePlanApi.get_upgrade_checks_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradePlanApi.get_upgrade_checks_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/upgrade/upgrade-checks-info'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComponentUpgradeChecksInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#get_upgrade_checks_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade plan settings for the component
    # Get the upgrade plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [UpgradePlanSettings]
    def get_upgrade_plan_settings(component_type, opts = {})
      data, _status_code, _headers = get_upgrade_plan_settings_with_http_info(component_type, opts)
      data
    end

    # Get upgrade plan settings for the component
    # Get the upgrade plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradePlanSettings, Fixnum, Hash)>] UpgradePlanSettings data, response status code and response headers
    def get_upgrade_plan_settings_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.get_upgrade_plan_settings ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiUpgradePlanApi.get_upgrade_plan_settings"
      end
      # resource path
      local_var_path = '/upgrade/plan/{component_type}/settings'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradePlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#get_upgrade_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pause upgrade
    # Pause the upgrade. Upgrade will be paused after upgrade of all the nodes currently in progress is completed either successfully or with failure. User can make changes in the upgrade plan when the upgrade is paused. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pause_upgrade_pause(opts = {})
      pause_upgrade_pause_with_http_info(opts)
      nil
    end

    # Pause upgrade
    # Pause the upgrade. Upgrade will be paused after upgrade of all the nodes currently in progress is completed either successfully or with failure. User can make changes in the upgrade plan when the upgrade is paused. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pause_upgrade_pause_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.pause_upgrade_pause ...'
      end
      # resource path
      local_var_path = '/upgrade/plan?action=pause'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#pause_upgrade_pause\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset upgrade plan to default plan
    # Reset the upgrade plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_upgrade_plan_reset(component_type, opts = {})
      reset_upgrade_plan_reset_with_http_info(component_type, opts)
      nil
    end

    # Reset upgrade plan to default plan
    # Reset the upgrade plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_upgrade_plan_reset_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.reset_upgrade_plan_reset ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiUpgradePlanApi.reset_upgrade_plan_reset"
      end
      # resource path
      local_var_path = '/upgrade/plan?action=reset'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = component_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#reset_upgrade_plan_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start upgrade
    # Start the upgrade. Upgrade will start as per the upgrade plan. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_upgrade_start(opts = {})
      start_upgrade_start_with_http_info(opts)
      nil
    end

    # Start upgrade
    # Start the upgrade. Upgrade will start as per the upgrade plan. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_upgrade_start_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.start_upgrade_start ...'
      end
      # resource path
      local_var_path = '/upgrade/plan?action=start'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#start_upgrade_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update upgrade plan settings for the component
    # Update the upgrade plan settings for the component. 
    # @param component_type 
    # @param upgrade_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [UpgradePlanSettings]
    def update_upgrade_plan_settings(component_type, upgrade_plan_settings, opts = {})
      data, _status_code, _headers = update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, opts)
      data
    end

    # Update upgrade plan settings for the component
    # Update the upgrade plan settings for the component. 
    # @param component_type 
    # @param upgrade_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradePlanSettings, Fixnum, Hash)>] UpgradePlanSettings data, response status code and response headers
    def update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.update_upgrade_plan_settings ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiUpgradePlanApi.update_upgrade_plan_settings"
      end
      # verify the required parameter 'upgrade_plan_settings' is set
      if @api_client.config.client_side_validation && upgrade_plan_settings.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_plan_settings' when calling ManagementPlaneApiUpgradePlanApi.update_upgrade_plan_settings"
      end
      # resource path
      local_var_path = '/upgrade/plan/{component_type}/settings'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_plan_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradePlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#update_upgrade_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upgrade selected units
    # Upgrades, Resumes the upgrade of a selected set of units. 
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upgrade_selected_units_upgrade_selected_units(upgrade_unit_list, opts = {})
      upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, opts)
      nil
    end

    # Upgrade selected units
    # Upgrades, Resumes the upgrade of a selected set of units. 
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradePlanApi.upgrade_selected_units_upgrade_selected_units ...'
      end
      # verify the required parameter 'upgrade_unit_list' is set
      if @api_client.config.client_side_validation && upgrade_unit_list.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_list' when calling ManagementPlaneApiUpgradePlanApi.upgrade_selected_units_upgrade_selected_units"
      end
      # resource path
      local_var_path = '/upgrade/plan?action=upgrade_selected_units'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradePlanApi#upgrade_selected_units_upgrade_selected_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
