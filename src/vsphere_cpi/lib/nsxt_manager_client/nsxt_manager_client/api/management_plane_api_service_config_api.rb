=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiServiceConfigApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create service config
    # Creates a new service config that can group profiles and configs 
    # @param service_config 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfig]
    def create_service_config(service_config, opts = {})
      data, _status_code, _headers = create_service_config_with_http_info(service_config, opts)
      data
    end

    # Create service config
    # Creates a new service config that can group profiles and configs 
    # @param service_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfig, Fixnum, Hash)>] ServiceConfig data, response status code and response headers
    def create_service_config_with_http_info(service_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.create_service_config ...'
      end
      # verify the required parameter 'service_config' is set
      if @api_client.config.client_side_validation && service_config.nil?
        fail ArgumentError, "Missing the required parameter 'service_config' when calling ManagementPlaneApiServiceConfigApi.create_service_config"
      end
      # resource path
      local_var_path = '/service-configs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#create_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service Config
    # Deletes the specified service config 
    # @param config_set_id service Ccnfig Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_config(config_set_id, opts = {})
      delete_service_config_with_http_info(config_set_id, opts)
      nil
    end

    # Delete Service Config
    # Deletes the specified service config 
    # @param config_set_id service Ccnfig Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_config_with_http_info(config_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.delete_service_config ...'
      end
      # verify the required parameter 'config_set_id' is set
      if @api_client.config.client_side_validation && config_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_set_id' when calling ManagementPlaneApiServiceConfigApi.delete_service_config"
      end
      # resource path
      local_var_path = '/service-configs/{config-set-id}'.sub('{' + 'config-set-id' + '}', config_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#delete_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Effective Profiles for an Entity
    # Returns the effective profiles applied to the specified Resource. 
    # @param resource_id The resource for which the effective profiles are to be fetched
    # @param resource_type Valid Resource type in effective profiles API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EffectiveProfileListResult]
    def effective_profiles(resource_id, resource_type, opts = {})
      data, _status_code, _headers = effective_profiles_with_http_info(resource_id, resource_type, opts)
      data
    end

    # Get Effective Profiles for an Entity
    # Returns the effective profiles applied to the specified Resource. 
    # @param resource_id The resource for which the effective profiles are to be fetched
    # @param resource_type Valid Resource type in effective profiles API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EffectiveProfileListResult, Fixnum, Hash)>] EffectiveProfileListResult data, response status code and response headers
    def effective_profiles_with_http_info(resource_id, resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.effective_profiles ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ManagementPlaneApiServiceConfigApi.effective_profiles"
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling ManagementPlaneApiServiceConfigApi.effective_profiles"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['NSGroup', 'LogicalPort', 'VirtualMachine', 'TransportNode', 'LogicalRouter'].include?(resource_type)
        fail ArgumentError, "invalid value for 'resource_type', must be one of NSGroup, LogicalPort, VirtualMachine, TransportNode, LogicalRouter"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServiceConfigApi.effective_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServiceConfigApi.effective_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service-configs/effective-profiles'

      # query parameters
      query_params = {}
      query_params[:'resource_id'] = resource_id
      query_params[:'resource_type'] = resource_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service configs
    # List of all service configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :profile_type Fetch ServiceConfig for the given attribute profile_type
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceConfigListResult]
    def list_service_configs(opts = {})
      data, _status_code, _headers = list_service_configs_with_http_info(opts)
      data
    end

    # List service configs
    # List of all service configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :profile_type Fetch ServiceConfig for the given attribute profile_type
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceConfigListResult, Fixnum, Hash)>] ServiceConfigListResult data, response status code and response headers
    def list_service_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.list_service_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServiceConfigApi.list_service_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServiceConfigApi.list_service_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'profile_type'] = opts[:'profile_type'] if !opts[:'profile_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#list_service_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Service Config
    # Returns information about the specified Service Config. 
    # @param config_set_id Service Config Id
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfig]
    def read_service_config(config_set_id, opts = {})
      data, _status_code, _headers = read_service_config_with_http_info(config_set_id, opts)
      data
    end

    # Read Service Config
    # Returns information about the specified Service Config. 
    # @param config_set_id Service Config Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfig, Fixnum, Hash)>] ServiceConfig data, response status code and response headers
    def read_service_config_with_http_info(config_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.read_service_config ...'
      end
      # verify the required parameter 'config_set_id' is set
      if @api_client.config.client_side_validation && config_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_set_id' when calling ManagementPlaneApiServiceConfigApi.read_service_config"
      end
      # resource path
      local_var_path = '/service-configs/{config-set-id}'.sub('{' + 'config-set-id' + '}', config_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#read_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates/Updates service configs sent in batch request
    # Creates/Updates new service configs sent in batch request. This API returns ALL the service configs that are created/updated. 
    # @param service_config_list 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfigListResult]
    def service_config_batch_operation(service_config_list, opts = {})
      data, _status_code, _headers = service_config_batch_operation_with_http_info(service_config_list, opts)
      data
    end

    # Creates/Updates service configs sent in batch request
    # Creates/Updates new service configs sent in batch request. This API returns ALL the service configs that are created/updated. 
    # @param service_config_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfigListResult, Fixnum, Hash)>] ServiceConfigListResult data, response status code and response headers
    def service_config_batch_operation_with_http_info(service_config_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.service_config_batch_operation ...'
      end
      # verify the required parameter 'service_config_list' is set
      if @api_client.config.client_side_validation && service_config_list.nil?
        fail ArgumentError, "Missing the required parameter 'service_config_list' when calling ManagementPlaneApiServiceConfigApi.service_config_batch_operation"
      end
      # resource path
      local_var_path = '/service-configs/batch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_config_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#service_config_batch_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service config
    # Updates the specified ServiceConfig. 
    # @param config_set_id service config Id
    # @param service_config 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfig]
    def update_service_config(config_set_id, service_config, opts = {})
      data, _status_code, _headers = update_service_config_with_http_info(config_set_id, service_config, opts)
      data
    end

    # Update service config
    # Updates the specified ServiceConfig. 
    # @param config_set_id service config Id
    # @param service_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfig, Fixnum, Hash)>] ServiceConfig data, response status code and response headers
    def update_service_config_with_http_info(config_set_id, service_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServiceConfigApi.update_service_config ...'
      end
      # verify the required parameter 'config_set_id' is set
      if @api_client.config.client_side_validation && config_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_set_id' when calling ManagementPlaneApiServiceConfigApi.update_service_config"
      end
      # verify the required parameter 'service_config' is set
      if @api_client.config.client_side_validation && service_config.nil?
        fail ArgumentError, "Missing the required parameter 'service_config' when calling ManagementPlaneApiServiceConfigApi.update_service_config"
      end
      # resource path
      local_var_path = '/service-configs/{config-set-id}'.sub('{' + 'config-set-id' + '}', config_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServiceConfigApi#update_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
