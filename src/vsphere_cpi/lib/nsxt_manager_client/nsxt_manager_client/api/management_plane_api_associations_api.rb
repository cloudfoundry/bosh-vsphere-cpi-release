=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiAssociationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get ResourceReference objects to which the given resource belongs to 
    # Returns information about resources that are associated with the given resource. Id and type of the resource for which associated resources are to be fetched are to be specified as query parameter in the URI. Resource type of the associated resources must be specified as query parameter. 
    # @param associated_resource_type Resource type valid for use as target in association API
    # @param resource_id The resource for which associated resources are to be fetched
    # @param resource_type Resource type valid for use as source in association API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :fetch_ancestors Fetch complete list of associated resources considering containment and nesting  (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AssociationListResult]
    def get_associations(associated_resource_type, resource_id, resource_type, opts = {})
      data, _status_code, _headers = get_associations_with_http_info(associated_resource_type, resource_id, resource_type, opts)
      data
    end

    # Get ResourceReference objects to which the given resource belongs to 
    # Returns information about resources that are associated with the given resource. Id and type of the resource for which associated resources are to be fetched are to be specified as query parameter in the URI. Resource type of the associated resources must be specified as query parameter. 
    # @param associated_resource_type Resource type valid for use as target in association API
    # @param resource_id The resource for which associated resources are to be fetched
    # @param resource_type Resource type valid for use as source in association API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :fetch_ancestors Fetch complete list of associated resources considering containment and nesting 
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AssociationListResult, Fixnum, Hash)>] AssociationListResult data, response status code and response headers
    def get_associations_with_http_info(associated_resource_type, resource_id, resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiAssociationsApi.get_associations ...'
      end
      # verify the required parameter 'associated_resource_type' is set
      if @api_client.config.client_side_validation && associated_resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'associated_resource_type' when calling ManagementPlaneApiAssociationsApi.get_associations"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['NSGroup'].include?(associated_resource_type)
        fail ArgumentError, "invalid value for 'associated_resource_type', must be one of NSGroup"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ManagementPlaneApiAssociationsApi.get_associations"
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling ManagementPlaneApiAssociationsApi.get_associations"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['NSGroup', 'IPSet', 'MACSet', 'LogicalSwitch', 'LogicalPort', 'VirtualMachine', 'DirectoryGroup', 'VirtualNetworkInterface', 'TransportNode'].include?(resource_type)
        fail ArgumentError, "invalid value for 'resource_type', must be one of NSGroup, IPSet, MACSet, LogicalSwitch, LogicalPort, VirtualMachine, DirectoryGroup, VirtualNetworkInterface, TransportNode"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiAssociationsApi.get_associations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiAssociationsApi.get_associations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/associations'

      # query parameters
      query_params = {}
      query_params[:'associated_resource_type'] = associated_resource_type
      query_params[:'resource_id'] = resource_id
      query_params[:'resource_type'] = resource_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'fetch_ancestors'] = opts[:'fetch_ancestors'] if !opts[:'fetch_ancestors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssociationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiAssociationsApi#get_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
