=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiFabricNodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Register and Install NSX Components on a Node
    # Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node. 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def add_node(node, opts = {})
      data, _status_code, _headers = add_node_with_http_info(node, opts)
      data
    end

    # Register and Install NSX Components on a Node
    # Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the &lt;b&gt;openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout&lt;/b&gt; command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at &#39;/etc/ssh/ssh_host_rsa_key.pub&#39;. If the key is not present then generate a new key by running the following command and follow the instructions.  &lt;b&gt;ssh-keygen -t rsa&lt;/b&gt;  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default &#39;id_rsa.pub&#39;.  &lt;b&gt;awk &#39;{print $2}&#39; id_rsa.pub | base64 -d | sha256sum -b | sed &#39;s/ .*$//&#39; | xxd -r -p | base64&lt;/b&gt; This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node. 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def add_node_with_http_info(node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.add_node ...'
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling ManagementPlaneApiFabricNodesApi.add_node"
      end
      # resource path
      local_var_path = '/fabric/nodes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#add_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Node
    # Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. DELETE /transport-nodes/<transport-node-id> to delete FN. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :unprepare_host Delete a host and uninstall NSX components (default to true)
    # @return [nil]
    def delete_node(node_id, opts = {})
      delete_node_with_http_info(node_id, opts)
      nil
    end

    # Delete a Node
    # Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&amp;lt;transport-node-id&amp;gt; to delete FN. DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :unprepare_host Delete a host and uninstall NSX components
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.delete_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.delete_node"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'unprepare_host'] = opts[:'unprepare_host'] if !opts[:'unprepare_host'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#delete_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transportnode-id&gt;/modules to get fabric node modules. 
    # Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transportnode-id&gt;/modules to get fabric node modules. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [SoftwareModuleResult]
    def get_fabric_node_modules(node_id, opts = {})
      data, _status_code, _headers = get_fabric_node_modules_with_http_info(node_id, opts)
      data
    end

    # Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
    # Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/modules to get fabric node modules. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareModuleResult, Fixnum, Hash)>] SoftwareModuleResult data, response status code and response headers
    def get_fabric_node_modules_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.get_fabric_node_modules ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.get_fabric_node_modules"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/modules'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SoftwareModuleResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#get_fabric_node_modules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Realized State of a Fabric Node.
    # For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&lt;transportnode-id&gt;/state to get realized state of a Fabric Node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ConfigurationState]
    def get_fabric_node_state(node_id, opts = {})
      data, _status_code, _headers = get_fabric_node_state_with_http_info(node_id, opts)
      data
    end

    # Get the Realized State of a Fabric Node.
    # For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&amp;lt;transportnode-id&amp;gt;/state to get realized state of a Fabric Node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigurationState, Fixnum, Hash)>] ConfigurationState data, response status code and response headers
    def get_fabric_node_state_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.get_fabric_node_state ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.get_fabric_node_state"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/state'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigurationState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#get_fabric_node_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return list of supported host OS types
    # Returns names of all supported host OS.
    # @param [Hash] opts the optional parameters
    # @return [SupportedHostOSListResult]
    def get_supported_host_os_types(opts = {})
      data, _status_code, _headers = get_supported_host_os_types_with_http_info(opts)
      data
    end

    # Return list of supported host OS types
    # Returns names of all supported host OS.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportedHostOSListResult, Fixnum, Hash)>] SupportedHostOSListResult data, response status code and response headers
    def get_supported_host_os_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.get_supported_host_os_types ...'
      end
      # resource path
      local_var_path = '/fabric/ostypes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupportedHostOSListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#get_supported_host_os_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the specified node's Network Interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/<transport-node-id>/network/interfaces to list node network interfaces for the corresponding TN. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_fabric_node_interfaces(node_id, opts = {})
      data, _status_code, _headers = list_fabric_node_interfaces_with_http_info(node_id, opts)
      data
    end

    # List the specified node&#39;s Network Interfaces
    # Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces to list node network interfaces for the corresponding TN. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_fabric_node_interfaces_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.list_fabric_node_interfaces ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.list_fabric_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/network/interfaces'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#list_fabric_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the List of Capabilities of a Single Node
    # Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&lt;transportnode-id&gt;/capabilities if FN is converted to TN.
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [NodeCapabilitiesResult]
    def list_node_capabilities(node_id, opts = {})
      data, _status_code, _headers = list_node_capabilities_with_http_info(node_id, opts)
      data
    end

    # Return the List of Capabilities of a Single Node
    # Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&amp;lt;transportnode-id&amp;gt;/capabilities if FN is converted to TN.
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeCapabilitiesResult, Fixnum, Hash)>] NodeCapabilitiesResult data, response status code and response headers
    def list_node_capabilities_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.list_node_capabilities ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.list_node_capabilities"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/capabilities'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeCapabilitiesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#list_node_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the List of Nodes
    # Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id Id of the discovered node which was converted to create this node
    # @option opts [String] :display_name HostNode display name
    # @option opts [String] :external_id HostNode external id
    # @option opts [String] :hardware_id Hardware Id of the host
    # @option opts [String] :hypervisor_os_type HostNode&#39;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address Management IP address of the node
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :resource_type Node type from &#39;HostNode&#39;, &#39;EdgeNode&#39;, &#39;PublicCloudGatewayNode&#39;
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NodeListResult]
    def list_nodes(opts = {})
      data, _status_code, _headers = list_nodes_with_http_info(opts)
      data
    end

    # Return the List of Nodes
    # Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :discovered_node_id Id of the discovered node which was converted to create this node
    # @option opts [String] :display_name HostNode display name
    # @option opts [String] :external_id HostNode external id
    # @option opts [String] :hardware_id Hardware Id of the host
    # @option opts [String] :hypervisor_os_type HostNode&#39;s Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :ip_address Management IP address of the node
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :resource_type Node type from &#39;HostNode&#39;, &#39;EdgeNode&#39;, &#39;PublicCloudGatewayNode&#39;
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NodeListResult, Fixnum, Hash)>] NodeListResult data, response status code and response headers
    def list_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.list_nodes ...'
      end
      if @api_client.config.client_side_validation && opts[:'hypervisor_os_type'] && !['ESXI', 'RHELKVM', 'UBUNTUKVM', 'HYPERV', 'RHELCONTAINER', 'CENTOSCONTAINER', 'RHELSERVER', 'UBUNTUSERVER', 'CENTOSSERVER', 'CENTOSKVM', 'SLESKVM', 'SLESSERVER'].include?(opts[:'hypervisor_os_type'])
        fail ArgumentError, 'invalid value for "hypervisor_os_type", must be one of ESXI, RHELKVM, UBUNTUKVM, HYPERV, RHELCONTAINER, CENTOSCONTAINER, RHELSERVER, UBUNTUSERVER, CENTOSSERVER, CENTOSKVM, SLESKVM, SLESSERVER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricNodesApi.list_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricNodesApi.list_nodes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'resource_type'] && !['HostNode', 'EdgeNode', 'PublicCloudGatewayNode'].include?(opts[:'resource_type'])
        fail ArgumentError, 'invalid value for "resource_type", must be one of HostNode, EdgeNode, PublicCloudGatewayNode'
      end
      # resource path
      local_var_path = '/fabric/nodes'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'discovered_node_id'] = opts[:'discovered_node_id'] if !opts[:'discovered_node_id'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'hardware_id'] = opts[:'hardware_id'] if !opts[:'hardware_id'].nil?
      query_params[:'hypervisor_os_type'] = opts[:'hypervisor_os_type'] if !opts[:'hypervisor_os_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'ip_address'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#list_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform a service deployment upgrade on a host node
    # Perform a service deployment upgrade on a host node
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :disable_vm_migration Should VM migration be disabled during upgrade (default to false)
    # @return [Node]
    def perform_host_node_upgrade_action_upgrade_infra(node_id, opts = {})
      data, _status_code, _headers = perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, opts)
      data
    end

    # Perform a service deployment upgrade on a host node
    # Perform a service deployment upgrade on a host node
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :disable_vm_migration Should VM migration be disabled during upgrade
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.perform_host_node_upgrade_action_upgrade_infra ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.perform_host_node_upgrade_action_upgrade_infra"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}?action=upgrade_infra'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'disable_vm_migration'] = opts[:'disable_vm_migration'] if !opts[:'disable_vm_migration'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#perform_host_node_upgrade_action_upgrade_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform an Action on Fabric Node
    # The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \"Update transport node maintenance mode\". 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Supported fabric node actions
    # @option opts [BOOLEAN] :evacuate_powered_off_vms Evacuate powered-off vms (default to false)
    # @option opts [String] :vsan_mode Vsan decommission mode (default to ensure_object_accessibility)
    # @return [Node]
    def perform_node_action(node_id, opts = {})
      data, _status_code, _headers = perform_node_action_with_http_info(node_id, opts)
      data
    end

    # Perform an Action on Fabric Node
    # The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \&quot;Update transport node maintenance mode\&quot;. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Supported fabric node actions
    # @option opts [BOOLEAN] :evacuate_powered_off_vms Evacuate powered-off vms
    # @option opts [String] :vsan_mode Vsan decommission mode
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def perform_node_action_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.perform_node_action ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.perform_node_action"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['enter_maintenance_mode', 'exit_maintenance_mode', 'get_maintenance_mode_state'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of enter_maintenance_mode, exit_maintenance_mode, get_maintenance_mode_state'
      end
      if @api_client.config.client_side_validation && opts[:'vsan_mode'] && !['evacuate_all_data', 'ensure_object_accessibility', 'no_action'].include?(opts[:'vsan_mode'])
        fail ArgumentError, 'invalid value for "vsan_mode", must be one of evacuate_all_data, ensure_object_accessibility, no_action'
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'evacuate_powered_off_vms'] = opts[:'evacuate_powered_off_vms'] if !opts[:'evacuate_powered_off_vms'].nil?
      query_params[:'vsan_mode'] = opts[:'vsan_mode'] if !opts[:'vsan_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#perform_node_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the node's Network Interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/<transport-node-id>/network/interfaces/<interface-id> to get interface details of a node. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceProperties]
    def read_fabric_node_interface(node_id, interface_id, opts = {})
      data, _status_code, _headers = read_fabric_node_interface_with_http_info(node_id, interface_id, opts)
      data
    end

    # Read the node&#39;s Network Interface
    # Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/network/interfaces/&lt;interface-id&gt; to get interface details of a node. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceProperties, Fixnum, Hash)>] NodeInterfaceProperties data, response status code and response headers
    def read_fabric_node_interface_with_http_info(node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.read_fabric_node_interface ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.read_fabric_node_interface"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling ManagementPlaneApiFabricNodesApi.read_fabric_node_interface"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/network/interfaces/{interface-id}'.sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#read_fabric_node_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the NSX Manager's Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. This api is deprecated as part of FN+TN unification. Please use /transport-nodes/<transportnode-id>/network/interfaces/<interface-id>/stats to read network interface statistics with contraint FN is converted to TN. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def read_fabric_node_interface_statistics(node_id, interface_id, opts = {})
      data, _status_code, _headers = read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, opts)
      data
    end

    # Read the NSX Manager&#39;s Network Interface Statistics
    # On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions. This api is deprecated as part of FN+TN unification. Please use /transport-nodes/&lt;transportnode-id&gt;/network/interfaces/&lt;interface-id&gt;/stats to read network interface statistics with contraint FN is converted to TN. 
    # @param node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.read_fabric_node_interface_statistics ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.read_fabric_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling ManagementPlaneApiFabricNodesApi.read_fabric_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/network/interfaces/{interface-id}/stats'.sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#read_fabric_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return Node Information
    # Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt; to get fabric node information. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def read_node(node_id, opts = {})
      data, _status_code, _headers = read_node_with_http_info(node_id, opts)
      data
    end

    # Return Node Information
    # Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&amp;lt;transport-node-id&amp;gt; to get fabric node information. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def read_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.read_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.read_node"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#read_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return Runtime Status Information for a Node
    # Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&lt;node-id&gt;/status to get status information of a node with constraint FN is converted to TN. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [NodeStatus]
    def read_node_status(node_id, opts = {})
      data, _status_code, _headers = read_node_status_with_http_info(node_id, opts)
      data
    end

    # Return Runtime Status Information for a Node
    # Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node with constraint FN is converted to TN. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeStatus, Fixnum, Hash)>] NodeStatus data, response status code and response headers
    def read_node_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.read_node_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.read_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}/status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#read_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return Runtime Status Information for given Nodes
    # Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&lt;node-id&gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes. 
    # @param node_ids List of requested Nodes.
    # @param [Hash] opts the optional parameters
    # @return [NodeStatusListResult]
    def read_nodes_status(node_ids, opts = {})
      data, _status_code, _headers = read_nodes_status_with_http_info(node_ids, opts)
      data
    end

    # Return Runtime Status Information for given Nodes
    # Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&amp;lt;node-id&amp;gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes. 
    # @param node_ids List of requested Nodes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeStatusListResult, Fixnum, Hash)>] NodeStatusListResult data, response status code and response headers
    def read_nodes_status_with_http_info(node_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.read_nodes_status ...'
      end
      # verify the required parameter 'node_ids' is set
      if @api_client.config.client_side_validation && node_ids.nil?
        fail ArgumentError, "Missing the required parameter 'node_ids' when calling ManagementPlaneApiFabricNodesApi.read_nodes_status"
      end
      # resource path
      local_var_path = '/fabric/nodes/status'

      # query parameters
      query_params = {}
      query_params[:'node_ids'] = node_ids

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#read_nodes_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart the inventory sync for the node if it is paused currently.
    # Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;?action=restart_inventory_sync to restart inventory sync of node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restart_inventory_sync_restart_inventory_sync(node_id, opts = {})
      restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, opts)
      nil
    end

    # Restart the inventory sync for the node if it is paused currently.
    # Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&amp;lt;transport-node-id&amp;gt;?action&#x3D;restart_inventory_sync to restart inventory sync of node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.restart_inventory_sync_restart_inventory_sync ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.restart_inventory_sync_restart_inventory_sync"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}?action=restart_inventory_sync'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#restart_inventory_sync_restart_inventory_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Node
    # Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. API PUT /transport-nodes/<transport-node-id> to update fabric node details. 
    # @param node_id 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def update_node(node_id, node, opts = {})
      data, _status_code, _headers = update_node_with_http_info(node_id, node, opts)
      data
    end

    # Update a Node
    # Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&amp;lt;transport-node-id&amp;gt; to update fabric node details. API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. 
    # @param node_id 
    # @param node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def update_node_with_http_info(node_id, node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricNodesApi.update_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ManagementPlaneApiFabricNodesApi.update_node"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling ManagementPlaneApiFabricNodesApi.update_node"
      end
      # resource path
      local_var_path = '/fabric/nodes/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricNodesApi#update_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
