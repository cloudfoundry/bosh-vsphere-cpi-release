=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NSXT
  class ManagementPlaneApiServicesLoadbalancerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a load balancer pool
    # Create a load balancer pool. 
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def create_load_balancer_pool(lb_pool, opts = {})
      data, _status_code, _headers = create_load_balancer_pool_with_http_info(lb_pool, opts)
      data
    end

    # Create a load balancer pool
    # Create a load balancer pool. 
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Fixnum, Hash)>] LbPool data, response status code and response headers
    def create_load_balancer_pool_with_http_info(lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_pool ...'
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling ManagementPlaneApiServicesLoadbalancerApi.create_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#create_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a load balancer pool
    # Delete a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer_pool(pool_id, opts = {})
      delete_load_balancer_pool_with_http_info(pool_id, opts)
      nil
    end

    # Delete a load balancer pool
    # Delete a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_load_balancer_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.delete_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#delete_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of load balancer pools
    # Retrieve a paginated list of load balancer pools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbPoolListResult]
    def list_load_balancer_pools(opts = {})
      data, _status_code, _headers = list_load_balancer_pools_with_http_info(opts)
      data
    end

    # Retrieve a paginated list of load balancer pools
    # Retrieve a paginated list of load balancer pools. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbPoolListResult, Fixnum, Hash)>] LbPoolListResult data, response status code and response headers
    def list_load_balancer_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pools ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesLoadbalancerApi.list_load_balancer_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/loadbalancer/pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#list_load_balancer_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add, remove, or modify load balancer pool members
    # For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
    # @param pool_id 
    # @param pool_member_setting_list 
    # @param action Specifies addition, removal and modification action
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def perform_pool_member_action(pool_id, pool_member_setting_list, action, opts = {})
      data, _status_code, _headers = perform_pool_member_action_with_http_info(pool_id, pool_member_setting_list, action, opts)
      data
    end

    # Add, remove, or modify load balancer pool members
    # For ADD_MEMBERS, pool members will be created and added to load balancer pool. This action is only valid for static pool members. For REMOVE_MEMBERS, pool members will be removed from load balancer pool via IP and port in pool member settings. This action is only valid for static pool members. For UPDATE_MEMBERS, pool members admin state will be updated. This action is valid for both static pool members and dynamic pool members. For dynamic pool members, this update will be stored in customized_members field in load balancer pool member group. 
    # @param pool_id 
    # @param pool_member_setting_list 
    # @param action Specifies addition, removal and modification action
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Fixnum, Hash)>] LbPool data, response status code and response headers
    def perform_pool_member_action_with_http_info(pool_id, pool_member_setting_list, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action"
      end
      # verify the required parameter 'pool_member_setting_list' is set
      if @api_client.config.client_side_validation && pool_member_setting_list.nil?
        fail ArgumentError, "Missing the required parameter 'pool_member_setting_list' when calling ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ManagementPlaneApiServicesLoadbalancerApi.perform_pool_member_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_MEMBERS', 'REMOVE_MEMBERS', 'UPDATE_MEMBERS'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_MEMBERS, REMOVE_MEMBERS, UPDATE_MEMBERS"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pool_member_setting_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#perform_pool_member_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer pool
    # Retrieve a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def read_load_balancer_pool(pool_id, opts = {})
      data, _status_code, _headers = read_load_balancer_pool_with_http_info(pool_id, opts)
      data
    end

    # Retrieve a load balancer pool
    # Retrieve a load balancer pool. 
    # @param pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Fixnum, Hash)>] LbPool data, response status code and response headers
    def read_load_balancer_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.read_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#read_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a load balancer pool
    # Update a load balancer pool. 
    # @param pool_id 
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LbPool]
    def update_load_balancer_pool(pool_id, lb_pool, opts = {})
      data, _status_code, _headers = update_load_balancer_pool_with_http_info(pool_id, lb_pool, opts)
      data
    end

    # Update a load balancer pool
    # Update a load balancer pool. 
    # @param pool_id 
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LbPool, Fixnum, Hash)>] LbPool data, response status code and response headers
    def update_load_balancer_pool_with_http_info(pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling ManagementPlaneApiServicesLoadbalancerApi.update_load_balancer_pool"
      end
      # resource path
      local_var_path = '/loadbalancer/pools/{pool-id}'.sub('{' + 'pool-id' + '}', pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesLoadbalancerApi#update_load_balancer_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
