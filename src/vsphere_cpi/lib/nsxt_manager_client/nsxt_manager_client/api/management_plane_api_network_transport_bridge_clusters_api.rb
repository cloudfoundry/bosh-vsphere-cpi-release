=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNetworkTransportBridgeClustersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Bridge Cluster
    # Creates a bridge cluster. It is collection of transport nodes that will do the bridging for overlay network to vlan networks. Bridge cluster may have one or more transport nodes 
    # @param bridge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [BridgeCluster]
    def create_bridge_cluster(bridge_cluster, opts = {})
      data, _status_code, _headers = create_bridge_cluster_with_http_info(bridge_cluster, opts)
      data
    end

    # Create a Bridge Cluster
    # Creates a bridge cluster. It is collection of transport nodes that will do the bridging for overlay network to vlan networks. Bridge cluster may have one or more transport nodes 
    # @param bridge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeCluster, Fixnum, Hash)>] BridgeCluster data, response status code and response headers
    def create_bridge_cluster_with_http_info(bridge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeClustersApi.create_bridge_cluster ...'
      end
      # verify the required parameter 'bridge_cluster' is set
      if @api_client.config.client_side_validation && bridge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_cluster' when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.create_bridge_cluster"
      end
      # resource path
      local_var_path = '/bridge-clusters'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeClustersApi#create_bridge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Bridge Cluster
    # Removes the specified Bridge Cluster.
    # @param bridgecluster_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_cluster(bridgecluster_id, opts = {})
      delete_bridge_cluster_with_http_info(bridgecluster_id, opts)
      nil
    end

    # Delete a Bridge Cluster
    # Removes the specified Bridge Cluster.
    # @param bridgecluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_cluster_with_http_info(bridgecluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeClustersApi.delete_bridge_cluster ...'
      end
      # verify the required parameter 'bridgecluster_id' is set
      if @api_client.config.client_side_validation && bridgecluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridgecluster_id' when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.delete_bridge_cluster"
      end
      # resource path
      local_var_path = '/bridge-clusters/{bridgecluster-id}'.sub('{' + 'bridgecluster-id' + '}', bridgecluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeClustersApi#delete_bridge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Information about a bridge cluster
    # Returns information about a specified bridge cluster.
    # @param bridgecluster_id 
    # @param [Hash] opts the optional parameters
    # @return [BridgeCluster]
    def get_bridge_cluster(bridgecluster_id, opts = {})
      data, _status_code, _headers = get_bridge_cluster_with_http_info(bridgecluster_id, opts)
      data
    end

    # Get Information about a bridge cluster
    # Returns information about a specified bridge cluster.
    # @param bridgecluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeCluster, Fixnum, Hash)>] BridgeCluster data, response status code and response headers
    def get_bridge_cluster_with_http_info(bridgecluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeClustersApi.get_bridge_cluster ...'
      end
      # verify the required parameter 'bridgecluster_id' is set
      if @api_client.config.client_side_validation && bridgecluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridgecluster_id' when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.get_bridge_cluster"
      end
      # resource path
      local_var_path = '/bridge-clusters/{bridgecluster-id}'.sub('{' + 'bridgecluster-id' + '}', bridgecluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeClustersApi#get_bridge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns status of a specified Bridge Cluster
    # Get the status for the Bridge Cluster of the given cluster id
    # @param cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [BridgeClusterStatus]
    def get_bridge_cluster_status(cluster_id, opts = {})
      data, _status_code, _headers = get_bridge_cluster_status_with_http_info(cluster_id, opts)
      data
    end

    # Returns status of a specified Bridge Cluster
    # Get the status for the Bridge Cluster of the given cluster id
    # @param cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(BridgeClusterStatus, Fixnum, Hash)>] BridgeClusterStatus data, response status code and response headers
    def get_bridge_cluster_status_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeClustersApi.get_bridge_cluster_status ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.get_bridge_cluster_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/bridge-clusters/{cluster-id}/status'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeClustersApi#get_bridge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All Bridge Clusters
    # Returns information about all configured bridge clusters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BridgeClusterListResult]
    def list_bridge_clusters(opts = {})
      data, _status_code, _headers = list_bridge_clusters_with_http_info(opts)
      data
    end

    # List All Bridge Clusters
    # Returns information about all configured bridge clusters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BridgeClusterListResult, Fixnum, Hash)>] BridgeClusterListResult data, response status code and response headers
    def list_bridge_clusters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeClustersApi.list_bridge_clusters ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.list_bridge_clusters, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.list_bridge_clusters, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/bridge-clusters'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeClustersApi#list_bridge_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Bridge Cluster
    # Modifies a existing bridge cluster. One of more transport nodes can be added or removed from the bridge cluster using this API. 
    # @param bridgecluster_id 
    # @param bridge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [BridgeCluster]
    def update_bridge_cluster(bridgecluster_id, bridge_cluster, opts = {})
      data, _status_code, _headers = update_bridge_cluster_with_http_info(bridgecluster_id, bridge_cluster, opts)
      data
    end

    # Update a Bridge Cluster
    # Modifies a existing bridge cluster. One of more transport nodes can be added or removed from the bridge cluster using this API. 
    # @param bridgecluster_id 
    # @param bridge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeCluster, Fixnum, Hash)>] BridgeCluster data, response status code and response headers
    def update_bridge_cluster_with_http_info(bridgecluster_id, bridge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportBridgeClustersApi.update_bridge_cluster ...'
      end
      # verify the required parameter 'bridgecluster_id' is set
      if @api_client.config.client_side_validation && bridgecluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridgecluster_id' when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.update_bridge_cluster"
      end
      # verify the required parameter 'bridge_cluster' is set
      if @api_client.config.client_side_validation && bridge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_cluster' when calling ManagementPlaneApiNetworkTransportBridgeClustersApi.update_bridge_cluster"
      end
      # resource path
      local_var_path = '/bridge-clusters/{bridgecluster-id}'.sub('{' + 'bridgecluster-id' + '}', bridgecluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportBridgeClustersApi#update_bridge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
