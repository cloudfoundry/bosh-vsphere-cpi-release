=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create transport node collection by attaching Transport Node Profile to cluster.
    # When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. 
    # @param transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeCollection]
    def create_transport_node_collection(transport_node_collection, opts = {})
      data, _status_code, _headers = create_transport_node_collection_with_http_info(transport_node_collection, opts)
      data
    end

    # Create transport node collection by attaching Transport Node Profile to cluster.
    # When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. 
    # @param transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeCollection, Fixnum, Hash)>] TransportNodeCollection data, response status code and response headers
    def create_transport_node_collection_with_http_info(transport_node_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.create_transport_node_collection ...'
      end
      # verify the required parameter 'transport_node_collection' is set
      if @api_client.config.client_side_validation && transport_node_collection.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection' when calling ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.create_transport_node_collection"
      end
      # resource path
      local_var_path = '/transport-node-collections'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi#create_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Detach transport node profile from compute collection.
    # By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transport_node_collection(transport_node_collection_id, opts = {})
      delete_transport_node_collection_with_http_info(transport_node_collection_id, opts)
      nil
    end

    # Detach transport node profile from compute collection.
    # By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transport_node_collection_with_http_info(transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.delete_transport_node_collection ...'
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.delete_transport_node_collection"
      end
      # resource path
      local_var_path = '/transport-node-collections/{transport-node-collection-id}'.sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi#delete_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transport Node collection by id
    # Returns transport node collection by id
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeCollection]
    def get_transport_node_collection(transport_node_collection_id, opts = {})
      data, _status_code, _headers = get_transport_node_collection_with_http_info(transport_node_collection_id, opts)
      data
    end

    # Get Transport Node collection by id
    # Returns transport node collection by id
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeCollection, Fixnum, Hash)>] TransportNodeCollection data, response status code and response headers
    def get_transport_node_collection_with_http_info(transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.get_transport_node_collection ...'
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.get_transport_node_collection"
      end
      # resource path
      local_var_path = '/transport-node-collections/{transport-node-collection-id}'.sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi#get_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transport Node collection application state
    # Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeCollectionState]
    def get_transport_node_collection_state(transport_node_collection_id, opts = {})
      data, _status_code, _headers = get_transport_node_collection_state_with_http_info(transport_node_collection_id, opts)
      data
    end

    # Get Transport Node collection application state
    # Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeCollectionState, Fixnum, Hash)>] TransportNodeCollectionState data, response status code and response headers
    def get_transport_node_collection_state_with_http_info(transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.get_transport_node_collection_state ...'
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.get_transport_node_collection_state"
      end
      # resource path
      local_var_path = '/transport-node-collections/{transport-node-collection-id}/state'.sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeCollectionState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi#get_transport_node_collection_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Transport Node collections
    # Returns all Transport Node collections
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeCollectionListResult]
    def list_transport_node_collections(opts = {})
      data, _status_code, _headers = list_transport_node_collections_with_http_info(opts)
      data
    end

    # List Transport Node collections
    # Returns all Transport Node collections
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeCollectionListResult, Fixnum, Hash)>] TransportNodeCollectionListResult data, response status code and response headers
    def list_transport_node_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.list_transport_node_collections ...'
      end
      # resource path
      local_var_path = '/transport-node-collections'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi#list_transport_node_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Transport Node collection
    # Attach different transport node profile to compute collection by updating transport node collection. 
    # @param transport_node_collection_id 
    # @param transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeCollection]
    def update_transport_node_collection(transport_node_collection_id, transport_node_collection, opts = {})
      data, _status_code, _headers = update_transport_node_collection_with_http_info(transport_node_collection_id, transport_node_collection, opts)
      data
    end

    # Update Transport Node collection
    # Attach different transport node profile to compute collection by updating transport node collection. 
    # @param transport_node_collection_id 
    # @param transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeCollection, Fixnum, Hash)>] TransportNodeCollection data, response status code and response headers
    def update_transport_node_collection_with_http_info(transport_node_collection_id, transport_node_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.update_transport_node_collection ...'
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.update_transport_node_collection"
      end
      # verify the required parameter 'transport_node_collection' is set
      if @api_client.config.client_side_validation && transport_node_collection.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection' when calling ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi.update_transport_node_collection"
      end
      # resource path
      local_var_path = '/transport-node-collections/{transport-node-collection-id}'.sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transport_node_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiNetworkTransportTransportNodeCollectionsApi#update_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
