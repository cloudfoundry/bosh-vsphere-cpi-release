=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiFabricContainerClustersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return a container cluster
    # Returns information about a specific container cluster
    # @param container_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [ContainerCluster]
    def get_container_cluster(container_cluster_id, opts = {})
      data, _status_code, _headers = get_container_cluster_with_http_info(container_cluster_id, opts)
      data
    end

    # Return a container cluster
    # Returns information about a specific container cluster
    # @param container_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerCluster, Fixnum, Hash)>] ContainerCluster data, response status code and response headers
    def get_container_cluster_with_http_info(container_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.get_container_cluster ...'
      end
      # verify the required parameter 'container_cluster_id' is set
      if @api_client.config.client_side_validation && container_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_id' when calling ManagementPlaneApiFabricContainerClustersApi.get_container_cluster"
      end
      # resource path
      local_var_path = '/fabric/container-clusters/{container-cluster-id}'.sub('{' + 'container-cluster-id' + '}', container_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#get_container_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a container cluster node
    # Returns information about a specific container cluster node.
    # @param container_cluster_node_id 
    # @param [Hash] opts the optional parameters
    # @return [ContainerClusterNode]
    def get_container_cluster_node(container_cluster_node_id, opts = {})
      data, _status_code, _headers = get_container_cluster_node_with_http_info(container_cluster_node_id, opts)
      data
    end

    # Return a container cluster node
    # Returns information about a specific container cluster node.
    # @param container_cluster_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerClusterNode, Fixnum, Hash)>] ContainerClusterNode data, response status code and response headers
    def get_container_cluster_node_with_http_info(container_cluster_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.get_container_cluster_node ...'
      end
      # verify the required parameter 'container_cluster_node_id' is set
      if @api_client.config.client_side_validation && container_cluster_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_node_id' when calling ManagementPlaneApiFabricContainerClustersApi.get_container_cluster_node"
      end
      # resource path
      local_var_path = '/fabric/container-cluster-nodes/{container-cluster-node-id}'.sub('{' + 'container-cluster-node-id' + '}', container_cluster_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#get_container_cluster_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns an ingress policy spec
    # Returns information about a specific ingress policy.
    # @param ingress_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [ContainerIngressPolicy]
    def get_container_ingress_policy(ingress_policy_id, opts = {})
      data, _status_code, _headers = get_container_ingress_policy_with_http_info(ingress_policy_id, opts)
      data
    end

    # Returns an ingress policy spec
    # Returns information about a specific ingress policy.
    # @param ingress_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerIngressPolicy, Fixnum, Hash)>] ContainerIngressPolicy data, response status code and response headers
    def get_container_ingress_policy_with_http_info(ingress_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.get_container_ingress_policy ...'
      end
      # verify the required parameter 'ingress_policy_id' is set
      if @api_client.config.client_side_validation && ingress_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingress_policy_id' when calling ManagementPlaneApiFabricContainerClustersApi.get_container_ingress_policy"
      end
      # resource path
      local_var_path = '/fabric/container-ingress-policies/{ingress-policy-id}'.sub('{' + 'ingress-policy-id' + '}', ingress_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerIngressPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#get_container_ingress_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a network policy spec
    # Returns information about a specific network policy.
    # @param network_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [ContainerNetworkPolicy]
    def get_container_network_policy(network_policy_id, opts = {})
      data, _status_code, _headers = get_container_network_policy_with_http_info(network_policy_id, opts)
      data
    end

    # Return a network policy spec
    # Returns information about a specific network policy.
    # @param network_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerNetworkPolicy, Fixnum, Hash)>] ContainerNetworkPolicy data, response status code and response headers
    def get_container_network_policy_with_http_info(network_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.get_container_network_policy ...'
      end
      # verify the required parameter 'network_policy_id' is set
      if @api_client.config.client_side_validation && network_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_id' when calling ManagementPlaneApiFabricContainerClustersApi.get_container_network_policy"
      end
      # resource path
      local_var_path = '/fabric/container-network-policies/{network-policy-id}'.sub('{' + 'network-policy-id' + '}', network_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerNetworkPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#get_container_network_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the list of container cluster nodes
    # Returns information about all container cluster nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_id Identifier of the container cluster
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ContainerClusterNodeListResult]
    def list_container_cluster_nodes(opts = {})
      data, _status_code, _headers = list_container_cluster_nodes_with_http_info(opts)
      data
    end

    # Return the list of container cluster nodes
    # Returns information about all container cluster nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_id Identifier of the container cluster
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ContainerClusterNodeListResult, Fixnum, Hash)>] ContainerClusterNodeListResult data, response status code and response headers
    def list_container_cluster_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.list_container_cluster_nodes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_cluster_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_cluster_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fabric/container-cluster-nodes'

      # query parameters
      query_params = {}
      query_params[:'container_cluster_id'] = opts[:'container_cluster_id'] if !opts[:'container_cluster_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#list_container_cluster_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the List of Container Clusters
    # Returns information about all Container Clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cluster_type Type of container cluster
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :infra_type Type of infrastructure
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ContainerClusterListResult]
    def list_container_clusters(opts = {})
      data, _status_code, _headers = list_container_clusters_with_http_info(opts)
      data
    end

    # Return the List of Container Clusters
    # Returns information about all Container Clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cluster_type Type of container cluster
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :infra_type Type of infrastructure
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ContainerClusterListResult, Fixnum, Hash)>] ContainerClusterListResult data, response status code and response headers
    def list_container_clusters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.list_container_clusters ...'
      end
      if @api_client.config.client_side_validation && opts[:'cluster_type'] && !['PAS', 'PKS', 'Kubernetes', 'Openshift', 'WCP', 'Other'].include?(opts[:'cluster_type'])
        fail ArgumentError, 'invalid value for "cluster_type", must be one of PAS, PKS, Kubernetes, Openshift, WCP, Other'
      end
      if @api_client.config.client_side_validation && opts[:'infra_type'] && !['vSphere', 'AWS', 'Azure', 'VMC', 'KVM', 'Baremetal'].include?(opts[:'infra_type'])
        fail ArgumentError, 'invalid value for "infra_type", must be one of vSphere, AWS, Azure, VMC, KVM, Baremetal'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_clusters, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_clusters, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fabric/container-clusters'

      # query parameters
      query_params = {}
      query_params[:'cluster_type'] = opts[:'cluster_type'] if !opts[:'cluster_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'infra_type'] = opts[:'infra_type'] if !opts[:'infra_type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#list_container_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the List of Container Ingress Policies
    # Returns information about all ingress policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_id Identifier of the container cluster
    # @option opts [String] :container_project_id Identifier of the container project
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ContainerIngressPolicyListResult]
    def list_container_ingress_policies(opts = {})
      data, _status_code, _headers = list_container_ingress_policies_with_http_info(opts)
      data
    end

    # Return the List of Container Ingress Policies
    # Returns information about all ingress policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_id Identifier of the container cluster
    # @option opts [String] :container_project_id Identifier of the container project
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ContainerIngressPolicyListResult, Fixnum, Hash)>] ContainerIngressPolicyListResult data, response status code and response headers
    def list_container_ingress_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.list_container_ingress_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_ingress_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_ingress_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fabric/container-ingress-policies'

      # query parameters
      query_params = {}
      query_params[:'container_cluster_id'] = opts[:'container_cluster_id'] if !opts[:'container_cluster_id'].nil?
      query_params[:'container_project_id'] = opts[:'container_project_id'] if !opts[:'container_project_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerIngressPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#list_container_ingress_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the List of Container Network Policies
    # Returns information about all network policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_id Identifier of the container cluster
    # @option opts [String] :container_project_id Identifier of the container project
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ContainerNetworkPolicyListResult]
    def list_container_network_policies(opts = {})
      data, _status_code, _headers = list_container_network_policies_with_http_info(opts)
      data
    end

    # Return the List of Container Network Policies
    # Returns information about all network policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_id Identifier of the container cluster
    # @option opts [String] :container_project_id Identifier of the container project
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ContainerNetworkPolicyListResult, Fixnum, Hash)>] ContainerNetworkPolicyListResult data, response status code and response headers
    def list_container_network_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiFabricContainerClustersApi.list_container_network_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_network_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiFabricContainerClustersApi.list_container_network_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fabric/container-network-policies'

      # query parameters
      query_params = {}
      query_params[:'container_cluster_id'] = opts[:'container_cluster_id'] if !opts[:'container_cluster_id'].nil?
      query_params[:'container_project_id'] = opts[:'container_project_id'] if !opts[:'container_project_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerNetworkPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiFabricContainerClustersApi#list_container_network_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
