=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new BGP Neighbor on a Logical Router
    # Add a new BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def add_bgp_neighbor(logical_router_id, bgp_neighbor, opts = {})
      data, _status_code, _headers = add_bgp_neighbor_with_http_info(logical_router_id, bgp_neighbor, opts)
      data
    end

    # Add a new BGP Neighbor on a Logical Router
    # Add a new BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def add_bgp_neighbor_with_http_info(logical_router_id, bgp_neighbor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_bgp_neighbor ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_bgp_neighbor"
      end
      # verify the required parameter 'bgp_neighbor' is set
      if @api_client.config.client_side_validation && bgp_neighbor.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_neighbor' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_bgp_neighbor"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_neighbor)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#add_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add IPPrefixList on a Logical Router
    # Adds a new IPPrefixList on a Logical Router 
    # @param logical_router_id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [IPPrefixList]
    def add_ip_prefix_list(logical_router_id, ip_prefix_list, opts = {})
      data, _status_code, _headers = add_ip_prefix_list_with_http_info(logical_router_id, ip_prefix_list, opts)
      data
    end

    # Add IPPrefixList on a Logical Router
    # Adds a new IPPrefixList on a Logical Router 
    # @param logical_router_id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPPrefixList, Fixnum, Hash)>] IPPrefixList data, response status code and response headers
    def add_ip_prefix_list_with_http_info(logical_router_id, ip_prefix_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_ip_prefix_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_ip_prefix_list"
      end
      # verify the required parameter 'ip_prefix_list' is set
      if @api_client.config.client_side_validation && ip_prefix_list.nil?
        fail ArgumentError, "Missing the required parameter 'ip_prefix_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_ip_prefix_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/ip-prefix-lists'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_prefix_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#add_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add RouteMap on a Logical Router
    # Adds a new RouteMap on a Logical Router 
    # @param logical_router_id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [RouteMap]
    def add_route_map(logical_router_id, route_map, opts = {})
      data, _status_code, _headers = add_route_map_with_http_info(logical_router_id, route_map, opts)
      data
    end

    # Add RouteMap on a Logical Router
    # Adds a new RouteMap on a Logical Router 
    # @param logical_router_id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteMap, Fixnum, Hash)>] RouteMap data, response status code and response headers
    def add_route_map_with_http_info(logical_router_id, route_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_route_map ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_route_map"
      end
      # verify the required parameter 'route_map' is set
      if @api_client.config.client_side_validation && route_map.nil?
        fail ArgumentError, "Missing the required parameter 'route_map' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_route_map"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-maps'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(route_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#add_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Static Routes on a Logical Router
    # Adds a new static route on a Logical Router 
    # @param logical_router_id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoute]
    def add_static_route(logical_router_id, static_route, opts = {})
      data, _status_code, _headers = add_static_route_with_http_info(logical_router_id, static_route, opts)
      data
    end

    # Add Static Routes on a Logical Router
    # Adds a new static route on a Logical Router 
    # @param logical_router_id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoute, Fixnum, Hash)>] StaticRoute data, response status code and response headers
    def add_static_route_with_http_info(logical_router_id, static_route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_static_route ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_static_route"
      end
      # verify the required parameter 'static_route' is set
      if @api_client.config.client_side_validation && static_route.nil?
        fail ArgumentError, "Missing the required parameter 'static_route' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.add_static_route"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/static-routes'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#add_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new BGP community list on a Logical Router
    # Add a new BGP Community List on a Logical Router 
    # @param logical_router_id 
    # @param bgp_community_list 
    # @param [Hash] opts the optional parameters
    # @return [BGPCommunityList]
    def create_bgp_community_list(logical_router_id, bgp_community_list, opts = {})
      data, _status_code, _headers = create_bgp_community_list_with_http_info(logical_router_id, bgp_community_list, opts)
      data
    end

    # Create a new BGP community list on a Logical Router
    # Add a new BGP Community List on a Logical Router 
    # @param logical_router_id 
    # @param bgp_community_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BGPCommunityList, Fixnum, Hash)>] BGPCommunityList data, response status code and response headers
    def create_bgp_community_list_with_http_info(logical_router_id, bgp_community_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_bgp_community_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_bgp_community_list"
      end
      # verify the required parameter 'bgp_community_list' is set
      if @api_client.config.client_side_validation && bgp_community_list.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_community_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_bgp_community_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/community-lists'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_community_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BGPCommunityList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#create_bgp_community_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new DADProfile
    # Adds a new DADProfile 
    # @param dad_profile 
    # @param [Hash] opts the optional parameters
    # @return [DADProfile]
    def create_dad_profile(dad_profile, opts = {})
      data, _status_code, _headers = create_dad_profile_with_http_info(dad_profile, opts)
      data
    end

    # Create a new DADProfile
    # Adds a new DADProfile 
    # @param dad_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DADProfile, Fixnum, Hash)>] DADProfile data, response status code and response headers
    def create_dad_profile_with_http_info(dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_dad_profile ...'
      end
      # verify the required parameter 'dad_profile' is set
      if @api_client.config.client_side_validation && dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_dad_profile"
      end
      # resource path
      local_var_path = '/ipv6/dad-profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DADProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#create_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new NDRA Profile
    # Adds a new NDRAProfile 
    # @param ndra_profile 
    # @param [Hash] opts the optional parameters
    # @return [NDRAProfile]
    def create_ndra_profile(ndra_profile, opts = {})
      data, _status_code, _headers = create_ndra_profile_with_http_info(ndra_profile, opts)
      data
    end

    # Create a new NDRA Profile
    # Adds a new NDRAProfile 
    # @param ndra_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NDRAProfile, Fixnum, Hash)>] NDRAProfile data, response status code and response headers
    def create_ndra_profile_with_http_info(ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile' is set
      if @api_client.config.client_side_validation && ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.create_ndra_profile"
      end
      # resource path
      local_var_path = '/ipv6/nd-ra-profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NDRAProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#create_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific BGP community list from a Logical Router
    # Delete a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bgp_community_list(logical_router_id, community_list_id, opts = {})
      delete_bgp_community_list_with_http_info(logical_router_id, community_list_id, opts)
      nil
    end

    # Delete a specific BGP community list from a Logical Router
    # Delete a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bgp_community_list_with_http_info(logical_router_id, community_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_bgp_community_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_bgp_community_list"
      end
      # verify the required parameter 'community_list_id' is set
      if @api_client.config.client_side_validation && community_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'community_list_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_bgp_community_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'community-list-id' + '}', community_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_bgp_community_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific BGP Neighbor on a Logical Router
    # Delete a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bgp_neighbor(logical_router_id, id, opts = {})
      delete_bgp_neighbor_with_http_info(logical_router_id, id, opts)
      nil
    end

    # Delete a specific BGP Neighbor on a Logical Router
    # Delete a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bgp_neighbor_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_bgp_neighbor ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_bgp_neighbor"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DAD Profile
    # Delete DADProfile 
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dad_profile(dad_profile_id, opts = {})
      delete_dad_profile_with_http_info(dad_profile_id, opts)
      nil
    end

    # Delete DAD Profile
    # Delete DADProfile 
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dad_profile_with_http_info(dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_dad_profile"
      end
      # resource path
      local_var_path = '/ipv6/dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific IPPrefixList on a Logical Router
    # Deletes a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_prefix_list(logical_router_id, id, opts = {})
      delete_ip_prefix_list_with_http_info(logical_router_id, id, opts)
      nil
    end

    # Delete a specific IPPrefixList on a Logical Router
    # Deletes a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_prefix_list_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_ip_prefix_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_ip_prefix_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_ip_prefix_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NDRA Profile
    # Delete NDRAProfile 
    # @param nd_ra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ndra_profile(nd_ra_profile_id, opts = {})
      delete_ndra_profile_with_http_info(nd_ra_profile_id, opts)
      nil
    end

    # Delete NDRA Profile
    # Delete NDRAProfile 
    # @param nd_ra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ndra_profile_with_http_info(nd_ra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_ndra_profile ...'
      end
      # verify the required parameter 'nd_ra_profile_id' is set
      if @api_client.config.client_side_validation && nd_ra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'nd_ra_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_ndra_profile"
      end
      # resource path
      local_var_path = '/ipv6/nd-ra-profiles/{nd-ra-profile-id}'.sub('{' + 'nd-ra-profile-id' + '}', nd_ra_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific RouteMap on a Logical Router
    # Deletes a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_route_map(logical_router_id, id, opts = {})
      delete_route_map_with_http_info(logical_router_id, id, opts)
      nil
    end

    # Delete a specific RouteMap on a Logical Router
    # Deletes a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_route_map_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_route_map ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_route_map"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_route_map"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-maps/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific Static Route on a Logical Router
    # Deletes a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_static_route(logical_router_id, id, opts = {})
      delete_static_route_with_http_info(logical_router_id, id, opts)
      nil
    end

    # Delete a specific Static Route on a Logical Router
    # Deletes a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_static_route_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_static_route ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_static_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.delete_static_route"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/static-routes/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#delete_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Paginated list of BGP community lists on a Logical Router
    # Paginated list of BGP Community Lists on a Logical Router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BGPCommunityListListResult]
    def list_bgp_community_lists(logical_router_id, opts = {})
      data, _status_code, _headers = list_bgp_community_lists_with_http_info(logical_router_id, opts)
      data
    end

    # Paginated list of BGP community lists on a Logical Router
    # Paginated list of BGP Community Lists on a Logical Router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BGPCommunityListListResult, Fixnum, Hash)>] BGPCommunityListListResult data, response status code and response headers
    def list_bgp_community_lists_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_community_lists ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_community_lists"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_community_lists, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_community_lists, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/community-lists'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BGPCommunityListListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_bgp_community_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Paginated list of BGP Neighbors on a Logical Router
    # Paginated list of BGP Neighbors on a Logical Router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BgpNeighborListResult]
    def list_bgp_neighbors(logical_router_id, opts = {})
      data, _status_code, _headers = list_bgp_neighbors_with_http_info(logical_router_id, opts)
      data
    end

    # Paginated list of BGP Neighbors on a Logical Router
    # Paginated list of BGP Neighbors on a Logical Router 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BgpNeighborListResult, Fixnum, Hash)>] BgpNeighborListResult data, response status code and response headers
    def list_bgp_neighbors_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_neighbors ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_neighbors"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_neighbors, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_bgp_neighbors, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighborListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_bgp_neighbors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read All IPV6 DADProfiles
    # Returns all IPv6 DADProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DADProfileListResult]
    def list_dad_profiles(opts = {})
      data, _status_code, _headers = list_dad_profiles_with_http_info(opts)
      data
    end

    # Read All IPV6 DADProfiles
    # Returns all IPv6 DADProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DADProfileListResult, Fixnum, Hash)>] DADProfileListResult data, response status code and response headers
    def list_dad_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_dad_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_dad_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_dad_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ipv6/dad-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DADProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_dad_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Paginated List of IPPrefixLists
    # Paginated List of IPPrefixLists
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPPrefixListListResult]
    def list_ip_prefix_lists(logical_router_id, opts = {})
      data, _status_code, _headers = list_ip_prefix_lists_with_http_info(logical_router_id, opts)
      data
    end

    # Paginated List of IPPrefixLists
    # Paginated List of IPPrefixLists
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPPrefixListListResult, Fixnum, Hash)>] IPPrefixListListResult data, response status code and response headers
    def list_ip_prefix_lists_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ip_prefix_lists ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ip_prefix_lists"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ip_prefix_lists, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ip_prefix_lists, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/ip-prefix-lists'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixListListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_ip_prefix_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read All IPV6 NDRA Profiles
    # Returns all IPv6 NDRA Profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [NDRAProfileListResult]
    def list_ndra_profiles(opts = {})
      data, _status_code, _headers = list_ndra_profiles_with_http_info(opts)
      data
    end

    # Read All IPV6 NDRA Profiles
    # Returns all IPv6 NDRA Profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(NDRAProfileListResult, Fixnum, Hash)>] NDRAProfileListResult data, response status code and response headers
    def list_ndra_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ndra_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ndra_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_ndra_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/ipv6/nd-ra-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NDRAProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_ndra_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Paginated List of RouteMaps
    # Paginated List of RouteMaps
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RouteMapListResult]
    def list_route_maps(logical_router_id, opts = {})
      data, _status_code, _headers = list_route_maps_with_http_info(logical_router_id, opts)
      data
    end

    # Paginated List of RouteMaps
    # Paginated List of RouteMaps
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RouteMapListResult, Fixnum, Hash)>] RouteMapListResult data, response status code and response headers
    def list_route_maps_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_route_maps ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_route_maps"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_route_maps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_route_maps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-maps'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_route_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Paginated List of Static Routes
    # Returns information about configured static routes, including the network address and next hops for each static route. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [StaticRouteListResult]
    def list_static_routes(logical_router_id, opts = {})
      data, _status_code, _headers = list_static_routes_with_http_info(logical_router_id, opts)
      data
    end

    # Paginated List of Static Routes
    # Returns information about configured static routes, including the network address and next hops for each static route. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(StaticRouteListResult, Fixnum, Hash)>] StaticRouteListResult data, response status code and response headers
    def list_static_routes_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_static_routes ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_static_routes"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_static_routes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.list_static_routes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/static-routes'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRouteListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#list_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the Advertisement Rules on a Logical Router
    # Returns the advertisement rule list for the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [AdvertiseRuleList]
    def read_advertise_rule_list(logical_router_id, opts = {})
      data, _status_code, _headers = read_advertise_rule_list_with_http_info(logical_router_id, opts)
      data
    end

    # Read the Advertisement Rules on a Logical Router
    # Returns the advertisement rule list for the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertiseRuleList, Fixnum, Hash)>] AdvertiseRuleList data, response status code and response headers
    def read_advertise_rule_list_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_advertise_rule_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_advertise_rule_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/advertisement/rules'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertiseRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_advertise_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the Advertisement Configuration on a Logical Router
    # Returns information about the routes to be advertised by the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [AdvertisementConfig]
    def read_advertisement_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_advertisement_config_with_http_info(logical_router_id, opts)
      data
    end

    # Read the Advertisement Configuration on a Logical Router
    # Returns information about the routes to be advertised by the specified TIER1 logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertisementConfig, Fixnum, Hash)>] AdvertisementConfig data, response status code and response headers
    def read_advertisement_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_advertisement_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_advertisement_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/advertisement'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertisementConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_advertisement_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a specific BGP community list from a Logical Router
    # Read a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param [Hash] opts the optional parameters
    # @return [BGPCommunityList]
    def read_bgp_community_list(logical_router_id, community_list_id, opts = {})
      data, _status_code, _headers = read_bgp_community_list_with_http_info(logical_router_id, community_list_id, opts)
      data
    end

    # Read a specific BGP community list from a Logical Router
    # Read a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BGPCommunityList, Fixnum, Hash)>] BGPCommunityList data, response status code and response headers
    def read_bgp_community_list_with_http_info(logical_router_id, community_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_community_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_community_list"
      end
      # verify the required parameter 'community_list_id' is set
      if @api_client.config.client_side_validation && community_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'community_list_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_community_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'community-list-id' + '}', community_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BGPCommunityList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_bgp_community_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the BGP Configuration on a Logical Router
    # Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [BgpConfig]
    def read_bgp_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_bgp_config_with_http_info(logical_router_id, opts)
      data
    end

    # Read the BGP Configuration on a Logical Router
    # Returns information about the BGP configuration on a specified logical router. Information includes whether or not the BGP configuration is enabled, the AS number, and whether or not graceful restart is enabled. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpConfig, Fixnum, Hash)>] BgpConfig data, response status code and response headers
    def read_bgp_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_bgp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a specific BGP Neighbor on a Logical Router
    # Read a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def read_bgp_neighbor(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_bgp_neighbor_with_http_info(logical_router_id, id, opts)
      data
    end

    # Read a specific BGP Neighbor on a Logical Router
    # Read a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def read_bgp_neighbor_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_neighbor ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_neighbor"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a specific BGP Neighbor with password on a Logical Router
    # Read a specific BGP Neighbor details with password on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def read_bgp_neighbor_with_password_show_sensitive_data(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_bgp_neighbor_with_password_show_sensitive_data_with_http_info(logical_router_id, id, opts)
      data
    end

    # Read a specific BGP Neighbor with password on a Logical Router
    # Read a specific BGP Neighbor details with password on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def read_bgp_neighbor_with_password_show_sensitive_data_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_neighbor_with_password_show_sensitive_data ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_neighbor_with_password_show_sensitive_data"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_bgp_neighbor_with_password_show_sensitive_data"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}?action=show-sensitive-data'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_bgp_neighbor_with_password_show_sensitive_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read specified IPV6 DADProfile
    # Returns information about specified IPv6 DADProfile. 
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DADProfile]
    def read_dad_profile(dad_profile_id, opts = {})
      data, _status_code, _headers = read_dad_profile_with_http_info(dad_profile_id, opts)
      data
    end

    # Read specified IPV6 DADProfile
    # Returns information about specified IPv6 DADProfile. 
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DADProfile, Fixnum, Hash)>] DADProfile data, response status code and response headers
    def read_dad_profile_with_http_info(dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_dad_profile"
      end
      # resource path
      local_var_path = '/ipv6/dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DADProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the debug information for the logical router
    # API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def read_debug_info_text(logical_router_id, opts = {})
      data, _status_code, _headers = read_debug_info_text_with_http_info(logical_router_id, opts)
      data
    end

    # Read the debug information for the logical router
    # API to download below information as text which will be used for debugging and troubleshooting. 1) Logical router sub-components and ports. 2) Routing configuration as sent to central control plane. 3) TIER1 advertised network information. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def read_debug_info_text_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_debug_info_text ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_debug_info_text"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/debug-info?format=text'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_debug_info_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific IPPrefixList on a Logical Router
    # Read a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [IPPrefixList]
    def read_ip_prefix_list(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_ip_prefix_list_with_http_info(logical_router_id, id, opts)
      data
    end

    # Get a specific IPPrefixList on a Logical Router
    # Read a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPPrefixList, Fixnum, Hash)>] IPPrefixList data, response status code and response headers
    def read_ip_prefix_list_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_ip_prefix_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_ip_prefix_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_ip_prefix_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read specified IPV6 NDRA Profile
    # Returns information about specified IPv6 NDRA Profile. 
    # @param nd_ra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [NDRAProfile]
    def read_ndra_profile(nd_ra_profile_id, opts = {})
      data, _status_code, _headers = read_ndra_profile_with_http_info(nd_ra_profile_id, opts)
      data
    end

    # Read specified IPV6 NDRA Profile
    # Returns information about specified IPv6 NDRA Profile. 
    # @param nd_ra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NDRAProfile, Fixnum, Hash)>] NDRAProfile data, response status code and response headers
    def read_ndra_profile_with_http_info(nd_ra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_ndra_profile ...'
      end
      # verify the required parameter 'nd_ra_profile_id' is set
      if @api_client.config.client_side_validation && nd_ra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'nd_ra_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_ndra_profile"
      end
      # resource path
      local_var_path = '/ipv6/nd-ra-profiles/{nd-ra-profile-id}'.sub('{' + 'nd-ra-profile-id' + '}', nd_ra_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NDRAProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the Redistribution Configuration on a Logical Router
    # Returns information about configured route redistribution for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionConfig]
    def read_redistribution_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_redistribution_config_with_http_info(logical_router_id, opts)
      data
    end

    # Read the Redistribution Configuration on a Logical Router
    # Returns information about configured route redistribution for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionConfig, Fixnum, Hash)>] RedistributionConfig data, response status code and response headers
    def read_redistribution_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_redistribution_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_redistribution_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/redistribution'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_redistribution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read All the Redistribution Rules on a Logical Router
    # Returns all the route redistribution rules for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionRuleList]
    def read_redistribution_rule_list(logical_router_id, opts = {})
      data, _status_code, _headers = read_redistribution_rule_list_with_http_info(logical_router_id, opts)
      data
    end

    # Read All the Redistribution Rules on a Logical Router
    # Returns all the route redistribution rules for the specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionRuleList, Fixnum, Hash)>] RedistributionRuleList data, response status code and response headers
    def read_redistribution_rule_list_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_redistribution_rule_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_redistribution_rule_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/redistribution/rules'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_redistribution_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific RouteMap on a Logical Router
    # Read a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [RouteMap]
    def read_route_map(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_route_map_with_http_info(logical_router_id, id, opts)
      data
    end

    # Get a specific RouteMap on a Logical Router
    # Read a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteMap, Fixnum, Hash)>] RouteMap data, response status code and response headers
    def read_route_map_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_route_map ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_route_map"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_route_map"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-maps/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the Routing Configuration
    # Returns the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [RoutingConfig]
    def read_routing_config(logical_router_id, opts = {})
      data, _status_code, _headers = read_routing_config_with_http_info(logical_router_id, opts)
      data
    end

    # Read the Routing Configuration
    # Returns the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingConfig, Fixnum, Hash)>] RoutingConfig data, response status code and response headers
    def read_routing_config_with_http_info(logical_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_routing_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_routing_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Static Route on a Logical Router
    # Read a specific static routes on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoute]
    def read_static_route(logical_router_id, id, opts = {})
      data, _status_code, _headers = read_static_route_with_http_info(logical_router_id, id, opts)
      data
    end

    # Get a specific Static Route on a Logical Router
    # Read a specific static routes on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoute, Fixnum, Hash)>] StaticRoute data, response status code and response headers
    def read_static_route_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_static_route ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_static_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.read_static_route"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/static-routes/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#read_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unset/Delete password property on specific BGP Neighbor on Logical Router
    # Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [BgpNeighbor]
    def un_set_password_on_bgp_neighbor(logical_router_id, id, opts = {})
      data, _status_code, _headers = un_set_password_on_bgp_neighbor_with_http_info(logical_router_id, id, opts)
      data
    end

    # Unset/Delete password property on specific BGP Neighbor on Logical Router
    # Unset/Delete the password property on the specific BGP Neighbor. No other property of the BgpNeighbor can be updated using this API 
    # @param logical_router_id 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def un_set_password_on_bgp_neighbor_with_http_info(logical_router_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.un_set_password_on_bgp_neighbor ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.un_set_password_on_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.un_set_password_on_bgp_neighbor"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['clear_password'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of clear_password'
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#un_set_password_on_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Advertisement Rules on a Logical Router
    # Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param advertise_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [AdvertiseRuleList]
    def update_advertise_rule_list(logical_router_id, advertise_rule_list, opts = {})
      data, _status_code, _headers = update_advertise_rule_list_with_http_info(logical_router_id, advertise_rule_list, opts)
      data
    end

    # Update the Advertisement Rules on a Logical Router
    # Modifies the advertisement rules on the specified logical router. The PUT request must include all the rules with the networks parameter. Modifiable parameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param advertise_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertiseRuleList, Fixnum, Hash)>] AdvertiseRuleList data, response status code and response headers
    def update_advertise_rule_list_with_http_info(logical_router_id, advertise_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_advertise_rule_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_advertise_rule_list"
      end
      # verify the required parameter 'advertise_rule_list' is set
      if @api_client.config.client_side_validation && advertise_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'advertise_rule_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_advertise_rule_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/advertisement/rules'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(advertise_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertiseRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_advertise_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Advertisement Configuration on a Logical Router
    # Modifies the route advertisement configuration on the specified logical router. 
    # @param logical_router_id 
    # @param advertisement_config 
    # @param [Hash] opts the optional parameters
    # @return [AdvertisementConfig]
    def update_advertisement_config(logical_router_id, advertisement_config, opts = {})
      data, _status_code, _headers = update_advertisement_config_with_http_info(logical_router_id, advertisement_config, opts)
      data
    end

    # Update the Advertisement Configuration on a Logical Router
    # Modifies the route advertisement configuration on the specified logical router. 
    # @param logical_router_id 
    # @param advertisement_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdvertisementConfig, Fixnum, Hash)>] AdvertisementConfig data, response status code and response headers
    def update_advertisement_config_with_http_info(logical_router_id, advertisement_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_advertisement_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_advertisement_config"
      end
      # verify the required parameter 'advertisement_config' is set
      if @api_client.config.client_side_validation && advertisement_config.nil?
        fail ArgumentError, "Missing the required parameter 'advertisement_config' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_advertisement_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/advertisement'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(advertisement_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdvertisementConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_advertisement_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a specific BGP community list from a Logical Router
    # Update a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param bgp_community_list 
    # @param [Hash] opts the optional parameters
    # @return [BGPCommunityList]
    def update_bgp_community_list(logical_router_id, community_list_id, bgp_community_list, opts = {})
      data, _status_code, _headers = update_bgp_community_list_with_http_info(logical_router_id, community_list_id, bgp_community_list, opts)
      data
    end

    # Update a specific BGP community list from a Logical Router
    # Update a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param bgp_community_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BGPCommunityList, Fixnum, Hash)>] BGPCommunityList data, response status code and response headers
    def update_bgp_community_list_with_http_info(logical_router_id, community_list_id, bgp_community_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list"
      end
      # verify the required parameter 'community_list_id' is set
      if @api_client.config.client_side_validation && community_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'community_list_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list"
      end
      # verify the required parameter 'bgp_community_list' is set
      if @api_client.config.client_side_validation && bgp_community_list.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_community_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'community-list-id' + '}', community_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_community_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BGPCommunityList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_bgp_community_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a specific BGP community list from a Logical Router
    # Update a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param bgp_community_list 
    # @param [Hash] opts the optional parameters
    # @return [BGPCommunityList]
    def update_bgp_community_list_old(logical_router_id, community_list_id, bgp_community_list, opts = {})
      data, _status_code, _headers = update_bgp_community_list_old_with_http_info(logical_router_id, community_list_id, bgp_community_list, opts)
      data
    end

    # Update a specific BGP community list from a Logical Router
    # Update a specific BGP community list from a Logical Router 
    # @param logical_router_id 
    # @param community_list_id 
    # @param bgp_community_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BGPCommunityList, Fixnum, Hash)>] BGPCommunityList data, response status code and response headers
    def update_bgp_community_list_old_with_http_info(logical_router_id, community_list_id, bgp_community_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list_old ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list_old"
      end
      # verify the required parameter 'community_list_id' is set
      if @api_client.config.client_side_validation && community_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'community_list_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list_old"
      end
      # verify the required parameter 'bgp_community_list' is set
      if @api_client.config.client_side_validation && bgp_community_list.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_community_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_community_list_old"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/communty-lists/{community-list-id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'community-list-id' + '}', community_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_community_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BGPCommunityList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_bgp_community_list_old\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the BGP Configuration on a Logical Router
    # Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
    # @param logical_router_id 
    # @param bgp_config 
    # @param [Hash] opts the optional parameters
    # @return [BgpConfig]
    def update_bgp_config(logical_router_id, bgp_config, opts = {})
      data, _status_code, _headers = update_bgp_config_with_http_info(logical_router_id, bgp_config, opts)
      data
    end

    # Update the BGP Configuration on a Logical Router
    # Modifies the BGP configuration on a specified TIER0 logical router. Modifiable parameters include enabled, graceful_restart, as_number. 
    # @param logical_router_id 
    # @param bgp_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpConfig, Fixnum, Hash)>] BgpConfig data, response status code and response headers
    def update_bgp_config_with_http_info(logical_router_id, bgp_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_config"
      end
      # verify the required parameter 'bgp_config' is set
      if @api_client.config.client_side_validation && bgp_config.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_config' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_bgp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a specific BGP Neighbor on a Logical Router
    # Update a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [BgpNeighbor]
    def update_bgp_neighbor(logical_router_id, id, bgp_neighbor, opts = {})
      data, _status_code, _headers = update_bgp_neighbor_with_http_info(logical_router_id, id, bgp_neighbor, opts)
      data
    end

    # Update a specific BGP Neighbor on a Logical Router
    # Update a specific BGP Neighbor on a Logical Router 
    # @param logical_router_id 
    # @param id 
    # @param bgp_neighbor 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BgpNeighbor, Fixnum, Hash)>] BgpNeighbor data, response status code and response headers
    def update_bgp_neighbor_with_http_info(logical_router_id, id, bgp_neighbor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_neighbor ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_neighbor"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_neighbor"
      end
      # verify the required parameter 'bgp_neighbor' is set
      if @api_client.config.client_side_validation && bgp_neighbor.nil?
        fail ArgumentError, "Missing the required parameter 'bgp_neighbor' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_bgp_neighbor"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bgp_neighbor)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BgpNeighbor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_bgp_neighbor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DADProfile
    # Update DADProfile. 
    # @param dad_profile_id 
    # @param dad_profile 
    # @param [Hash] opts the optional parameters
    # @return [DADProfile]
    def update_dad_profile(dad_profile_id, dad_profile, opts = {})
      data, _status_code, _headers = update_dad_profile_with_http_info(dad_profile_id, dad_profile, opts)
      data
    end

    # Update DADProfile
    # Update DADProfile. 
    # @param dad_profile_id 
    # @param dad_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DADProfile, Fixnum, Hash)>] DADProfile data, response status code and response headers
    def update_dad_profile_with_http_info(dad_profile_id, dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_dad_profile"
      end
      # verify the required parameter 'dad_profile' is set
      if @api_client.config.client_side_validation && dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_dad_profile"
      end
      # resource path
      local_var_path = '/ipv6/dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DADProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a specific IPPrefixList on a Logical Router
    # Update a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [IPPrefixList]
    def update_ip_prefix_list(logical_router_id, id, ip_prefix_list, opts = {})
      data, _status_code, _headers = update_ip_prefix_list_with_http_info(logical_router_id, id, ip_prefix_list, opts)
      data
    end

    # Update a specific IPPrefixList on a Logical Router
    # Update a specific IPPrefixList on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param ip_prefix_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPPrefixList, Fixnum, Hash)>] IPPrefixList data, response status code and response headers
    def update_ip_prefix_list_with_http_info(logical_router_id, id, ip_prefix_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ip_prefix_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ip_prefix_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ip_prefix_list"
      end
      # verify the required parameter 'ip_prefix_list' is set
      if @api_client.config.client_side_validation && ip_prefix_list.nil?
        fail ArgumentError, "Missing the required parameter 'ip_prefix_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ip_prefix_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_prefix_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPPrefixList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_ip_prefix_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NDRA Profile
    # Update NDRAProfile 
    # @param nd_ra_profile_id 
    # @param ndra_profile 
    # @param [Hash] opts the optional parameters
    # @return [NDRAProfile]
    def update_ndra_profile(nd_ra_profile_id, ndra_profile, opts = {})
      data, _status_code, _headers = update_ndra_profile_with_http_info(nd_ra_profile_id, ndra_profile, opts)
      data
    end

    # Update NDRA Profile
    # Update NDRAProfile 
    # @param nd_ra_profile_id 
    # @param ndra_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NDRAProfile, Fixnum, Hash)>] NDRAProfile data, response status code and response headers
    def update_ndra_profile_with_http_info(nd_ra_profile_id, ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ndra_profile ...'
      end
      # verify the required parameter 'nd_ra_profile_id' is set
      if @api_client.config.client_side_validation && nd_ra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'nd_ra_profile_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ndra_profile"
      end
      # verify the required parameter 'ndra_profile' is set
      if @api_client.config.client_side_validation && ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_ndra_profile"
      end
      # resource path
      local_var_path = '/ipv6/nd-ra-profiles/{nd-ra-profile-id}'.sub('{' + 'nd-ra-profile-id' + '}', nd_ra_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NDRAProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Redistribution Configuration on a Logical Router
    # Modifies existing route redistribution rules for the specified TIER0 logical router. 
    # @param logical_router_id 
    # @param redistribution_config 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionConfig]
    def update_redistribution_config(logical_router_id, redistribution_config, opts = {})
      data, _status_code, _headers = update_redistribution_config_with_http_info(logical_router_id, redistribution_config, opts)
      data
    end

    # Update the Redistribution Configuration on a Logical Router
    # Modifies existing route redistribution rules for the specified TIER0 logical router. 
    # @param logical_router_id 
    # @param redistribution_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionConfig, Fixnum, Hash)>] RedistributionConfig data, response status code and response headers
    def update_redistribution_config_with_http_info(logical_router_id, redistribution_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_redistribution_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_redistribution_config"
      end
      # verify the required parameter 'redistribution_config' is set
      if @api_client.config.client_side_validation && redistribution_config.nil?
        fail ArgumentError, "Missing the required parameter 'redistribution_config' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_redistribution_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/redistribution'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redistribution_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_redistribution_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update All the Redistribution Rules on a Logical Router
    # Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param redistribution_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [RedistributionRuleList]
    def update_redistribution_rule_list(logical_router_id, redistribution_rule_list, opts = {})
      data, _status_code, _headers = update_redistribution_rule_list_with_http_info(logical_router_id, redistribution_rule_list, opts)
      data
    end

    # Update All the Redistribution Rules on a Logical Router
    # Modifies all route redistribution rules for the specified TIER0 logical router. Set the rules list to empty to delete/clear all rules. 
    # @param logical_router_id 
    # @param redistribution_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedistributionRuleList, Fixnum, Hash)>] RedistributionRuleList data, response status code and response headers
    def update_redistribution_rule_list_with_http_info(logical_router_id, redistribution_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_redistribution_rule_list ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_redistribution_rule_list"
      end
      # verify the required parameter 'redistribution_rule_list' is set
      if @api_client.config.client_side_validation && redistribution_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'redistribution_rule_list' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_redistribution_rule_list"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/redistribution/rules'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redistribution_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedistributionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_redistribution_rule_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a specific RouteMap on a Logical Router
    # Update a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [RouteMap]
    def update_route_map(logical_router_id, id, route_map, opts = {})
      data, _status_code, _headers = update_route_map_with_http_info(logical_router_id, id, route_map, opts)
      data
    end

    # Update a specific RouteMap on a Logical Router
    # Update a specific RouteMap on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param route_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteMap, Fixnum, Hash)>] RouteMap data, response status code and response headers
    def update_route_map_with_http_info(logical_router_id, id, route_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_route_map ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_route_map"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_route_map"
      end
      # verify the required parameter 'route_map' is set
      if @api_client.config.client_side_validation && route_map.nil?
        fail ArgumentError, "Missing the required parameter 'route_map' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_route_map"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/route-maps/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(route_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_route_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Routing Configuration
    # Modifies the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param routing_config 
    # @param [Hash] opts the optional parameters
    # @return [RoutingConfig]
    def update_routing_config(logical_router_id, routing_config, opts = {})
      data, _status_code, _headers = update_routing_config_with_http_info(logical_router_id, routing_config, opts)
      data
    end

    # Update the Routing Configuration
    # Modifies the routing configuration for a specified logical router. 
    # @param logical_router_id 
    # @param routing_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingConfig, Fixnum, Hash)>] RoutingConfig data, response status code and response headers
    def update_routing_config_with_http_info(logical_router_id, routing_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_routing_config ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_routing_config"
      end
      # verify the required parameter 'routing_config' is set
      if @api_client.config.client_side_validation && routing_config.nil?
        fail ArgumentError, "Missing the required parameter 'routing_config' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_routing_config"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(routing_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a specific Static Route Rule on a Logical Router
    # Update a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoute]
    def update_static_route(logical_router_id, id, static_route, opts = {})
      data, _status_code, _headers = update_static_route_with_http_info(logical_router_id, id, static_route, opts)
      data
    end

    # Update a specific Static Route Rule on a Logical Router
    # Update a specific static route on the specified logical router. 
    # @param logical_router_id 
    # @param id 
    # @param static_route 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoute, Fixnum, Hash)>] StaticRoute data, response status code and response headers
    def update_static_route_with_http_info(logical_router_id, id, static_route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_static_route ...'
      end
      # verify the required parameter 'logical_router_id' is set
      if @api_client.config.client_side_validation && logical_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'logical_router_id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_static_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_static_route"
      end
      # verify the required parameter 'static_route' is set
      if @api_client.config.client_side_validation && static_route.nil?
        fail ArgumentError, "Missing the required parameter 'static_route' when calling ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi.update_static_route"
      end
      # resource path
      local_var_path = '/logical-routers/{logical-router-id}/routing/static-routes/{id}'.sub('{' + 'logical-router-id' + '}', logical_router_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalRoutingAndServicesRoutingConfigurationApi#update_static_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
