=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiUpgradeGroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add upgrade units to specified upgrade unit group
    # Add upgrade units to specified upgrade unit group. The upgrade units will be added at the end of the upgrade unit list. 
    # @param group_id 
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnitList]
    def add_upgrade_units_to_group_add_upgrade_units(group_id, upgrade_unit_list, opts = {})
      data, _status_code, _headers = add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, opts)
      data
    end

    # Add upgrade units to specified upgrade unit group
    # Add upgrade units to specified upgrade unit group. The upgrade units will be added at the end of the upgrade unit list. 
    # @param group_id 
    # @param upgrade_unit_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnitList, Fixnum, Hash)>] UpgradeUnitList data, response status code and response headers
    def add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.add_upgrade_units_to_group_add_upgrade_units ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.add_upgrade_units_to_group_add_upgrade_units"
      end
      # verify the required parameter 'upgrade_unit_list' is set
      if @api_client.config.client_side_validation && upgrade_unit_list.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_list' when calling ManagementPlaneApiUpgradeGroupApi.add_upgrade_units_to_group_add_upgrade_units"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}?action=add_upgrade_units'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#add_upgrade_units_to_group_add_upgrade_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a group
    # Create a group of upgrade units. 
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnitGroup]
    def create_upgrade_unit_group(upgrade_unit_group, opts = {})
      data, _status_code, _headers = create_upgrade_unit_group_with_http_info(upgrade_unit_group, opts)
      data
    end

    # Create a group
    # Create a group of upgrade units. 
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnitGroup, Fixnum, Hash)>] UpgradeUnitGroup data, response status code and response headers
    def create_upgrade_unit_group_with_http_info(upgrade_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.create_upgrade_unit_group ...'
      end
      # verify the required parameter 'upgrade_unit_group' is set
      if @api_client.config.client_side_validation && upgrade_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_group' when calling ManagementPlaneApiUpgradeGroupApi.create_upgrade_unit_group"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#create_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the upgrade unit group
    # Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more upgrade units, the operation will fail and an error will be returned. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_upgrade_unit_group(group_id, opts = {})
      delete_upgrade_unit_group_with_http_info(group_id, opts)
      nil
    end

    # Delete the upgrade unit group
    # Delete the specified group. NOTE - A group can be deleted only if it is empty. If user tries to delete a group containing one or more upgrade units, the operation will fail and an error will be returned. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_upgrade_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.delete_upgrade_unit_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.delete_upgrade_unit_group"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#delete_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return upgrade unit group information
    # Returns information about a specific upgrade unit group in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary (default to false)
    # @return [UpgradeUnitGroup]
    def get_upgrade_unit_group(group_id, opts = {})
      data, _status_code, _headers = get_upgrade_unit_group_with_http_info(group_id, opts)
      data
    end

    # Return upgrade unit group information
    # Returns information about a specific upgrade unit group in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :summary Flag indicating whether to return the summary
    # @return [Array<(UpgradeUnitGroup, Fixnum, Hash)>] UpgradeUnitGroup data, response status code and response headers
    def get_upgrade_unit_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#get_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return aggregate information of all upgrade unit groups
    # Return information of all upgrade unit groups in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. If request parameter component type is specified, then all upgrade unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups (default to false)
    # @return [UpgradeUnitGroupAggregateInfoListResult]
    def get_upgrade_unit_group_aggregate_info(opts = {})
      data, _status_code, _headers = get_upgrade_unit_group_aggregate_info_with_http_info(opts)
      data
    end

    # Return aggregate information of all upgrade unit groups
    # Return information of all upgrade unit groups in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. If request parameter component type is specified, then all upgrade unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups
    # @return [Array<(UpgradeUnitGroupAggregateInfoListResult, Fixnum, Hash)>] UpgradeUnitGroupAggregateInfoListResult data, response status code and response headers
    def get_upgrade_unit_group_aggregate_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_aggregate_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_aggregate_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_aggregate_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/aggregate-info'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroupAggregateInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#get_upgrade_unit_group_aggregate_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade status for group
    # Get upgrade status for upgrade units in the specified group. User can specify whether to show only the upgrade units with errors. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only upgrade units with errors (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UpgradeUnitStatusListResult]
    def get_upgrade_unit_group_status(group_id, opts = {})
      data, _status_code, _headers = get_upgrade_unit_group_status_with_http_info(group_id, opts)
      data
    end

    # Get upgrade status for group
    # Get upgrade status for upgrade units in the specified group. User can specify whether to show only the upgrade units with errors. 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :has_errors Flag to indicate whether to return only upgrade units with errors
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UpgradeUnitStatusListResult, Fixnum, Hash)>] UpgradeUnitStatusListResult data, response status code and response headers
    def get_upgrade_unit_group_status_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_status ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_group_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}/status'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'has_errors'] = opts[:'has_errors'] if !opts[:'has_errors'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#get_upgrade_unit_group_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return information of all upgrade unit groups
    # Return information of all upgrade unit groups in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. If request parameter component type is specified, then all upgrade unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary (default to false)
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups (default to false)
    # @return [UpgradeUnitGroupListResult]
    def get_upgrade_unit_groups(opts = {})
      data, _status_code, _headers = get_upgrade_unit_groups_with_http_info(opts)
      data
    end

    # Return information of all upgrade unit groups
    # Return information of all upgrade unit groups in the upgrade plan.  If request parameter summary is set to true, then only count of upgrade units will be returned, upgrade units list will be empty. If request parameter component type is specified, then all upgrade unit groups for that component will be returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type based on which upgrade unit groups to be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [BOOLEAN] :summary Flag indicating whether to return summary
    # @option opts [BOOLEAN] :sync Synchronize before returning upgrade unit groups
    # @return [Array<(UpgradeUnitGroupListResult, Fixnum, Hash)>] UpgradeUnitGroupListResult data, response status code and response headers
    def get_upgrade_unit_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#get_upgrade_unit_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade status for upgrade unit groups
    # Get upgrade status for upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type on which the action is performed or on which the results are filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [UpgradeUnitGroupStatusListResult]
    def get_upgrade_unit_groups_status(opts = {})
      data, _status_code, _headers = get_upgrade_unit_groups_status_with_http_info(opts)
      data
    end

    # Get upgrade status for upgrade unit groups
    # Get upgrade status for upgrade unit groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Component type on which the action is performed or on which the results are filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(UpgradeUnitGroupStatusListResult, Fixnum, Hash)>] UpgradeUnitGroupStatusListResult data, response status code and response headers
    def get_upgrade_unit_groups_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_groups_status ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_groups_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiUpgradeGroupApi.get_upgrade_unit_groups_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups-status'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroupStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#get_upgrade_unit_groups_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reorder upgrade unit group
    # Reorder an upgrade unit group by placing it before/after the specified upgrade unit group. 
    # @param group_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_upgrade_unit_group_reorder(group_id, reorder_request, opts = {})
      reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, opts)
      nil
    end

    # Reorder upgrade unit group
    # Reorder an upgrade unit group by placing it before/after the specified upgrade unit group. 
    # @param group_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_group_reorder ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_group_reorder"
      end
      # verify the required parameter 'reorder_request' is set
      if @api_client.config.client_side_validation && reorder_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_request' when calling ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_group_reorder"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}?action=reorder'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#reorder_upgrade_unit_group_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reorder an upgrade unit within the upgrade unit group
    # Reorder an upgrade unit within the upgrade unit group by placing it before/after the specified upgrade unit 
    # @param group_id 
    # @param upgrade_unit_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_upgrade_unit_reorder(group_id, upgrade_unit_id, reorder_request, opts = {})
      reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, opts)
      nil
    end

    # Reorder an upgrade unit within the upgrade unit group
    # Reorder an upgrade unit within the upgrade unit group by placing it before/after the specified upgrade unit 
    # @param group_id 
    # @param upgrade_unit_id 
    # @param reorder_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_reorder ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_reorder"
      end
      # verify the required parameter 'upgrade_unit_id' is set
      if @api_client.config.client_side_validation && upgrade_unit_id.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_id' when calling ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_reorder"
      end
      # verify the required parameter 'reorder_request' is set
      if @api_client.config.client_side_validation && reorder_request.nil?
        fail ArgumentError, "Missing the required parameter 'reorder_request' when calling ManagementPlaneApiUpgradeGroupApi.reorder_upgrade_unit_reorder"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}/upgrade-unit/{upgrade-unit-id}?action=reorder'.sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'upgrade-unit-id' + '}', upgrade_unit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reorder_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#reorder_upgrade_unit_reorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the upgrade unit group
    # Update the specified upgrade unit group. Removal of upgrade units from the group using this is not allowed. An error will be returned in that case. Following extended_configuration is supported:  Key: upgrade_mode Supported values: maintenance_mode,in_place Default: maintenance_mode  Key: maintenance_mode_config_vsan_mode Supported values: evacuate_all_data, ensure_object_accessibility, no_action Default: ensure_object_accessibility  Key: maintenance_mode_config_evacuate_powered_off_vms Supported values: true, false Default: false  Key: rebootless_upgrade Supported values: true, false Default: true 
    # @param group_id 
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeUnitGroup]
    def update_upgrade_unit_group(group_id, upgrade_unit_group, opts = {})
      data, _status_code, _headers = update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, opts)
      data
    end

    # Update the upgrade unit group
    # Update the specified upgrade unit group. Removal of upgrade units from the group using this is not allowed. An error will be returned in that case. Following extended_configuration is supported:  Key: upgrade_mode Supported values: maintenance_mode,in_place Default: maintenance_mode  Key: maintenance_mode_config_vsan_mode Supported values: evacuate_all_data, ensure_object_accessibility, no_action Default: ensure_object_accessibility  Key: maintenance_mode_config_evacuate_powered_off_vms Supported values: true, false Default: false  Key: rebootless_upgrade Supported values: true, false Default: true 
    # @param group_id 
    # @param upgrade_unit_group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeUnitGroup, Fixnum, Hash)>] UpgradeUnitGroup data, response status code and response headers
    def update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiUpgradeGroupApi.update_upgrade_unit_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ManagementPlaneApiUpgradeGroupApi.update_upgrade_unit_group"
      end
      # verify the required parameter 'upgrade_unit_group' is set
      if @api_client.config.client_side_validation && upgrade_unit_group.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_unit_group' when calling ManagementPlaneApiUpgradeGroupApi.update_upgrade_unit_group"
      end
      # resource path
      local_var_path = '/upgrade/upgrade-unit-groups/{group-id}'.sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_unit_group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeUnitGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiUpgradeGroupApi#update_upgrade_unit_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
