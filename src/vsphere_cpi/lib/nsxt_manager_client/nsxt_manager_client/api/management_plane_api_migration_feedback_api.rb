=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiMigrationFeedbackApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept default action for feedbacks
    # Pick default resolution for all feedback items. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def accept_recommended_value_in_feedback_accept_recommended(opts = {})
      accept_recommended_value_in_feedback_accept_recommended_with_http_info(opts)
      nil
    end

    # Accept default action for feedbacks
    # Pick default resolution for all feedback items. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def accept_recommended_value_in_feedback_accept_recommended_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationFeedbackApi.accept_recommended_value_in_feedback_accept_recommended ...'
      end
      # resource path
      local_var_path = '/migration/feedback-response?action=accept-recommended'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationFeedbackApi#accept_recommended_value_in_feedback_accept_recommended\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # NSX-V feedback details
    # Get feedback details of NSX-V to be migrated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Category on which feedback request should be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :hash Hash based on which feedback request should be filtered
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :state Filter based on current state of the feedback request (default to ALL)
    # @option opts [String] :sub_category Sub category based on which feedback request should be filtered
    # @return [MigrationFeedbackRequestListResult]
    def get_feedback_requests(opts = {})
      data, _status_code, _headers = get_feedback_requests_with_http_info(opts)
      data
    end

    # NSX-V feedback details
    # Get feedback details of NSX-V to be migrated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Category on which feedback request should be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :hash Hash based on which feedback request should be filtered
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :state Filter based on current state of the feedback request
    # @option opts [String] :sub_category Sub category based on which feedback request should be filtered
    # @return [Array<(MigrationFeedbackRequestListResult, Fixnum, Hash)>] MigrationFeedbackRequestListResult data, response status code and response headers
    def get_feedback_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationFeedbackApi.get_feedback_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationFeedbackApi.get_feedback_requests, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationFeedbackApi.get_feedback_requests, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'state'] && !['ALL', 'RESOLVED', 'UNRESOLVED'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ALL, RESOLVED, UNRESOLVED'
      end
      # resource path
      local_var_path = '/migration/feedback-requests'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'sub_category'] = opts[:'sub_category'] if !opts[:'sub_category'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationFeedbackRequestListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationFeedbackApi#get_feedback_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Feedback request summary
    # Get feedback summary of NSX-V to be migrated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MigrationFeedbackSummaryListResult]
    def get_feedback_summary(opts = {})
      data, _status_code, _headers = get_feedback_summary_with_http_info(opts)
      data
    end

    # Feedback request summary
    # Get feedback summary of NSX-V to be migrated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MigrationFeedbackSummaryListResult, Fixnum, Hash)>] MigrationFeedbackSummaryListResult data, response status code and response headers
    def get_feedback_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationFeedbackApi.get_feedback_summary ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationFeedbackApi.get_feedback_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationFeedbackApi.get_feedback_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/migration/feedback-summary'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationFeedbackSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationFeedbackApi#get_feedback_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # NSX-V feedback details
    # Get feedback details of NSX-V to be migrated, grouped by feedback type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Category on which feedback request should be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :hash Hash based on which feedback request should be filtered
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :state Filter based on current state of the feedback request (default to ALL)
    # @option opts [String] :sub_category Sub category based on which feedback request should be filtered
    # @return [GroupedMigrationFeedbackRequestListResult]
    def get_grouped_feedback_requests(opts = {})
      data, _status_code, _headers = get_grouped_feedback_requests_with_http_info(opts)
      data
    end

    # NSX-V feedback details
    # Get feedback details of NSX-V to be migrated, grouped by feedback type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Category on which feedback request should be filtered
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :hash Hash based on which feedback request should be filtered
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :state Filter based on current state of the feedback request
    # @option opts [String] :sub_category Sub category based on which feedback request should be filtered
    # @return [Array<(GroupedMigrationFeedbackRequestListResult, Fixnum, Hash)>] GroupedMigrationFeedbackRequestListResult data, response status code and response headers
    def get_grouped_feedback_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationFeedbackApi.get_grouped_feedback_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationFeedbackApi.get_grouped_feedback_requests, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiMigrationFeedbackApi.get_grouped_feedback_requests, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'state'] && !['ALL', 'RESOLVED', 'UNRESOLVED'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ALL, RESOLVED, UNRESOLVED'
      end
      # resource path
      local_var_path = '/migration/grouped-feedback-requests'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'sub_category'] = opts[:'sub_category'] if !opts[:'sub_category'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupedMigrationFeedbackRequestListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationFeedbackApi#get_grouped_feedback_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Migration feedback response
    # Provide response for feedback queries needed for migration. 
    # @param migration_feedback_response_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_feedback_response(migration_feedback_response_list, opts = {})
      update_feedback_response_with_http_info(migration_feedback_response_list, opts)
      nil
    end

    # Migration feedback response
    # Provide response for feedback queries needed for migration. 
    # @param migration_feedback_response_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_feedback_response_with_http_info(migration_feedback_response_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationFeedbackApi.update_feedback_response ...'
      end
      # verify the required parameter 'migration_feedback_response_list' is set
      if @api_client.config.client_side_validation && migration_feedback_response_list.nil?
        fail ArgumentError, "Missing the required parameter 'migration_feedback_response_list' when calling ManagementPlaneApiMigrationFeedbackApi.update_feedback_response"
      end
      # resource path
      local_var_path = '/migration/feedback-response'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_feedback_response_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationFeedbackApi#update_feedback_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
