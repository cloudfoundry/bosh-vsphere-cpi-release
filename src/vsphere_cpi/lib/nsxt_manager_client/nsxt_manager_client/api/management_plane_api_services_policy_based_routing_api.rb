=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiServicesPolicyBasedRoutingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a Single Rule in a Section
    # Adds a new PBR rule in existing PBR section. 
    # @param section_id 
    # @param pbr_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRRule]
    def add_pbr_rule_in_section(section_id, pbr_rule, opts = {})
      data, _status_code, _headers = add_pbr_rule_in_section_with_http_info(section_id, pbr_rule, opts)
      data
    end

    # Add a Single Rule in a Section
    # Adds a new PBR rule in existing PBR section. 
    # @param section_id 
    # @param pbr_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRRule, Fixnum, Hash)>] PBRRule data, response status code and response headers
    def add_pbr_rule_in_section_with_http_info(section_id, pbr_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rule_in_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rule_in_section"
      end
      # verify the required parameter 'pbr_rule' is set
      if @api_client.config.client_side_validation && pbr_rule.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_rule' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rule_in_section"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rule_in_section, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#add_pbr_rule_in_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Multiple Rules in a Section
    # Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section. 
    # @param section_id 
    # @param pbr_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRRuleList]
    def add_pbr_rules_in_section_create_multiple(section_id, pbr_rule_list, opts = {})
      data, _status_code, _headers = add_pbr_rules_in_section_create_multiple_with_http_info(section_id, pbr_rule_list, opts)
      data
    end

    # Add Multiple Rules in a Section
    # Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section. 
    # @param section_id 
    # @param pbr_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRRuleList, Fixnum, Hash)>] PBRRuleList data, response status code and response headers
    def add_pbr_rules_in_section_create_multiple_with_http_info(section_id, pbr_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rules_in_section_create_multiple ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rules_in_section_create_multiple"
      end
      # verify the required parameter 'pbr_rule_list' is set
      if @api_client.config.client_side_validation && pbr_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_rule_list' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rules_in_section_create_multiple"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_rules_in_section_create_multiple, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules?action=create_multiple'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#add_pbr_rules_in_section_create_multiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a New Empty Section
    # Creates new empty PBR section in the system. 
    # @param pbr_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRSection]
    def add_pbr_section(pbr_section, opts = {})
      data, _status_code, _headers = add_pbr_section_with_http_info(pbr_section, opts)
      data
    end

    # Create a New Empty Section
    # Creates new empty PBR section in the system. 
    # @param pbr_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRSection, Fixnum, Hash)>] PBRSection data, response status code and response headers
    def add_pbr_section_with_http_info(pbr_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_section ...'
      end
      # verify the required parameter 'pbr_section' is set
      if @api_client.config.client_side_validation && pbr_section.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_section' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_section"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_section, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#add_pbr_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Section with Rules
    # Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&lt;section-id&gt;/rules 
    # @param pbr_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRSectionRuleList]
    def add_pbr_section_with_rules_create_with_rules(pbr_section_rule_list, opts = {})
      data, _status_code, _headers = add_pbr_section_with_rules_create_with_rules_with_http_info(pbr_section_rule_list, opts)
      data
    end

    # Create a Section with Rules
    # Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules 
    # @param pbr_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRSectionRuleList, Fixnum, Hash)>] PBRSectionRuleList data, response status code and response headers
    def add_pbr_section_with_rules_create_with_rules_with_http_info(pbr_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_section_with_rules_create_with_rules ...'
      end
      # verify the required parameter 'pbr_section_rule_list' is set
      if @api_client.config.client_side_validation && pbr_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_section_rule_list' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_section_with_rules_create_with_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.add_pbr_section_with_rules_create_with_rules, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections?action=create_with_rules'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#add_pbr_section_with_rules_create_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Existing Rule
    # Delete existing PBR rule in a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pbr_rule(section_id, rule_id, opts = {})
      delete_pbr_rule_with_http_info(section_id, rule_id, opts)
      nil
    end

    # Delete an Existing Rule
    # Delete existing PBR rule in a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_pbr_rule_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.delete_pbr_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.delete_pbr_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.delete_pbr_rule"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#delete_pbr_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Existing Section and Its Associated Rules
    # Removes PBR section from the system. PBR section with rules can only be deleted by passing \"cascade=true\" parameter. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete of this object to all it&#39;s child objects. (default to false)
    # @return [nil]
    def delete_pbr_section(section_id, opts = {})
      delete_pbr_section_with_http_info(section_id, opts)
      nil
    end

    # Delete an Existing Section and Its Associated Rules
    # Removes PBR section from the system. PBR section with rules can only be deleted by passing \&quot;cascade&#x3D;true\&quot; parameter. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete of this object to all it&#39;s child objects.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_pbr_section_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.delete_pbr_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.delete_pbr_section"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#delete_pbr_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Existing Rule
    # Return existing PBR rule information in a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [PBRRule]
    def get_pbr_rule(section_id, rule_id, opts = {})
      data, _status_code, _headers = get_pbr_rule_with_http_info(section_id, rule_id, opts)
      data
    end

    # Read an Existing Rule
    # Return existing PBR rule information in a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRRule, Fixnum, Hash)>] PBRRule data, response status code and response headers
    def get_pbr_rule_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rule"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#get_pbr_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PBR rule level statistics.
    # Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [PBRStats]
    def get_pbr_rule_stats(section_id, rule_id, opts = {})
      data, _status_code, _headers = get_pbr_rule_stats_with_http_info(section_id, rule_id, opts)
      data
    end

    # Get PBR rule level statistics.
    # Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule. 
    # @param section_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRStats, Fixnum, Hash)>] PBRStats data, response status code and response headers
    def get_pbr_rule_stats_with_http_info(section_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rule_stats ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rule_stats"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rule_stats"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules/{rule-id}/stats'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#get_pbr_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All the Rules for a Section
    # Return all PBR rule(s) information for a given PBR section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :filter_type Filter type (default to FILTER)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [PBRRuleListResult]
    def get_pbr_rules(section_id, opts = {})
      data, _status_code, _headers = get_pbr_rules_with_http_info(section_id, opts)
      data
    end

    # Get All the Rules for a Section
    # Return all PBR rule(s) information for a given PBR section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :filter_type Filter type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [Array<(PBRRuleListResult, Fixnum, Hash)>] PBRRuleListResult data, response status code and response headers
    def get_pbr_rules_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rules"
      end
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !['FILTER', 'SEARCH'].include?(opts[:'filter_type'])
        fail ArgumentError, 'invalid value for "filter_type", must be one of FILTER, SEARCH'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applied_tos'] = opts[:'applied_tos'] if !opts[:'applied_tos'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destinations'] = opts[:'destinations'] if !opts[:'destinations'].nil?
      query_params[:'filter_type'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sources'] = opts[:'sources'] if !opts[:'sources'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#get_pbr_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Existing Section
    # Returns information about PBR section for the identifier. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [PBRSection]
    def get_pbr_section(section_id, opts = {})
      data, _status_code, _headers = get_pbr_section_with_http_info(section_id, opts)
      data
    end

    # Get an Existing Section
    # Returns information about PBR section for the identifier. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRSection, Fixnum, Hash)>] PBRSection data, response status code and response headers
    def get_pbr_section_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_section"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#get_pbr_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PBR section level statistics.
    # Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [PBRStatsList]
    def get_pbr_section_stats(section_id, opts = {})
      data, _status_code, _headers = get_pbr_section_stats_with_http_info(section_id, opts)
      data
    end

    # Get PBR section level statistics.
    # Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRStatsList, Fixnum, Hash)>] PBRStatsList data, response status code and response headers
    def get_pbr_section_stats_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_section_stats ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_section_stats"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules/stats'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRStatsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#get_pbr_section_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Existing Section, Including Rules
    # Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&lt;section-id&gt;/rules with the appropriate page_size. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [PBRSectionRuleList]
    def get_pbr_section_with_rules_list_with_rules(section_id, opts = {})
      data, _status_code, _headers = get_pbr_section_with_rules_list_with_rules_with_http_info(section_id, opts)
      data
    end

    # Get an Existing Section, Including Rules
    # Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules with the appropriate page_size. 
    # @param section_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRSectionRuleList, Fixnum, Hash)>] PBRSectionRuleList data, response status code and response headers
    def get_pbr_section_with_rules_list_with_rules_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_section_with_rules_list_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.get_pbr_section_with_rules_list_with_rules"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}?action=list_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#get_pbr_section_with_rules_list_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All PBR Sections
    # List all PBR section in paginated form. A default page size is limited to 1000 PBR sections. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :exclude_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :filter_type Filter type (default to FILTER)
    # @option opts [String] :include_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [PBRSectionListResult]
    def list_pbr_sections(opts = {})
      data, _status_code, _headers = list_pbr_sections_with_http_info(opts)
      data
    end

    # List All PBR Sections
    # List all PBR section in paginated form. A default page size is limited to 1000 PBR sections. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_tos AppliedTo&#39;s referenced by this section or section&#39;s Distributed Service Rules .
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :destinations Destinations referenced by this section&#39;s Distributed Service Rules .
    # @option opts [String] :exclude_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :filter_type Filter type
    # @option opts [String] :include_applied_to_type Resource type valid for use as AppliedTo filter in section API
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :services NSService referenced by this section&#39;s Distributed Service Rules .
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :sources Sources referenced by this section&#39;s Distributed Service Rules .
    # @return [Array<(PBRSectionListResult, Fixnum, Hash)>] PBRSectionListResult data, response status code and response headers
    def list_pbr_sections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.list_pbr_sections ...'
      end
      if @api_client.config.client_side_validation && opts[:'exclude_applied_to_type'] && !['NSGroup', 'LogicalSwitch', 'LogicalRouter', 'LogicalPort'].include?(opts[:'exclude_applied_to_type'])
        fail ArgumentError, 'invalid value for "exclude_applied_to_type", must be one of NSGroup, LogicalSwitch, LogicalRouter, LogicalPort'
      end
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !['FILTER', 'SEARCH'].include?(opts[:'filter_type'])
        fail ArgumentError, 'invalid value for "filter_type", must be one of FILTER, SEARCH'
      end
      if @api_client.config.client_side_validation && opts[:'include_applied_to_type'] && !['NSGroup', 'LogicalSwitch', 'LogicalRouter', 'LogicalPort'].include?(opts[:'include_applied_to_type'])
        fail ArgumentError, 'invalid value for "include_applied_to_type", must be one of NSGroup, LogicalSwitch, LogicalRouter, LogicalPort'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.list_pbr_sections, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.list_pbr_sections, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/pbr/sections'

      # query parameters
      query_params = {}
      query_params[:'applied_tos'] = opts[:'applied_tos'] if !opts[:'applied_tos'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destinations'] = opts[:'destinations'] if !opts[:'destinations'].nil?
      query_params[:'exclude_applied_to_type'] = opts[:'exclude_applied_to_type'] if !opts[:'exclude_applied_to_type'].nil?
      query_params[:'filter_type'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'include_applied_to_type'] = opts[:'include_applied_to_type'] if !opts[:'include_applied_to_type'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sources'] = opts[:'sources'] if !opts[:'sources'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#list_pbr_sections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Rule and Reorder the Rule
    # Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param pbr_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRRule]
    def revise_pbr_rule_revise(section_id, rule_id, pbr_rule, opts = {})
      data, _status_code, _headers = revise_pbr_rule_revise_with_http_info(section_id, rule_id, pbr_rule, opts)
      data
    end

    # Update an Existing Rule and Reorder the Rule
    # Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param pbr_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRRule, Fixnum, Hash)>] PBRRule data, response status code and response headers
    def revise_pbr_rule_revise_with_http_info(section_id, rule_id, pbr_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_rule_revise ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_rule_revise"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_rule_revise"
      end
      # verify the required parameter 'pbr_rule' is set
      if @api_client.config.client_side_validation && pbr_rule.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_rule' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_rule_revise"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_rule_revise, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules/{rule-id}?action=revise'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#revise_pbr_rule_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section, including Its Position
    # Modifies an existing PBR section along with its relative position among other PBR sections in the system. 
    # @param section_id 
    # @param pbr_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRSection]
    def revise_pbr_section_revise(section_id, pbr_section, opts = {})
      data, _status_code, _headers = revise_pbr_section_revise_with_http_info(section_id, pbr_section, opts)
      data
    end

    # Update an Existing Section, including Its Position
    # Modifies an existing PBR section along with its relative position among other PBR sections in the system. 
    # @param section_id 
    # @param pbr_section 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRSection, Fixnum, Hash)>] PBRSection data, response status code and response headers
    def revise_pbr_section_revise_with_http_info(section_id, pbr_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_revise ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_revise"
      end
      # verify the required parameter 'pbr_section' is set
      if @api_client.config.client_side_validation && pbr_section.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_section' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_revise"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_revise, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}?action=revise'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#revise_pbr_section_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section with Rules
    # Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&lt;section-id&gt;?action=revise  To modify rules, use: PUT /api/v1/pbr/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt; 
    # @param section_id 
    # @param pbr_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [PBRSectionRuleList]
    def revise_pbr_section_with_rules_revise_with_rules(section_id, pbr_section_rule_list, opts = {})
      data, _status_code, _headers = revise_pbr_section_with_rules_revise_with_rules_with_http_info(section_id, pbr_section_rule_list, opts)
      data
    end

    # Update an Existing Section with Rules
    # Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;?action&#x3D;revise  To modify rules, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
    # @param section_id 
    # @param pbr_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Identifier of the anchor rule or section. This is a required field in case operation like &#39;insert_before&#39; and &#39;insert_after&#39;.
    # @option opts [String] :operation Operation
    # @return [Array<(PBRSectionRuleList, Fixnum, Hash)>] PBRSectionRuleList data, response status code and response headers
    def revise_pbr_section_with_rules_revise_with_rules_with_http_info(section_id, pbr_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_with_rules_revise_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_with_rules_revise_with_rules"
      end
      # verify the required parameter 'pbr_section_rule_list' is set
      if @api_client.config.client_side_validation && pbr_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_section_rule_list' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_with_rules_revise_with_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"id"]" when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.revise_pbr_section_with_rules_revise_with_rules, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}?action=revise_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#revise_pbr_section_with_rules_revise_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Rule
    # Modifies existing rule in a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param pbr_rule 
    # @param [Hash] opts the optional parameters
    # @return [PBRRule]
    def update_pbr_rule(section_id, rule_id, pbr_rule, opts = {})
      data, _status_code, _headers = update_pbr_rule_with_http_info(section_id, rule_id, pbr_rule, opts)
      data
    end

    # Update an Existing Rule
    # Modifies existing rule in a PBR section. 
    # @param section_id 
    # @param rule_id 
    # @param pbr_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRRule, Fixnum, Hash)>] PBRRule data, response status code and response headers
    def update_pbr_rule_with_http_info(section_id, rule_id, pbr_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_rule ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_rule"
      end
      # verify the required parameter 'pbr_rule' is set
      if @api_client.config.client_side_validation && pbr_rule.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_rule' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_rule"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}/rules/{rule-id}'.sub('{' + 'section-id' + '}', section_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#update_pbr_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section
    # Modifies the specified section, but does not modify the section's associated rules. 
    # @param section_id 
    # @param pbr_section 
    # @param [Hash] opts the optional parameters
    # @return [PBRSection]
    def update_pbr_section(section_id, pbr_section, opts = {})
      data, _status_code, _headers = update_pbr_section_with_http_info(section_id, pbr_section, opts)
      data
    end

    # Update an Existing Section
    # Modifies the specified section, but does not modify the section&#39;s associated rules. 
    # @param section_id 
    # @param pbr_section 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRSection, Fixnum, Hash)>] PBRSection data, response status code and response headers
    def update_pbr_section_with_http_info(section_id, pbr_section, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_section ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_section"
      end
      # verify the required parameter 'pbr_section' is set
      if @api_client.config.client_side_validation && pbr_section.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_section' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_section"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_section)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#update_pbr_section\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Existing Section, Including Its Rules
    # Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt; 
    # @param section_id 
    # @param pbr_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [PBRSectionRuleList]
    def update_pbr_section_with_rules_update_with_rules(section_id, pbr_section_rule_list, opts = {})
      data, _status_code, _headers = update_pbr_section_with_rules_update_with_rules_with_http_info(section_id, pbr_section_rule_list, opts)
      data
    end

    # Update an Existing Section, Including Its Rules
    # Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&amp;lt;section-id&amp;gt;/rules/&amp;lt;rule-id&amp;gt; 
    # @param section_id 
    # @param pbr_section_rule_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PBRSectionRuleList, Fixnum, Hash)>] PBRSectionRuleList data, response status code and response headers
    def update_pbr_section_with_rules_update_with_rules_with_http_info(section_id, pbr_section_rule_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_section_with_rules_update_with_rules ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_section_with_rules_update_with_rules"
      end
      # verify the required parameter 'pbr_section_rule_list' is set
      if @api_client.config.client_side_validation && pbr_section_rule_list.nil?
        fail ArgumentError, "Missing the required parameter 'pbr_section_rule_list' when calling ManagementPlaneApiServicesPolicyBasedRoutingApi.update_pbr_section_with_rules_update_with_rules"
      end
      # resource path
      local_var_path = '/pbr/sections/{section-id}?action=update_with_rules'.sub('{' + 'section-id' + '}', section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pbr_section_rule_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PBRSectionRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiServicesPolicyBasedRoutingApi#update_pbr_section_with_rules_update_with_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
