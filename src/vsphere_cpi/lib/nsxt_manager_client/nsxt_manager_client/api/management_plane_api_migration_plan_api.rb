=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module NSXT
  class ManagementPlaneApiMigrationPlanApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Abort migration
    # Resets all migration steps done so far, so that migration can be restarted with new setup details. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def abort_migration_abort(opts = {})
      abort_migration_abort_with_http_info(opts)
      nil
    end

    # Abort migration
    # Resets all migration steps done so far, so that migration can be restarted with new setup details. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def abort_migration_abort_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.abort_migration_abort ...'
      end
      # resource path
      local_var_path = '/migration/plan?action=abort'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#abort_migration_abort\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Continue migration
    # Continue the migration. Resumes the migration from the point where it was paused. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip Skip to migration of next component. (default to false)
    # @return [nil]
    def continue_migration_continue(opts = {})
      continue_migration_continue_with_http_info(opts)
      nil
    end

    # Continue migration
    # Continue the migration. Resumes the migration from the point where it was paused. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip Skip to migration of next component.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def continue_migration_continue_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.continue_migration_continue ...'
      end
      # resource path
      local_var_path = '/migration/plan?action=continue'

      # query parameters
      query_params = {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#continue_migration_continue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark completion of a migration cycle
    # This API marks the completion of one execution of migration workflow. This API resets internal  execution state and hence needs to be invoked before starting subsequent workflow run. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def finish_migration_finish(opts = {})
      finish_migration_finish_with_http_info(opts)
      nil
    end

    # Mark completion of a migration cycle
    # This API marks the completion of one execution of migration workflow. This API resets internal  execution state and hence needs to be invoked before starting subsequent workflow run. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def finish_migration_finish_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.finish_migration_finish ...'
      end
      # resource path
      local_var_path = '/migration/plan?action=finish'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#finish_migration_finish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get migration plan settings for the component
    # Get the migration plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [MigrationPlanSettings]
    def get_migration_plan_settings(component_type, opts = {})
      data, _status_code, _headers = get_migration_plan_settings_with_http_info(component_type, opts)
      data
    end

    # Get migration plan settings for the component
    # Get the migration plan settings for the component. 
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationPlanSettings, Fixnum, Hash)>] MigrationPlanSettings data, response status code and response headers
    def get_migration_plan_settings_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.get_migration_plan_settings ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiMigrationPlanApi.get_migration_plan_settings"
      end
      # resource path
      local_var_path = '/migration/plan/{component_type}/settings'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationPlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#get_migration_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pause migration
    # Pause the migration. Migration will be paused after migration of all the nodes currently in progress is completed either successfully or with failure. User can make changes in the migration plan when the migration is paused. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pause_migration_pause(opts = {})
      pause_migration_pause_with_http_info(opts)
      nil
    end

    # Pause migration
    # Pause the migration. Migration will be paused after migration of all the nodes currently in progress is completed either successfully or with failure. User can make changes in the migration plan when the migration is paused. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pause_migration_pause_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.pause_migration_pause ...'
      end
      # resource path
      local_var_path = '/migration/plan?action=pause'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#pause_migration_pause\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset migration plan to default plan
    # Reset the migration plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_migration_plan_reset(component_type, opts = {})
      reset_migration_plan_reset_with_http_info(component_type, opts)
      nil
    end

    # Reset migration plan to default plan
    # Reset the migration plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so. 
    # @param component_type Component type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_migration_plan_reset_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.reset_migration_plan_reset ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiMigrationPlanApi.reset_migration_plan_reset"
      end
      # resource path
      local_var_path = '/migration/plan?action=reset'

      # query parameters
      query_params = {}
      query_params[:'component_type'] = component_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#reset_migration_plan_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start migration
    # Start the migration. Migration will start as per the migration plan. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_migration_start(opts = {})
      start_migration_start_with_http_info(opts)
      nil
    end

    # Start migration
    # Start the migration. Migration will start as per the migration plan. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_migration_start_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.start_migration_start ...'
      end
      # resource path
      local_var_path = '/migration/plan?action=start'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#start_migration_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rollbabck migration
    # Roll back the migration. Changes applied to target NSX will be reverted. Use the migration status API to monitor progress of roll back. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_rollback_migration_rollback(opts = {})
      start_rollback_migration_rollback_with_http_info(opts)
      nil
    end

    # Rollbabck migration
    # Roll back the migration. Changes applied to target NSX will be reverted. Use the migration status API to monitor progress of roll back. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_rollback_migration_rollback_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.start_rollback_migration_rollback ...'
      end
      # resource path
      local_var_path = '/migration/plan?action=rollback'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#start_rollback_migration_rollback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update migration plan settings for the component
    # Update the migration plan settings for the component. 
    # @param component_type 
    # @param migration_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [MigrationPlanSettings]
    def update_migration_plan_settings(component_type, migration_plan_settings, opts = {})
      data, _status_code, _headers = update_migration_plan_settings_with_http_info(component_type, migration_plan_settings, opts)
      data
    end

    # Update migration plan settings for the component
    # Update the migration plan settings for the component. 
    # @param component_type 
    # @param migration_plan_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationPlanSettings, Fixnum, Hash)>] MigrationPlanSettings data, response status code and response headers
    def update_migration_plan_settings_with_http_info(component_type, migration_plan_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiMigrationPlanApi.update_migration_plan_settings ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling ManagementPlaneApiMigrationPlanApi.update_migration_plan_settings"
      end
      # verify the required parameter 'migration_plan_settings' is set
      if @api_client.config.client_side_validation && migration_plan_settings.nil?
        fail ArgumentError, "Missing the required parameter 'migration_plan_settings' when calling ManagementPlaneApiMigrationPlanApi.update_migration_plan_settings"
      end
      # resource path
      local_var_path = '/migration/plan/{component_type}/settings'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(migration_plan_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationPlanSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiMigrationPlanApi#update_migration_plan_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
