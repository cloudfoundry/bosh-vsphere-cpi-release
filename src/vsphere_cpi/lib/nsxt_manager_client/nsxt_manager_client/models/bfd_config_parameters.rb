=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # BFD configuration for the given Peer.
  class BfdConfigParameters
    # The time interval (in milliseconds) between heartbeat packets for BFD when receiving heartbeats.| For edge cluster type of bare metal, this value should be >= 300ms.| For edge cluster type of virtual machine or hybrid, this value should be >= 1000ms.
    attr_accessor :receive_interval

    # Number of times a packet is missed before BFD declares the neighbor down.
    attr_accessor :declare_dead_multiple

    # The time interval (in milliseconds) between heartbeat packets for BFD when sending heartbeats.| For edge cluster type of bare metal, this value should be >= 300ms.| For edge cluster type of virtual machine or hybrid, this value should be >= 1000ms.
    attr_accessor :transmit_interval

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'receive_interval' => :'receive_interval',
        :'declare_dead_multiple' => :'declare_dead_multiple',
        :'transmit_interval' => :'transmit_interval'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'receive_interval' => :'Integer',
        :'declare_dead_multiple' => :'Integer',
        :'transmit_interval' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'receive_interval')
        self.receive_interval = attributes[:'receive_interval']
      else
        self.receive_interval = 1000
      end

      if attributes.has_key?(:'declare_dead_multiple')
        self.declare_dead_multiple = attributes[:'declare_dead_multiple']
      else
        self.declare_dead_multiple = 3
      end

      if attributes.has_key?(:'transmit_interval')
        self.transmit_interval = attributes[:'transmit_interval']
      else
        self.transmit_interval = 1000
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@receive_interval.nil? && @receive_interval > 60000
        invalid_properties.push('invalid value for "receive_interval", must be smaller than or equal to 60000.')
      end

      if !@receive_interval.nil? && @receive_interval < 300
        invalid_properties.push('invalid value for "receive_interval", must be greater than or equal to 300.')
      end

      if !@declare_dead_multiple.nil? && @declare_dead_multiple > 16
        invalid_properties.push('invalid value for "declare_dead_multiple", must be smaller than or equal to 16.')
      end

      if !@declare_dead_multiple.nil? && @declare_dead_multiple < 2
        invalid_properties.push('invalid value for "declare_dead_multiple", must be greater than or equal to 2.')
      end

      if !@transmit_interval.nil? && @transmit_interval > 60000
        invalid_properties.push('invalid value for "transmit_interval", must be smaller than or equal to 60000.')
      end

      if !@transmit_interval.nil? && @transmit_interval < 300
        invalid_properties.push('invalid value for "transmit_interval", must be greater than or equal to 300.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@receive_interval.nil? && @receive_interval > 60000
      return false if !@receive_interval.nil? && @receive_interval < 300
      return false if !@declare_dead_multiple.nil? && @declare_dead_multiple > 16
      return false if !@declare_dead_multiple.nil? && @declare_dead_multiple < 2
      return false if !@transmit_interval.nil? && @transmit_interval > 60000
      return false if !@transmit_interval.nil? && @transmit_interval < 300
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] receive_interval Value to be assigned
    def receive_interval=(receive_interval)
      if !receive_interval.nil? && receive_interval > 60000
        fail ArgumentError, 'invalid value for "receive_interval", must be smaller than or equal to 60000.'
      end

      if !receive_interval.nil? && receive_interval < 300
        fail ArgumentError, 'invalid value for "receive_interval", must be greater than or equal to 300.'
      end

      @receive_interval = receive_interval
    end

    # Custom attribute writer method with validation
    # @param [Object] declare_dead_multiple Value to be assigned
    def declare_dead_multiple=(declare_dead_multiple)
      if !declare_dead_multiple.nil? && declare_dead_multiple > 16
        fail ArgumentError, 'invalid value for "declare_dead_multiple", must be smaller than or equal to 16.'
      end

      if !declare_dead_multiple.nil? && declare_dead_multiple < 2
        fail ArgumentError, 'invalid value for "declare_dead_multiple", must be greater than or equal to 2.'
      end

      @declare_dead_multiple = declare_dead_multiple
    end

    # Custom attribute writer method with validation
    # @param [Object] transmit_interval Value to be assigned
    def transmit_interval=(transmit_interval)
      if !transmit_interval.nil? && transmit_interval > 60000
        fail ArgumentError, 'invalid value for "transmit_interval", must be smaller than or equal to 60000.'
      end

      if !transmit_interval.nil? && transmit_interval < 300
        fail ArgumentError, 'invalid value for "transmit_interval", must be greater than or equal to 300.'
      end

      @transmit_interval = transmit_interval
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          receive_interval == o.receive_interval &&
          declare_dead_multiple == o.declare_dead_multiple &&
          transmit_interval == o.transmit_interval
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [receive_interval, declare_dead_multiple, transmit_interval].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
