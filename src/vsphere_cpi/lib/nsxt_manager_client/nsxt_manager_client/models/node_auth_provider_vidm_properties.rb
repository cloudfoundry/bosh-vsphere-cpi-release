=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Node AAA provider vIDM properties
  class NodeAuthProviderVidmProperties
    # vIDM client secret
    attr_accessor :client_secret

    # Fully Qualified Domain Name(FQDN) of vIDM
    attr_accessor :host_name

    # vIDM client id
    attr_accessor :client_id

    # vIDM enable flag
    attr_accessor :vidm_enable

    # Load Balancer enable flag
    attr_accessor :lb_enable

    # Hexadecimal SHA256 hash of the vIDM server's X.509 certificate
    attr_accessor :thumbprint

    # host name to use when creating the redirect URL for clients to follow after authenticating to vIDM
    attr_accessor :node_host_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_secret' => :'client_secret',
        :'host_name' => :'host_name',
        :'client_id' => :'client_id',
        :'vidm_enable' => :'vidm_enable',
        :'lb_enable' => :'lb_enable',
        :'thumbprint' => :'thumbprint',
        :'node_host_name' => :'node_host_name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'client_secret' => :'String',
        :'host_name' => :'String',
        :'client_id' => :'String',
        :'vidm_enable' => :'BOOLEAN',
        :'lb_enable' => :'BOOLEAN',
        :'thumbprint' => :'String',
        :'node_host_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'client_secret')
        self.client_secret = attributes[:'client_secret']
      end

      if attributes.has_key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.has_key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.has_key?(:'vidm_enable')
        self.vidm_enable = attributes[:'vidm_enable']
      end

      if attributes.has_key?(:'lb_enable')
        self.lb_enable = attributes[:'lb_enable']
      end

      if attributes.has_key?(:'thumbprint')
        self.thumbprint = attributes[:'thumbprint']
      end

      if attributes.has_key?(:'node_host_name')
        self.node_host_name = attributes[:'node_host_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @host_name.nil?
        invalid_properties.push('invalid value for "host_name", host_name cannot be nil.')
      end

      if @client_id.nil?
        invalid_properties.push('invalid value for "client_id", client_id cannot be nil.')
      end

      if @thumbprint.nil?
        invalid_properties.push('invalid value for "thumbprint", thumbprint cannot be nil.')
      end

      if @node_host_name.nil?
        invalid_properties.push('invalid value for "node_host_name", node_host_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @host_name.nil?
      return false if @client_id.nil?
      return false if @thumbprint.nil?
      return false if @node_host_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_secret == o.client_secret &&
          host_name == o.host_name &&
          client_id == o.client_id &&
          vidm_enable == o.vidm_enable &&
          lb_enable == o.lb_enable &&
          thumbprint == o.thumbprint &&
          node_host_name == o.node_host_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [client_secret, host_name, client_id, vidm_enable, lb_enable, thumbprint, node_host_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
