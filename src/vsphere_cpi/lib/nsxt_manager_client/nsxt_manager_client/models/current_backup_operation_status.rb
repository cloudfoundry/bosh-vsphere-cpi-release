=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Current backup operation status
  class CurrentBackupOperationStatus
    # Current step of operation
    attr_accessor :current_step

    # Unique identifier of current backup
    attr_accessor :backup_id

    # Additional human-readable status information about current step
    attr_accessor :current_step_message

    # Time when operation is expected to end
    attr_accessor :end_time

    # Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set. 
    attr_accessor :operation_type

    # Time when operation was started
    attr_accessor :start_time

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'current_step' => :'current_step',
        :'backup_id' => :'backup_id',
        :'current_step_message' => :'current_step_message',
        :'end_time' => :'end_time',
        :'operation_type' => :'operation_type',
        :'start_time' => :'start_time'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'current_step' => :'String',
        :'backup_id' => :'String',
        :'current_step_message' => :'String',
        :'end_time' => :'Integer',
        :'operation_type' => :'String',
        :'start_time' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'current_step')
        self.current_step = attributes[:'current_step']
      end

      if attributes.has_key?(:'backup_id')
        self.backup_id = attributes[:'backup_id']
      end

      if attributes.has_key?(:'current_step_message')
        self.current_step_message = attributes[:'current_step_message']
      end

      if attributes.has_key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.has_key?(:'operation_type')
        self.operation_type = attributes[:'operation_type']
      end

      if attributes.has_key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @operation_type.nil?
        invalid_properties.push('invalid value for "operation_type", operation_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      current_step_validator = EnumAttributeValidator.new('String', ['BACKUP_CREATING_CLUSTER_BACKUP', 'BACKUP_CREATING_NODE_BACKUP'])
      return false unless current_step_validator.valid?(@current_step)
      return false if @operation_type.nil?
      operation_type_validator = EnumAttributeValidator.new('String', ['NONE', 'BACKUP'])
      return false unless operation_type_validator.valid?(@operation_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_step Object to be assigned
    def current_step=(current_step)
      validator = EnumAttributeValidator.new('String', ['BACKUP_CREATING_CLUSTER_BACKUP', 'BACKUP_CREATING_NODE_BACKUP'])
      unless validator.valid?(current_step)
        fail ArgumentError, 'invalid value for "current_step", must be one of #{validator.allowable_values}.'
      end
      @current_step = current_step
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation_type Object to be assigned
    def operation_type=(operation_type)
      validator = EnumAttributeValidator.new('String', ['NONE', 'BACKUP'])
      unless validator.valid?(operation_type)
        fail ArgumentError, 'invalid value for "operation_type", must be one of #{validator.allowable_values}.'
      end
      @operation_type = operation_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          current_step == o.current_step &&
          backup_id == o.backup_id &&
          current_step_message == o.current_step_message &&
          end_time == o.end_time &&
          operation_type == o.operation_type &&
          start_time == o.start_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [current_step, backup_id, current_step_message, end_time, operation_type, start_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
