=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # NSX Cluster is made up of multiple cluster nodes. Each node can perform multiple functions, commonly referred to as roles. Cluster node entities are processes running in a cluster node that assist in the performance of a role. Cluster Boot Manager is a daemon that securely bootstraps and configures the entities. This type contains attributes of a cluster node entity that are relevant to the Cluster Boot Manager.
  class ClusterNodeEntity
    # Public certificate of the entity in PEM format
    attr_accessor :certificate

    # UUID of the entity
    attr_accessor :entity_uuid

    # Type of the entity
    attr_accessor :entity_type

    # Subnet mask prefix length of the entity binds to
    attr_accessor :subnet_prefix_length

    # IP address the entity binds to
    attr_accessor :ip_address

    # Domain name the entity binds to
    attr_accessor :fqdn

    # Port the entity binds to
    attr_accessor :port

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'certificate' => :'certificate',
        :'entity_uuid' => :'entity_uuid',
        :'entity_type' => :'entity_type',
        :'subnet_prefix_length' => :'subnet_prefix_length',
        :'ip_address' => :'ip_address',
        :'fqdn' => :'fqdn',
        :'port' => :'port'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'certificate' => :'String',
        :'entity_uuid' => :'String',
        :'entity_type' => :'String',
        :'subnet_prefix_length' => :'Integer',
        :'ip_address' => :'String',
        :'fqdn' => :'String',
        :'port' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'certificate')
        self.certificate = attributes[:'certificate']
      end

      if attributes.has_key?(:'entity_uuid')
        self.entity_uuid = attributes[:'entity_uuid']
      end

      if attributes.has_key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.has_key?(:'subnet_prefix_length')
        self.subnet_prefix_length = attributes[:'subnet_prefix_length']
      end

      if attributes.has_key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.has_key?(:'fqdn')
        self.fqdn = attributes[:'fqdn']
      end

      if attributes.has_key?(:'port')
        self.port = attributes[:'port']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @certificate.nil?
        invalid_properties.push('invalid value for "certificate", certificate cannot be nil.')
      end

      if @entity_uuid.nil?
        invalid_properties.push('invalid value for "entity_uuid", entity_uuid cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if !@subnet_prefix_length.nil? && @subnet_prefix_length > 32
        invalid_properties.push('invalid value for "subnet_prefix_length", must be smaller than or equal to 32.')
      end

      if !@subnet_prefix_length.nil? && @subnet_prefix_length < 0
        invalid_properties.push('invalid value for "subnet_prefix_length", must be greater than or equal to 0.')
      end

      if !@port.nil? && @port > 65535
        invalid_properties.push('invalid value for "port", must be smaller than or equal to 65535.')
      end

      if !@port.nil? && @port < 0
        invalid_properties.push('invalid value for "port", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @certificate.nil?
      return false if @entity_uuid.nil?
      return false if @entity_type.nil?
      entity_type_validator = EnumAttributeValidator.new('String', ['MANAGER', 'CONTROLLER', 'POLICY', 'HTTPS', 'CLUSTER_BOOT_MANAGER', 'DATASTORE'])
      return false unless entity_type_validator.valid?(@entity_type)
      return false if !@subnet_prefix_length.nil? && @subnet_prefix_length > 32
      return false if !@subnet_prefix_length.nil? && @subnet_prefix_length < 0
      return false if !@port.nil? && @port > 65535
      return false if !@port.nil? && @port < 0
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_type Object to be assigned
    def entity_type=(entity_type)
      validator = EnumAttributeValidator.new('String', ['MANAGER', 'CONTROLLER', 'POLICY', 'HTTPS', 'CLUSTER_BOOT_MANAGER', 'DATASTORE'])
      unless validator.valid?(entity_type)
        fail ArgumentError, 'invalid value for "entity_type", must be one of #{validator.allowable_values}.'
      end
      @entity_type = entity_type
    end

    # Custom attribute writer method with validation
    # @param [Object] subnet_prefix_length Value to be assigned
    def subnet_prefix_length=(subnet_prefix_length)
      if !subnet_prefix_length.nil? && subnet_prefix_length > 32
        fail ArgumentError, 'invalid value for "subnet_prefix_length", must be smaller than or equal to 32.'
      end

      if !subnet_prefix_length.nil? && subnet_prefix_length < 0
        fail ArgumentError, 'invalid value for "subnet_prefix_length", must be greater than or equal to 0.'
      end

      @subnet_prefix_length = subnet_prefix_length
    end

    # Custom attribute writer method with validation
    # @param [Object] port Value to be assigned
    def port=(port)
      if !port.nil? && port > 65535
        fail ArgumentError, 'invalid value for "port", must be smaller than or equal to 65535.'
      end

      if !port.nil? && port < 0
        fail ArgumentError, 'invalid value for "port", must be greater than or equal to 0.'
      end

      @port = port
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          certificate == o.certificate &&
          entity_uuid == o.entity_uuid &&
          entity_type == o.entity_type &&
          subnet_prefix_length == o.subnet_prefix_length &&
          ip_address == o.ip_address &&
          fqdn == o.fqdn &&
          port == o.port
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [certificate, entity_uuid, entity_type, subnet_prefix_length, ip_address, fqdn, port].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
