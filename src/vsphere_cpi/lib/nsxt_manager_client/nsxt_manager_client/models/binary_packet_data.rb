=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  class BinaryPacketData
    # A flag, when set true, indicates that the traceflow packet is of L3 routing.
    attr_accessor :routed

    # transport type of the traceflow packet
    attr_accessor :transport_type

    # Packet configuration
    attr_accessor :resource_type

    # If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message.  The frame will be zero padded to the requested size.
    attr_accessor :frame_size

    # Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload must contain all headers (Ethernet, IP, etc). Note that VLAN is not supported in the logical space. Hence, payload must not contain 802.1Q headers.
    attr_accessor :payload

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'routed' => :'routed',
        :'transport_type' => :'transport_type',
        :'resource_type' => :'resource_type',
        :'frame_size' => :'frame_size',
        :'payload' => :'payload'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'routed' => :'BOOLEAN',
        :'transport_type' => :'String',
        :'resource_type' => :'String',
        :'frame_size' => :'Integer',
        :'payload' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'routed')
        self.routed = attributes[:'routed']
      end

      if attributes.has_key?(:'transport_type')
        self.transport_type = attributes[:'transport_type']
      else
        self.transport_type = 'UNICAST'
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'frame_size')
        self.frame_size = attributes[:'frame_size']
      else
        self.frame_size = 128
      end

      if attributes.has_key?(:'payload')
        self.payload = attributes[:'payload']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if !@frame_size.nil? && @frame_size > 1000
        invalid_properties.push('invalid value for "frame_size", must be smaller than or equal to 1000.')
      end

      if !@frame_size.nil? && @frame_size < 60
        invalid_properties.push('invalid value for "frame_size", must be greater than or equal to 60.')
      end

      if !@payload.nil? && @payload.to_s.length > 1336
        invalid_properties.push('invalid value for "payload", the character length must be smaller than or equal to 1336.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      transport_type_validator = EnumAttributeValidator.new('String', ['BROADCAST', 'UNICAST', 'MULTICAST', 'UNKNOWN'])
      return false unless transport_type_validator.valid?(@transport_type)
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['BinaryPacketData', 'FieldsPacketData'])
      return false unless resource_type_validator.valid?(@resource_type)
      return false if !@frame_size.nil? && @frame_size > 1000
      return false if !@frame_size.nil? && @frame_size < 60
      return false if !@payload.nil? && @payload.to_s.length > 1336
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transport_type Object to be assigned
    def transport_type=(transport_type)
      validator = EnumAttributeValidator.new('String', ['BROADCAST', 'UNICAST', 'MULTICAST', 'UNKNOWN'])
      unless validator.valid?(transport_type)
        fail ArgumentError, 'invalid value for "transport_type", must be one of #{validator.allowable_values}.'
      end
      @transport_type = transport_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['BinaryPacketData', 'FieldsPacketData'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method with validation
    # @param [Object] frame_size Value to be assigned
    def frame_size=(frame_size)
      if !frame_size.nil? && frame_size > 1000
        fail ArgumentError, 'invalid value for "frame_size", must be smaller than or equal to 1000.'
      end

      if !frame_size.nil? && frame_size < 60
        fail ArgumentError, 'invalid value for "frame_size", must be greater than or equal to 60.'
      end

      @frame_size = frame_size
    end

    # Custom attribute writer method with validation
    # @param [Object] payload Value to be assigned
    def payload=(payload)
      if !payload.nil? && payload.to_s.length > 1336
        fail ArgumentError, 'invalid value for "payload", the character length must be smaller than or equal to 1336.'
      end

      @payload = payload
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          routed == o.routed &&
          transport_type == o.transport_type &&
          resource_type == o.resource_type &&
          frame_size == o.frame_size &&
          payload == o.payload
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [routed, transport_type, resource_type, frame_size, payload].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
