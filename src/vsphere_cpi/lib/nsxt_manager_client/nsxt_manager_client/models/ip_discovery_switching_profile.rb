=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  class IpDiscoverySwitchingProfile
    # Link to this resource
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
    attr_accessor :_revision

    # Indicates system owned resource
    attr_accessor :_system_owned

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Timestamp of resource creation
    attr_accessor :_create_time

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Unique identifier of this resource
    attr_accessor :id

    attr_accessor :resource_type

    attr_accessor :required_capabilities

    # Indicates whether ARP snooping is enabled
    attr_accessor :arp_snooping_enabled

    # Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached. This limit only applies to IPv4 addresses and is independent of the nd_bindings_limit used for IPv6 snooping.
    attr_accessor :arp_bindings_limit

    # This option is the IPv6 equivalent of DHCP snooping.
    attr_accessor :dhcpv6_snooping_enabled

    # This option is the IPv6 equivalent of ARP snooping.
    attr_accessor :nd_snooping_enabled

    # This option is only supported on ESX where vm-tools is installed.
    attr_accessor :vm_tools_v6_enabled

    # Indicates whether DHCP snooping is enabled
    attr_accessor :dhcp_snooping_enabled

    # This property controls the ARP and ND cache timeout period.It is recommended that this property be greater than the ARP/ND cache timeout on the VM. 
    attr_accessor :arp_nd_binding_timeout

    # This option is only supported on ESX where vm-tools is installed.
    attr_accessor :vm_tools_enabled

    # ARP snooping being inherently susceptible to ARP spoofing, uses a turst-on-fisrt-use (TOFU) paradigm where only the first IP address discovered via ARP snooping is trusted. The remaining are ignored. In order to allow for more flexibility, we allow the user to configure how many ARP snooped address bindings should be trusted for the lifetime of the logical port. This is controlled by the arp_bindings_limit property in the IP Discovery profile. We refer to this extension of TOFU as N-TOFU. However, if TOFU is disabled, then N ARP snooped IP addresses will be trusted until they are timed out, where N is configured by arp_bindings_limit. 
    attr_accessor :trust_on_first_use_enabled

    # Indicates the number of neighbor-discovery snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached. This limit only applies to IPv6 addresses and is independent of the arp_bindings_limit used for IPv4 snooping.
    attr_accessor :nd_bindings_limit

    # Duplicate IP detection is used to determine if there is any IP conflict with any other port on the same logical switch. If a conflict is detected, then the IP is marked as a duplicate on the port where the IP was discovered last. The duplicate IP will not be added to the realized address binings for the port and hence will not be used in DFW rules or other security configurations for the port. 
    attr_accessor :duplicate_ip_detection

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'_revision' => :'_revision',
        :'_system_owned' => :'_system_owned',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'_create_user' => :'_create_user',
        :'_protection' => :'_protection',
        :'_create_time' => :'_create_time',
        :'_last_modified_time' => :'_last_modified_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'id' => :'id',
        :'resource_type' => :'resource_type',
        :'required_capabilities' => :'required_capabilities',
        :'arp_snooping_enabled' => :'arp_snooping_enabled',
        :'arp_bindings_limit' => :'arp_bindings_limit',
        :'dhcpv6_snooping_enabled' => :'dhcpv6_snooping_enabled',
        :'nd_snooping_enabled' => :'nd_snooping_enabled',
        :'vm_tools_v6_enabled' => :'vm_tools_v6_enabled',
        :'dhcp_snooping_enabled' => :'dhcp_snooping_enabled',
        :'arp_nd_binding_timeout' => :'arp_nd_binding_timeout',
        :'vm_tools_enabled' => :'vm_tools_enabled',
        :'trust_on_first_use_enabled' => :'trust_on_first_use_enabled',
        :'nd_bindings_limit' => :'nd_bindings_limit',
        :'duplicate_ip_detection' => :'duplicate_ip_detection'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'_revision' => :'Integer',
        :'_system_owned' => :'BOOLEAN',
        :'display_name' => :'String',
        :'description' => :'String',
        :'tags' => :'Array<Tag>',
        :'_create_user' => :'String',
        :'_protection' => :'String',
        :'_create_time' => :'Integer',
        :'_last_modified_time' => :'Integer',
        :'_last_modified_user' => :'String',
        :'id' => :'String',
        :'resource_type' => :'String',
        :'required_capabilities' => :'Array<String>',
        :'arp_snooping_enabled' => :'BOOLEAN',
        :'arp_bindings_limit' => :'Integer',
        :'dhcpv6_snooping_enabled' => :'BOOLEAN',
        :'nd_snooping_enabled' => :'BOOLEAN',
        :'vm_tools_v6_enabled' => :'BOOLEAN',
        :'dhcp_snooping_enabled' => :'BOOLEAN',
        :'arp_nd_binding_timeout' => :'Integer',
        :'vm_tools_enabled' => :'BOOLEAN',
        :'trust_on_first_use_enabled' => :'BOOLEAN',
        :'nd_bindings_limit' => :'Integer',
        :'duplicate_ip_detection' => :'DuplicateIPDetection'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'_revision')
        self._revision = attributes[:'_revision']
      end

      if attributes.has_key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.has_key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.has_key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.has_key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.has_key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'required_capabilities')
        if (value = attributes[:'required_capabilities']).is_a?(Array)
          self.required_capabilities = value
        end
      end

      if attributes.has_key?(:'arp_snooping_enabled')
        self.arp_snooping_enabled = attributes[:'arp_snooping_enabled']
      else
        self.arp_snooping_enabled = true
      end

      if attributes.has_key?(:'arp_bindings_limit')
        self.arp_bindings_limit = attributes[:'arp_bindings_limit']
      else
        self.arp_bindings_limit = 1
      end

      if attributes.has_key?(:'dhcpv6_snooping_enabled')
        self.dhcpv6_snooping_enabled = attributes[:'dhcpv6_snooping_enabled']
      else
        self.dhcpv6_snooping_enabled = false
      end

      if attributes.has_key?(:'nd_snooping_enabled')
        self.nd_snooping_enabled = attributes[:'nd_snooping_enabled']
      else
        self.nd_snooping_enabled = false
      end

      if attributes.has_key?(:'vm_tools_v6_enabled')
        self.vm_tools_v6_enabled = attributes[:'vm_tools_v6_enabled']
      else
        self.vm_tools_v6_enabled = false
      end

      if attributes.has_key?(:'dhcp_snooping_enabled')
        self.dhcp_snooping_enabled = attributes[:'dhcp_snooping_enabled']
      else
        self.dhcp_snooping_enabled = true
      end

      if attributes.has_key?(:'arp_nd_binding_timeout')
        self.arp_nd_binding_timeout = attributes[:'arp_nd_binding_timeout']
      else
        self.arp_nd_binding_timeout = 10
      end

      if attributes.has_key?(:'vm_tools_enabled')
        self.vm_tools_enabled = attributes[:'vm_tools_enabled']
      else
        self.vm_tools_enabled = true
      end

      if attributes.has_key?(:'trust_on_first_use_enabled')
        self.trust_on_first_use_enabled = attributes[:'trust_on_first_use_enabled']
      else
        self.trust_on_first_use_enabled = true
      end

      if attributes.has_key?(:'nd_bindings_limit')
        self.nd_bindings_limit = attributes[:'nd_bindings_limit']
      else
        self.nd_bindings_limit = 3
      end

      if attributes.has_key?(:'duplicate_ip_detection')
        self.duplicate_ip_detection = attributes[:'duplicate_ip_detection']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      if !@description.nil? && @description.to_s.length > 1024
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1024.')
      end

      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if !@arp_bindings_limit.nil? && @arp_bindings_limit > 256
        invalid_properties.push('invalid value for "arp_bindings_limit", must be smaller than or equal to 256.')
      end

      if !@arp_bindings_limit.nil? && @arp_bindings_limit < 1
        invalid_properties.push('invalid value for "arp_bindings_limit", must be greater than or equal to 1.')
      end

      if !@arp_nd_binding_timeout.nil? && @arp_nd_binding_timeout > 120
        invalid_properties.push('invalid value for "arp_nd_binding_timeout", must be smaller than or equal to 120.')
      end

      if !@arp_nd_binding_timeout.nil? && @arp_nd_binding_timeout < 5
        invalid_properties.push('invalid value for "arp_nd_binding_timeout", must be greater than or equal to 5.')
      end

      if !@nd_bindings_limit.nil? && @nd_bindings_limit > 15
        invalid_properties.push('invalid value for "nd_bindings_limit", must be smaller than or equal to 15.')
      end

      if !@nd_bindings_limit.nil? && @nd_bindings_limit < 2
        invalid_properties.push('invalid value for "nd_bindings_limit", must be greater than or equal to 2.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 1024
      return false if @resource_type.nil?
      return false if !@arp_bindings_limit.nil? && @arp_bindings_limit > 256
      return false if !@arp_bindings_limit.nil? && @arp_bindings_limit < 1
      return false if !@arp_nd_binding_timeout.nil? && @arp_nd_binding_timeout > 120
      return false if !@arp_nd_binding_timeout.nil? && @arp_nd_binding_timeout < 5
      return false if !@nd_bindings_limit.nil? && @nd_bindings_limit > 15
      return false if !@nd_bindings_limit.nil? && @nd_bindings_limit < 2
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 1024
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1024.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] arp_bindings_limit Value to be assigned
    def arp_bindings_limit=(arp_bindings_limit)
      if !arp_bindings_limit.nil? && arp_bindings_limit > 256
        fail ArgumentError, 'invalid value for "arp_bindings_limit", must be smaller than or equal to 256.'
      end

      if !arp_bindings_limit.nil? && arp_bindings_limit < 1
        fail ArgumentError, 'invalid value for "arp_bindings_limit", must be greater than or equal to 1.'
      end

      @arp_bindings_limit = arp_bindings_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] arp_nd_binding_timeout Value to be assigned
    def arp_nd_binding_timeout=(arp_nd_binding_timeout)
      if !arp_nd_binding_timeout.nil? && arp_nd_binding_timeout > 120
        fail ArgumentError, 'invalid value for "arp_nd_binding_timeout", must be smaller than or equal to 120.'
      end

      if !arp_nd_binding_timeout.nil? && arp_nd_binding_timeout < 5
        fail ArgumentError, 'invalid value for "arp_nd_binding_timeout", must be greater than or equal to 5.'
      end

      @arp_nd_binding_timeout = arp_nd_binding_timeout
    end

    # Custom attribute writer method with validation
    # @param [Object] nd_bindings_limit Value to be assigned
    def nd_bindings_limit=(nd_bindings_limit)
      if !nd_bindings_limit.nil? && nd_bindings_limit > 15
        fail ArgumentError, 'invalid value for "nd_bindings_limit", must be smaller than or equal to 15.'
      end

      if !nd_bindings_limit.nil? && nd_bindings_limit < 2
        fail ArgumentError, 'invalid value for "nd_bindings_limit", must be greater than or equal to 2.'
      end

      @nd_bindings_limit = nd_bindings_limit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          _revision == o._revision &&
          _system_owned == o._system_owned &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          _create_user == o._create_user &&
          _protection == o._protection &&
          _create_time == o._create_time &&
          _last_modified_time == o._last_modified_time &&
          _last_modified_user == o._last_modified_user &&
          id == o.id &&
          resource_type == o.resource_type &&
          required_capabilities == o.required_capabilities &&
          arp_snooping_enabled == o.arp_snooping_enabled &&
          arp_bindings_limit == o.arp_bindings_limit &&
          dhcpv6_snooping_enabled == o.dhcpv6_snooping_enabled &&
          nd_snooping_enabled == o.nd_snooping_enabled &&
          vm_tools_v6_enabled == o.vm_tools_v6_enabled &&
          dhcp_snooping_enabled == o.dhcp_snooping_enabled &&
          arp_nd_binding_timeout == o.arp_nd_binding_timeout &&
          vm_tools_enabled == o.vm_tools_enabled &&
          trust_on_first_use_enabled == o.trust_on_first_use_enabled &&
          nd_bindings_limit == o.nd_bindings_limit &&
          duplicate_ip_detection == o.duplicate_ip_detection
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, _revision, _system_owned, display_name, description, tags, _create_user, _protection, _create_time, _last_modified_time, _last_modified_user, id, resource_type, required_capabilities, arp_snooping_enabled, arp_bindings_limit, dhcpv6_snooping_enabled, nd_snooping_enabled, vm_tools_v6_enabled, dhcp_snooping_enabled, arp_nd_binding_timeout, vm_tools_enabled, trust_on_first_use_enabled, nd_bindings_limit, duplicate_ip_detection].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
