=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  class PortMirroringFilter
    # If set to MIRROR, packets will be mirrored. If set to DO_NOT_MIRROR, packets will not be mirrored.
    attr_accessor :filter_action

    # The transport protocols of TCP or UDP, used to match the transport protocol of a packet. If not provided, no filtering by IP protocols is performed.
    attr_accessor :ip_protocol

    # Source IP in the form of IPAddresses, used to match the source IP of a packet. If not provided, no filtering by source IPs is performed.
    attr_accessor :src_ips

    # Destination IP in the form of IPAddresses, used to match the destination IP of a packet. If not provided, no filtering by destination IPs is performed.
    attr_accessor :dst_ips

    # Destination port in the form of a port or port range, used to match the destination port of a packet. If not provided, no filtering by destination port is performed.
    attr_accessor :dst_ports

    # Source port in the form of a port or port range, used to match the source port of a packet. If not provided, no filtering by source port is performed.
    attr_accessor :src_ports

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'filter_action' => :'filter_action',
        :'ip_protocol' => :'ip_protocol',
        :'src_ips' => :'src_ips',
        :'dst_ips' => :'dst_ips',
        :'dst_ports' => :'dst_ports',
        :'src_ports' => :'src_ports'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'filter_action' => :'String',
        :'ip_protocol' => :'String',
        :'src_ips' => :'IPAddresses',
        :'dst_ips' => :'IPAddresses',
        :'dst_ports' => :'String',
        :'src_ports' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'filter_action')
        self.filter_action = attributes[:'filter_action']
      else
        self.filter_action = 'MIRROR'
      end

      if attributes.has_key?(:'ip_protocol')
        self.ip_protocol = attributes[:'ip_protocol']
      end

      if attributes.has_key?(:'src_ips')
        self.src_ips = attributes[:'src_ips']
      end

      if attributes.has_key?(:'dst_ips')
        self.dst_ips = attributes[:'dst_ips']
      end

      if attributes.has_key?(:'dst_ports')
        self.dst_ports = attributes[:'dst_ports']
      end

      if attributes.has_key?(:'src_ports')
        self.src_ports = attributes[:'src_ports']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      filter_action_validator = EnumAttributeValidator.new('String', ['MIRROR', 'DO_NOT_MIRROR'])
      return false unless filter_action_validator.valid?(@filter_action)
      ip_protocol_validator = EnumAttributeValidator.new('String', ['TCP', 'UDP'])
      return false unless ip_protocol_validator.valid?(@ip_protocol)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filter_action Object to be assigned
    def filter_action=(filter_action)
      validator = EnumAttributeValidator.new('String', ['MIRROR', 'DO_NOT_MIRROR'])
      unless validator.valid?(filter_action)
        fail ArgumentError, 'invalid value for "filter_action", must be one of #{validator.allowable_values}.'
      end
      @filter_action = filter_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_protocol Object to be assigned
    def ip_protocol=(ip_protocol)
      validator = EnumAttributeValidator.new('String', ['TCP', 'UDP'])
      unless validator.valid?(ip_protocol)
        fail ArgumentError, 'invalid value for "ip_protocol", must be one of #{validator.allowable_values}.'
      end
      @ip_protocol = ip_protocol
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filter_action == o.filter_action &&
          ip_protocol == o.ip_protocol &&
          src_ips == o.src_ips &&
          dst_ips == o.dst_ips &&
          dst_ports == o.dst_ports &&
          src_ports == o.src_ports
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [filter_action, ip_protocol, src_ips, dst_ips, dst_ports, src_ports].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
