=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Includes both scope and tag attribute of Tag. The scope and tag expressions are logically 'AND' with each other. eg- tag.scope = \"S1\" AND tag.tag = 'T1' 
  class NSGroupTagExpression
    attr_accessor :resource_type

    # Target_type VirtualMachine supports all specified operators for tag expression while LogicalSwitch and LogicalPort supports only EQUALS operator. 
    attr_accessor :tag_op

    # The tag.scope attribute of the object
    attr_accessor :scope

    # Operator of the scope expression eg- tag.scope = \"S1\".
    attr_accessor :scope_op

    # The tag.tag attribute of the object
    attr_accessor :tag

    # Type of the resource on which this expression is evaluated
    attr_accessor :target_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resource_type' => :'resource_type',
        :'tag_op' => :'tag_op',
        :'scope' => :'scope',
        :'scope_op' => :'scope_op',
        :'tag' => :'tag',
        :'target_type' => :'target_type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'resource_type' => :'String',
        :'tag_op' => :'String',
        :'scope' => :'String',
        :'scope_op' => :'String',
        :'tag' => :'String',
        :'target_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'tag_op')
        self.tag_op = attributes[:'tag_op']
      else
        self.tag_op = 'EQUALS'
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'scope_op')
        self.scope_op = attributes[:'scope_op']
      else
        self.scope_op = 'EQUALS'
      end

      if attributes.has_key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.has_key?(:'target_type')
        self.target_type = attributes[:'target_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if !@scope.nil? && @scope.to_s.length > 128
        invalid_properties.push('invalid value for "scope", the character length must be smaller than or equal to 128.')
      end

      if !@tag.nil? && @tag.to_s.length > 256
        invalid_properties.push('invalid value for "tag", the character length must be smaller than or equal to 256.')
      end

      if @target_type.nil?
        invalid_properties.push('invalid value for "target_type", target_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['NSGroupSimpleExpression', 'NSGroupComplexExpression', 'NSGroupTagExpression'])
      return false unless resource_type_validator.valid?(@resource_type)
      tag_op_validator = EnumAttributeValidator.new('String', ['EQUALS', 'CONTAINS', 'STARTSWITH', 'ENDSWITH'])
      return false unless tag_op_validator.valid?(@tag_op)
      return false if !@scope.nil? && @scope.to_s.length > 128
      scope_op_validator = EnumAttributeValidator.new('String', ['EQUALS'])
      return false unless scope_op_validator.valid?(@scope_op)
      return false if !@tag.nil? && @tag.to_s.length > 256
      return false if @target_type.nil?
      target_type_validator = EnumAttributeValidator.new('String', ['LogicalSwitch', 'LogicalPort', 'VirtualMachine', 'IPSet'])
      return false unless target_type_validator.valid?(@target_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['NSGroupSimpleExpression', 'NSGroupComplexExpression', 'NSGroupTagExpression'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tag_op Object to be assigned
    def tag_op=(tag_op)
      validator = EnumAttributeValidator.new('String', ['EQUALS', 'CONTAINS', 'STARTSWITH', 'ENDSWITH'])
      unless validator.valid?(tag_op)
        fail ArgumentError, 'invalid value for "tag_op", must be one of #{validator.allowable_values}.'
      end
      @tag_op = tag_op
    end

    # Custom attribute writer method with validation
    # @param [Object] scope Value to be assigned
    def scope=(scope)
      if !scope.nil? && scope.to_s.length > 128
        fail ArgumentError, 'invalid value for "scope", the character length must be smaller than or equal to 128.'
      end

      @scope = scope
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scope_op Object to be assigned
    def scope_op=(scope_op)
      validator = EnumAttributeValidator.new('String', ['EQUALS'])
      unless validator.valid?(scope_op)
        fail ArgumentError, 'invalid value for "scope_op", must be one of #{validator.allowable_values}.'
      end
      @scope_op = scope_op
    end

    # Custom attribute writer method with validation
    # @param [Object] tag Value to be assigned
    def tag=(tag)
      if !tag.nil? && tag.to_s.length > 256
        fail ArgumentError, 'invalid value for "tag", the character length must be smaller than or equal to 256.'
      end

      @tag = tag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_type Object to be assigned
    def target_type=(target_type)
      validator = EnumAttributeValidator.new('String', ['LogicalSwitch', 'LogicalPort', 'VirtualMachine', 'IPSet'])
      unless validator.valid?(target_type)
        fail ArgumentError, 'invalid value for "target_type", must be one of #{validator.allowable_values}.'
      end
      @target_type = target_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resource_type == o.resource_type &&
          tag_op == o.tag_op &&
          scope == o.scope &&
          scope_op == o.scope_op &&
          tag == o.tag &&
          target_type == o.target_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_type, tag_op, scope, scope_op, tag, target_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
