=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Node properties
  class NodeProperties
    # Link to this resource
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # Current time expressed in milliseconds since epoch
    attr_accessor :system_time

    # Node Unique Identifier
    attr_accessor :node_uuid

    # Message of the day to display when users login to node using the NSX CLI
    attr_accessor :motd

    # NSX CLI inactivity timeout, set to 0 to configure no timeout
    attr_accessor :cli_timeout

    # Kernel version
    attr_accessor :kernel_version

    # Export restrictions in effect, if any
    attr_accessor :export_type

    # Host name or fully qualified domain name of node
    attr_accessor :hostname

    # Product version
    attr_accessor :product_version

    # Node version
    attr_accessor :node_version

    # System date time in UTC
    attr_accessor :system_datetime

    # Fully qualified domain name
    attr_accessor :fully_qualified_domain_name

    # Timezone
    attr_accessor :timezone

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'system_time' => :'system_time',
        :'node_uuid' => :'node_uuid',
        :'motd' => :'motd',
        :'cli_timeout' => :'cli_timeout',
        :'kernel_version' => :'kernel_version',
        :'export_type' => :'export_type',
        :'hostname' => :'hostname',
        :'product_version' => :'product_version',
        :'node_version' => :'node_version',
        :'system_datetime' => :'system_datetime',
        :'fully_qualified_domain_name' => :'fully_qualified_domain_name',
        :'timezone' => :'timezone'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'system_time' => :'Integer',
        :'node_uuid' => :'String',
        :'motd' => :'Object',
        :'cli_timeout' => :'Integer',
        :'kernel_version' => :'String',
        :'export_type' => :'String',
        :'hostname' => :'String',
        :'product_version' => :'String',
        :'node_version' => :'String',
        :'system_datetime' => :'String',
        :'fully_qualified_domain_name' => :'String',
        :'timezone' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'system_time')
        self.system_time = attributes[:'system_time']
      end

      if attributes.has_key?(:'node_uuid')
        self.node_uuid = attributes[:'node_uuid']
      end

      if attributes.has_key?(:'motd')
        self.motd = attributes[:'motd']
      end

      if attributes.has_key?(:'cli_timeout')
        self.cli_timeout = attributes[:'cli_timeout']
      end

      if attributes.has_key?(:'kernel_version')
        self.kernel_version = attributes[:'kernel_version']
      end

      if attributes.has_key?(:'export_type')
        self.export_type = attributes[:'export_type']
      end

      if attributes.has_key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.has_key?(:'product_version')
        self.product_version = attributes[:'product_version']
      end

      if attributes.has_key?(:'node_version')
        self.node_version = attributes[:'node_version']
      end

      if attributes.has_key?(:'system_datetime')
        self.system_datetime = attributes[:'system_datetime']
      end

      if attributes.has_key?(:'fully_qualified_domain_name')
        self.fully_qualified_domain_name = attributes[:'fully_qualified_domain_name']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@node_uuid.nil? && @node_uuid.to_s.length > 36
        invalid_properties.push('invalid value for "node_uuid", the character length must be smaller than or equal to 36.')
      end

      if !@cli_timeout.nil? && @cli_timeout < 0
        invalid_properties.push('invalid value for "cli_timeout", must be greater than or equal to 0.')
      end

      if !@hostname.nil? && @hostname !~ Regexp.new(/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/)
        invalid_properties.push('invalid value for "hostname", must conform to the pattern /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@node_uuid.nil? && @node_uuid.to_s.length > 36
      return false if !@cli_timeout.nil? && @cli_timeout < 0
      export_type_validator = EnumAttributeValidator.new('String', ['RESTRICTED', 'UNRESTRICTED'])
      return false unless export_type_validator.valid?(@export_type)
      return false if !@hostname.nil? && @hostname !~ Regexp.new(/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] node_uuid Value to be assigned
    def node_uuid=(node_uuid)
      if !node_uuid.nil? && node_uuid.to_s.length > 36
        fail ArgumentError, 'invalid value for "node_uuid", the character length must be smaller than or equal to 36.'
      end

      @node_uuid = node_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] cli_timeout Value to be assigned
    def cli_timeout=(cli_timeout)
      if !cli_timeout.nil? && cli_timeout < 0
        fail ArgumentError, 'invalid value for "cli_timeout", must be greater than or equal to 0.'
      end

      @cli_timeout = cli_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] export_type Object to be assigned
    def export_type=(export_type)
      validator = EnumAttributeValidator.new('String', ['RESTRICTED', 'UNRESTRICTED'])
      unless validator.valid?(export_type)
        fail ArgumentError, 'invalid value for "export_type", must be one of #{validator.allowable_values}.'
      end
      @export_type = export_type
    end

    # Custom attribute writer method with validation
    # @param [Object] hostname Value to be assigned
    def hostname=(hostname)
      if !hostname.nil? && hostname !~ Regexp.new(/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/)
        fail ArgumentError, 'invalid value for "hostname", must conform to the pattern /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/.'
      end

      @hostname = hostname
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          system_time == o.system_time &&
          node_uuid == o.node_uuid &&
          motd == o.motd &&
          cli_timeout == o.cli_timeout &&
          kernel_version == o.kernel_version &&
          export_type == o.export_type &&
          hostname == o.hostname &&
          product_version == o.product_version &&
          node_version == o.node_version &&
          system_datetime == o.system_datetime &&
          fully_qualified_domain_name == o.fully_qualified_domain_name &&
          timezone == o.timezone
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, system_time, node_uuid, motd, cli_timeout, kernel_version, export_type, hostname, product_version, node_version, system_datetime, fully_qualified_domain_name, timezone].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
