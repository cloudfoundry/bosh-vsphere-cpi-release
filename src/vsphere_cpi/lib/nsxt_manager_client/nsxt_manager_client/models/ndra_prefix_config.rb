=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Overrides the router advertisement attributes for the IPv6 prefixes. 
  class NDRAPrefixConfig
    # Override the neighbor discovery prefix preferred time and prefix valid time for the subnet on uplink port whose network matches with the network address of CIDR specified in network_prefix. 
    attr_accessor :network_prefix

    # The time interval in seconds, in which the prefix is advertised as valid. 
    attr_accessor :prefix_valid_time

    # The time interval in seconds, in which the prefix is advertised as preferred. 
    attr_accessor :prefix_preferred_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'network_prefix' => :'network_prefix',
        :'prefix_valid_time' => :'prefix_valid_time',
        :'prefix_preferred_time' => :'prefix_preferred_time'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'network_prefix' => :'String',
        :'prefix_valid_time' => :'Integer',
        :'prefix_preferred_time' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'network_prefix')
        self.network_prefix = attributes[:'network_prefix']
      end

      if attributes.has_key?(:'prefix_valid_time')
        self.prefix_valid_time = attributes[:'prefix_valid_time']
      end

      if attributes.has_key?(:'prefix_preferred_time')
        self.prefix_preferred_time = attributes[:'prefix_preferred_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @network_prefix.nil?
        invalid_properties.push('invalid value for "network_prefix", network_prefix cannot be nil.')
      end

      if !@prefix_valid_time.nil? && @prefix_valid_time > 4294967295
        invalid_properties.push('invalid value for "prefix_valid_time", must be smaller than or equal to 4294967295.')
      end

      if !@prefix_valid_time.nil? && @prefix_valid_time < 0
        invalid_properties.push('invalid value for "prefix_valid_time", must be greater than or equal to 0.')
      end

      if !@prefix_preferred_time.nil? && @prefix_preferred_time > 4294967295
        invalid_properties.push('invalid value for "prefix_preferred_time", must be smaller than or equal to 4294967295.')
      end

      if !@prefix_preferred_time.nil? && @prefix_preferred_time < 0
        invalid_properties.push('invalid value for "prefix_preferred_time", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @network_prefix.nil?
      return false if !@prefix_valid_time.nil? && @prefix_valid_time > 4294967295
      return false if !@prefix_valid_time.nil? && @prefix_valid_time < 0
      return false if !@prefix_preferred_time.nil? && @prefix_preferred_time > 4294967295
      return false if !@prefix_preferred_time.nil? && @prefix_preferred_time < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] prefix_valid_time Value to be assigned
    def prefix_valid_time=(prefix_valid_time)
      if !prefix_valid_time.nil? && prefix_valid_time > 4294967295
        fail ArgumentError, 'invalid value for "prefix_valid_time", must be smaller than or equal to 4294967295.'
      end

      if !prefix_valid_time.nil? && prefix_valid_time < 0
        fail ArgumentError, 'invalid value for "prefix_valid_time", must be greater than or equal to 0.'
      end

      @prefix_valid_time = prefix_valid_time
    end

    # Custom attribute writer method with validation
    # @param [Object] prefix_preferred_time Value to be assigned
    def prefix_preferred_time=(prefix_preferred_time)
      if !prefix_preferred_time.nil? && prefix_preferred_time > 4294967295
        fail ArgumentError, 'invalid value for "prefix_preferred_time", must be smaller than or equal to 4294967295.'
      end

      if !prefix_preferred_time.nil? && prefix_preferred_time < 0
        fail ArgumentError, 'invalid value for "prefix_preferred_time", must be greater than or equal to 0.'
      end

      @prefix_preferred_time = prefix_preferred_time
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          network_prefix == o.network_prefix &&
          prefix_valid_time == o.prefix_valid_time &&
          prefix_preferred_time == o.prefix_preferred_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [network_prefix, prefix_valid_time, prefix_preferred_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
