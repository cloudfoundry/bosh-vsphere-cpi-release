=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Details about an existing NSX manager to be migrated
  class SourceNsxApiEndpoint
    # VC port that will be used to fetch details.
    attr_accessor :vc_port

    # Username for connecting to VC.
    attr_accessor :vc_username

    # IP address or host name of VC.
    attr_accessor :vc_ip

    # IP address or hostname of a source NSX API endpoint. This field is not applicable in case of vSphere network migration.
    attr_accessor :ip

    # Auth token used to make REST calls to source NSX API endpoint. This field is not applicable in case of vSphere network migration.
    attr_accessor :auth_token

    # Signifies Universal Sync role status (STANDALONE, PRIMARY, SECONDARY) of a source NSX API endpoint.
    attr_accessor :nsx_syncrole

    # Build version of VC.
    attr_accessor :vc_version

    # Username for connecting to NSX manager. This field is not applicable in case of vSphere network migration.
    attr_accessor :nsx_username

    # Build version (major, minor, patch) of a source NSX API endpoint.
    attr_accessor :nsx_version

    # Password for connecting to NSX manager. This field is not applicable in case of vSphere network migration.
    attr_accessor :nsx_password

    # Password for connecting to VC.
    attr_accessor :vc_password

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vc_port' => :'vc_port',
        :'vc_username' => :'vc_username',
        :'vc_ip' => :'vc_ip',
        :'ip' => :'ip',
        :'auth_token' => :'auth_token',
        :'nsx_syncrole' => :'nsx_syncrole',
        :'vc_version' => :'vc_version',
        :'nsx_username' => :'nsx_username',
        :'nsx_version' => :'nsx_version',
        :'nsx_password' => :'nsx_password',
        :'vc_password' => :'vc_password'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'vc_port' => :'Integer',
        :'vc_username' => :'String',
        :'vc_ip' => :'String',
        :'ip' => :'String',
        :'auth_token' => :'String',
        :'nsx_syncrole' => :'String',
        :'vc_version' => :'String',
        :'nsx_username' => :'String',
        :'nsx_version' => :'String',
        :'nsx_password' => :'String',
        :'vc_password' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'vc_port')
        self.vc_port = attributes[:'vc_port']
      else
        self.vc_port = 443
      end

      if attributes.has_key?(:'vc_username')
        self.vc_username = attributes[:'vc_username']
      end

      if attributes.has_key?(:'vc_ip')
        self.vc_ip = attributes[:'vc_ip']
      end

      if attributes.has_key?(:'ip')
        self.ip = attributes[:'ip']
      end

      if attributes.has_key?(:'auth_token')
        self.auth_token = attributes[:'auth_token']
      end

      if attributes.has_key?(:'nsx_syncrole')
        self.nsx_syncrole = attributes[:'nsx_syncrole']
      end

      if attributes.has_key?(:'vc_version')
        self.vc_version = attributes[:'vc_version']
      end

      if attributes.has_key?(:'nsx_username')
        self.nsx_username = attributes[:'nsx_username']
      end

      if attributes.has_key?(:'nsx_version')
        self.nsx_version = attributes[:'nsx_version']
      end

      if attributes.has_key?(:'nsx_password')
        self.nsx_password = attributes[:'nsx_password']
      end

      if attributes.has_key?(:'vc_password')
        self.vc_password = attributes[:'vc_password']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @vc_username.nil?
        invalid_properties.push('invalid value for "vc_username", vc_username cannot be nil.')
      end

      if @vc_ip.nil?
        invalid_properties.push('invalid value for "vc_ip", vc_ip cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @vc_username.nil?
      return false if @vc_ip.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vc_port == o.vc_port &&
          vc_username == o.vc_username &&
          vc_ip == o.vc_ip &&
          ip == o.ip &&
          auth_token == o.auth_token &&
          nsx_syncrole == o.nsx_syncrole &&
          vc_version == o.vc_version &&
          nsx_username == o.nsx_username &&
          nsx_version == o.nsx_version &&
          nsx_password == o.nsx_password &&
          vc_password == o.vc_password
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [vc_port, vc_username, vc_ip, ip, auth_token, nsx_syncrole, vc_version, nsx_username, nsx_version, nsx_password, vc_password].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
