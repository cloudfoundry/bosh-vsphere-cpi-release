=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  class X509Certificate
    # The order of the middle term(s) of the reduction polynomial in elliptic curve (EC) | characteristic 2 finite field.| Contents of this array are copied to protect against subsequent modification in ECDSA.
    attr_accessor :ecdsa_ec_field_f2mks

    # Certificate version (default v1)
    attr_accessor :version

    # True if this is a CA certificate.
    attr_accessor :is_ca

    # the algorithm used by the Certificate Authority to sign the certificate
    attr_accessor :signature_algorithm

    # The first coefficient of this elliptic curve in ECDSA.
    attr_accessor :ecdsa_public_key_a

    # An RSA public key is made up of the modulus and the public exponent. Exponent is a power number
    attr_accessor :rsa_public_key_exponent

    # The first coefficient of this elliptic curve in elliptic curve (EC) | characteristic 2 finite field for ECDSA.
    attr_accessor :ecdsa_ec_field_f2mm

    # the certificate issuer's common name
    attr_accessor :issuer_cn

    # the certificate owner's common name
    attr_accessor :subject_cn

    # The order of generator G in ECDSA.
    attr_accessor :ecdsa_public_key_order

    # The value whose i-th bit corresponds to the i-th coefficient of the reduction polynomial | in elliptic curve (EC) characteristic 2 finite field for ECDSA.
    attr_accessor :ecdsa_ec_field_f2mrp

    # size measured in bits of the public/private keys used in a cryptographic algorithm
    attr_accessor :public_key_length

    # the time in epoch milliseconds at which the certificate becomes valid
    attr_accessor :not_before

    # The specified prime for the elliptic curve prime finite field in ECDSA.
    attr_accessor :ecdsa_ec_field_f2pp

    # the certificate issuers complete distinguished name
    attr_accessor :issuer

    # The second coefficient of this elliptic curve in ECDSA.
    attr_accessor :ecdsa_public_key_b

    # An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number
    attr_accessor :rsa_public_key_modulus

    # One of the DSA cryptogaphic algorithm's strength parameters
    attr_accessor :dsa_public_key_y

    # The co-factor in ECDSA.
    attr_accessor :ecdsa_public_key_cofactor

    # the time in epoch milliseconds at which the certificate becomes invalid
    attr_accessor :not_after

    # One of the DSA cryptogaphic algorithm's strength parameters, sub-prime
    attr_accessor :dsa_public_key_q

    # One of the DSA cryptogaphic algorithm's strength parameters, prime
    attr_accessor :dsa_public_key_p

    # y co-ordinate of G (the generator which is also known as the base point) in ECDSA.
    attr_accessor :ecdsa_public_key_generator_y

    # x co-ordinate of G (the generator which is also known as the base point) in ECDSA.
    attr_accessor :ecdsa_public_key_generator_x

    # Cryptographic algorithm used by the public key for data encryption.
    attr_accessor :public_key_algo

    # True if this certificate is valid.
    attr_accessor :is_valid

    # The bytes used during curve generation for later validation in ECDSA.| Contents of this array are copied to protect against subsequent modification.
    attr_accessor :ecdsa_public_key_seed

    # the signature value(the raw signature bits) used for signing and validate the cert
    attr_accessor :signature

    # certificate's serial number
    attr_accessor :serial_number

    # One of the DSA cryptogaphic algorithm's strength parameters, base
    attr_accessor :dsa_public_key_g

    # the certificate owners complete distinguished name
    attr_accessor :subject

    # Represents an elliptic curve (EC) finite field in ECDSA.
    attr_accessor :ecdsa_ec_field

    # The Curve name for the ECDSA certificate.
    attr_accessor :ecdsa_curve_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ecdsa_ec_field_f2mks' => :'ecdsa_ec_field_f2mks',
        :'version' => :'version',
        :'is_ca' => :'is_ca',
        :'signature_algorithm' => :'signature_algorithm',
        :'ecdsa_public_key_a' => :'ecdsa_public_key_a',
        :'rsa_public_key_exponent' => :'rsa_public_key_exponent',
        :'ecdsa_ec_field_f2mm' => :'ecdsa_ec_field_f2mm',
        :'issuer_cn' => :'issuer_cn',
        :'subject_cn' => :'subject_cn',
        :'ecdsa_public_key_order' => :'ecdsa_public_key_order',
        :'ecdsa_ec_field_f2mrp' => :'ecdsa_ec_field_f2mrp',
        :'public_key_length' => :'public_key_length',
        :'not_before' => :'not_before',
        :'ecdsa_ec_field_f2pp' => :'ecdsa_ec_field_f2pp',
        :'issuer' => :'issuer',
        :'ecdsa_public_key_b' => :'ecdsa_public_key_b',
        :'rsa_public_key_modulus' => :'rsa_public_key_modulus',
        :'dsa_public_key_y' => :'dsa_public_key_y',
        :'ecdsa_public_key_cofactor' => :'ecdsa_public_key_cofactor',
        :'not_after' => :'not_after',
        :'dsa_public_key_q' => :'dsa_public_key_q',
        :'dsa_public_key_p' => :'dsa_public_key_p',
        :'ecdsa_public_key_generator_y' => :'ecdsa_public_key_generator_y',
        :'ecdsa_public_key_generator_x' => :'ecdsa_public_key_generator_x',
        :'public_key_algo' => :'public_key_algo',
        :'is_valid' => :'is_valid',
        :'ecdsa_public_key_seed' => :'ecdsa_public_key_seed',
        :'signature' => :'signature',
        :'serial_number' => :'serial_number',
        :'dsa_public_key_g' => :'dsa_public_key_g',
        :'subject' => :'subject',
        :'ecdsa_ec_field' => :'ecdsa_ec_field',
        :'ecdsa_curve_name' => :'ecdsa_curve_name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ecdsa_ec_field_f2mks' => :'Array<Integer>',
        :'version' => :'String',
        :'is_ca' => :'BOOLEAN',
        :'signature_algorithm' => :'String',
        :'ecdsa_public_key_a' => :'String',
        :'rsa_public_key_exponent' => :'String',
        :'ecdsa_ec_field_f2mm' => :'Integer',
        :'issuer_cn' => :'String',
        :'subject_cn' => :'String',
        :'ecdsa_public_key_order' => :'String',
        :'ecdsa_ec_field_f2mrp' => :'String',
        :'public_key_length' => :'Integer',
        :'not_before' => :'Integer',
        :'ecdsa_ec_field_f2pp' => :'String',
        :'issuer' => :'String',
        :'ecdsa_public_key_b' => :'String',
        :'rsa_public_key_modulus' => :'String',
        :'dsa_public_key_y' => :'String',
        :'ecdsa_public_key_cofactor' => :'Integer',
        :'not_after' => :'Integer',
        :'dsa_public_key_q' => :'String',
        :'dsa_public_key_p' => :'String',
        :'ecdsa_public_key_generator_y' => :'String',
        :'ecdsa_public_key_generator_x' => :'String',
        :'public_key_algo' => :'String',
        :'is_valid' => :'BOOLEAN',
        :'ecdsa_public_key_seed' => :'Array<String>',
        :'signature' => :'String',
        :'serial_number' => :'String',
        :'dsa_public_key_g' => :'String',
        :'subject' => :'String',
        :'ecdsa_ec_field' => :'String',
        :'ecdsa_curve_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ecdsa_ec_field_f2mks')
        if (value = attributes[:'ecdsa_ec_field_f2mks']).is_a?(Array)
          self.ecdsa_ec_field_f2mks = value
        end
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'is_ca')
        self.is_ca = attributes[:'is_ca']
      end

      if attributes.has_key?(:'signature_algorithm')
        self.signature_algorithm = attributes[:'signature_algorithm']
      end

      if attributes.has_key?(:'ecdsa_public_key_a')
        self.ecdsa_public_key_a = attributes[:'ecdsa_public_key_a']
      end

      if attributes.has_key?(:'rsa_public_key_exponent')
        self.rsa_public_key_exponent = attributes[:'rsa_public_key_exponent']
      end

      if attributes.has_key?(:'ecdsa_ec_field_f2mm')
        self.ecdsa_ec_field_f2mm = attributes[:'ecdsa_ec_field_f2mm']
      end

      if attributes.has_key?(:'issuer_cn')
        self.issuer_cn = attributes[:'issuer_cn']
      end

      if attributes.has_key?(:'subject_cn')
        self.subject_cn = attributes[:'subject_cn']
      end

      if attributes.has_key?(:'ecdsa_public_key_order')
        self.ecdsa_public_key_order = attributes[:'ecdsa_public_key_order']
      end

      if attributes.has_key?(:'ecdsa_ec_field_f2mrp')
        self.ecdsa_ec_field_f2mrp = attributes[:'ecdsa_ec_field_f2mrp']
      end

      if attributes.has_key?(:'public_key_length')
        self.public_key_length = attributes[:'public_key_length']
      end

      if attributes.has_key?(:'not_before')
        self.not_before = attributes[:'not_before']
      end

      if attributes.has_key?(:'ecdsa_ec_field_f2pp')
        self.ecdsa_ec_field_f2pp = attributes[:'ecdsa_ec_field_f2pp']
      end

      if attributes.has_key?(:'issuer')
        self.issuer = attributes[:'issuer']
      end

      if attributes.has_key?(:'ecdsa_public_key_b')
        self.ecdsa_public_key_b = attributes[:'ecdsa_public_key_b']
      end

      if attributes.has_key?(:'rsa_public_key_modulus')
        self.rsa_public_key_modulus = attributes[:'rsa_public_key_modulus']
      end

      if attributes.has_key?(:'dsa_public_key_y')
        self.dsa_public_key_y = attributes[:'dsa_public_key_y']
      end

      if attributes.has_key?(:'ecdsa_public_key_cofactor')
        self.ecdsa_public_key_cofactor = attributes[:'ecdsa_public_key_cofactor']
      end

      if attributes.has_key?(:'not_after')
        self.not_after = attributes[:'not_after']
      end

      if attributes.has_key?(:'dsa_public_key_q')
        self.dsa_public_key_q = attributes[:'dsa_public_key_q']
      end

      if attributes.has_key?(:'dsa_public_key_p')
        self.dsa_public_key_p = attributes[:'dsa_public_key_p']
      end

      if attributes.has_key?(:'ecdsa_public_key_generator_y')
        self.ecdsa_public_key_generator_y = attributes[:'ecdsa_public_key_generator_y']
      end

      if attributes.has_key?(:'ecdsa_public_key_generator_x')
        self.ecdsa_public_key_generator_x = attributes[:'ecdsa_public_key_generator_x']
      end

      if attributes.has_key?(:'public_key_algo')
        self.public_key_algo = attributes[:'public_key_algo']
      end

      if attributes.has_key?(:'is_valid')
        self.is_valid = attributes[:'is_valid']
      end

      if attributes.has_key?(:'ecdsa_public_key_seed')
        if (value = attributes[:'ecdsa_public_key_seed']).is_a?(Array)
          self.ecdsa_public_key_seed = value
        end
      end

      if attributes.has_key?(:'signature')
        self.signature = attributes[:'signature']
      end

      if attributes.has_key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.has_key?(:'dsa_public_key_g')
        self.dsa_public_key_g = attributes[:'dsa_public_key_g']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'ecdsa_ec_field')
        self.ecdsa_ec_field = attributes[:'ecdsa_ec_field']
      end

      if attributes.has_key?(:'ecdsa_curve_name')
        self.ecdsa_curve_name = attributes[:'ecdsa_curve_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      public_key_algo_validator = EnumAttributeValidator.new('String', ['RSA', 'DSA', 'ECDSA'])
      return false unless public_key_algo_validator.valid?(@public_key_algo)
      ecdsa_ec_field_validator = EnumAttributeValidator.new('String', ['F2M', 'FP'])
      return false unless ecdsa_ec_field_validator.valid?(@ecdsa_ec_field)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] public_key_algo Object to be assigned
    def public_key_algo=(public_key_algo)
      validator = EnumAttributeValidator.new('String', ['RSA', 'DSA', 'ECDSA'])
      unless validator.valid?(public_key_algo)
        fail ArgumentError, 'invalid value for "public_key_algo", must be one of #{validator.allowable_values}.'
      end
      @public_key_algo = public_key_algo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ecdsa_ec_field Object to be assigned
    def ecdsa_ec_field=(ecdsa_ec_field)
      validator = EnumAttributeValidator.new('String', ['F2M', 'FP'])
      unless validator.valid?(ecdsa_ec_field)
        fail ArgumentError, 'invalid value for "ecdsa_ec_field", must be one of #{validator.allowable_values}.'
      end
      @ecdsa_ec_field = ecdsa_ec_field
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ecdsa_ec_field_f2mks == o.ecdsa_ec_field_f2mks &&
          version == o.version &&
          is_ca == o.is_ca &&
          signature_algorithm == o.signature_algorithm &&
          ecdsa_public_key_a == o.ecdsa_public_key_a &&
          rsa_public_key_exponent == o.rsa_public_key_exponent &&
          ecdsa_ec_field_f2mm == o.ecdsa_ec_field_f2mm &&
          issuer_cn == o.issuer_cn &&
          subject_cn == o.subject_cn &&
          ecdsa_public_key_order == o.ecdsa_public_key_order &&
          ecdsa_ec_field_f2mrp == o.ecdsa_ec_field_f2mrp &&
          public_key_length == o.public_key_length &&
          not_before == o.not_before &&
          ecdsa_ec_field_f2pp == o.ecdsa_ec_field_f2pp &&
          issuer == o.issuer &&
          ecdsa_public_key_b == o.ecdsa_public_key_b &&
          rsa_public_key_modulus == o.rsa_public_key_modulus &&
          dsa_public_key_y == o.dsa_public_key_y &&
          ecdsa_public_key_cofactor == o.ecdsa_public_key_cofactor &&
          not_after == o.not_after &&
          dsa_public_key_q == o.dsa_public_key_q &&
          dsa_public_key_p == o.dsa_public_key_p &&
          ecdsa_public_key_generator_y == o.ecdsa_public_key_generator_y &&
          ecdsa_public_key_generator_x == o.ecdsa_public_key_generator_x &&
          public_key_algo == o.public_key_algo &&
          is_valid == o.is_valid &&
          ecdsa_public_key_seed == o.ecdsa_public_key_seed &&
          signature == o.signature &&
          serial_number == o.serial_number &&
          dsa_public_key_g == o.dsa_public_key_g &&
          subject == o.subject &&
          ecdsa_ec_field == o.ecdsa_ec_field &&
          ecdsa_curve_name == o.ecdsa_curve_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ecdsa_ec_field_f2mks, version, is_ca, signature_algorithm, ecdsa_public_key_a, rsa_public_key_exponent, ecdsa_ec_field_f2mm, issuer_cn, subject_cn, ecdsa_public_key_order, ecdsa_ec_field_f2mrp, public_key_length, not_before, ecdsa_ec_field_f2pp, issuer, ecdsa_public_key_b, rsa_public_key_modulus, dsa_public_key_y, ecdsa_public_key_cofactor, not_after, dsa_public_key_q, dsa_public_key_p, ecdsa_public_key_generator_y, ecdsa_public_key_generator_x, public_key_algo, is_valid, ecdsa_public_key_seed, signature, serial_number, dsa_public_key_g, subject, ecdsa_ec_field, ecdsa_curve_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
