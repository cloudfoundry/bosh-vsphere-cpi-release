=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Node syslog exporter properties
  class NodeSyslogExporterProperties
    # Link to this resource
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # CA certificate PEM of TLS server to export to
    attr_accessor :tls_ca_pem

    # Export protocol
    attr_accessor :protocol

    # Syslog exporter name
    attr_accessor :exporter_name

    # Logging level to export
    attr_accessor :level

    # CA certificate PEM of the rsyslog client
    attr_accessor :tls_client_ca_pem

    # Certificate PEM of the rsyslog client
    attr_accessor :tls_cert_pem

    # IP address or hostname of server to export to
    attr_accessor :server

    # Facilities to export
    attr_accessor :facilities

    # MSGIDs to export
    attr_accessor :msgids

    # Structured data to export
    attr_accessor :structured_data

    # Port to export to
    attr_accessor :port

    # Private key PEM of the rsyslog client
    attr_accessor :tls_key_pem

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'tls_ca_pem' => :'tls_ca_pem',
        :'protocol' => :'protocol',
        :'exporter_name' => :'exporter_name',
        :'level' => :'level',
        :'tls_client_ca_pem' => :'tls_client_ca_pem',
        :'tls_cert_pem' => :'tls_cert_pem',
        :'server' => :'server',
        :'facilities' => :'facilities',
        :'msgids' => :'msgids',
        :'structured_data' => :'structured_data',
        :'port' => :'port',
        :'tls_key_pem' => :'tls_key_pem'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'tls_ca_pem' => :'String',
        :'protocol' => :'String',
        :'exporter_name' => :'String',
        :'level' => :'String',
        :'tls_client_ca_pem' => :'String',
        :'tls_cert_pem' => :'String',
        :'server' => :'String',
        :'facilities' => :'Array<String>',
        :'msgids' => :'Array<String>',
        :'structured_data' => :'Array<String>',
        :'port' => :'Integer',
        :'tls_key_pem' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'tls_ca_pem')
        self.tls_ca_pem = attributes[:'tls_ca_pem']
      end

      if attributes.has_key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.has_key?(:'exporter_name')
        self.exporter_name = attributes[:'exporter_name']
      end

      if attributes.has_key?(:'level')
        self.level = attributes[:'level']
      end

      if attributes.has_key?(:'tls_client_ca_pem')
        self.tls_client_ca_pem = attributes[:'tls_client_ca_pem']
      end

      if attributes.has_key?(:'tls_cert_pem')
        self.tls_cert_pem = attributes[:'tls_cert_pem']
      end

      if attributes.has_key?(:'server')
        self.server = attributes[:'server']
      end

      if attributes.has_key?(:'facilities')
        if (value = attributes[:'facilities']).is_a?(Array)
          self.facilities = value
        end
      end

      if attributes.has_key?(:'msgids')
        if (value = attributes[:'msgids']).is_a?(Array)
          self.msgids = value
        end
      end

      if attributes.has_key?(:'structured_data')
        if (value = attributes[:'structured_data']).is_a?(Array)
          self.structured_data = value
        end
      end

      if attributes.has_key?(:'port')
        self.port = attributes[:'port']
      else
        self.port = 514
      end

      if attributes.has_key?(:'tls_key_pem')
        self.tls_key_pem = attributes[:'tls_key_pem']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @protocol.nil?
        invalid_properties.push('invalid value for "protocol", protocol cannot be nil.')
      end

      if @exporter_name.nil?
        invalid_properties.push('invalid value for "exporter_name", exporter_name cannot be nil.')
      end

      if @level.nil?
        invalid_properties.push('invalid value for "level", level cannot be nil.')
      end

      if @server.nil?
        invalid_properties.push('invalid value for "server", server cannot be nil.')
      end

      if !@port.nil? && @port > 65535
        invalid_properties.push('invalid value for "port", must be smaller than or equal to 65535.')
      end

      if !@port.nil? && @port < 1
        invalid_properties.push('invalid value for "port", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @protocol.nil?
      protocol_validator = EnumAttributeValidator.new('String', ['TCP', 'TLS', 'UDP', 'LI', 'LI-TLS'])
      return false unless protocol_validator.valid?(@protocol)
      return false if @exporter_name.nil?
      return false if @level.nil?
      level_validator = EnumAttributeValidator.new('String', ['EMERG', 'ALERT', 'CRIT', 'ERR', 'WARNING', 'NOTICE', 'INFO', 'DEBUG'])
      return false unless level_validator.valid?(@level)
      return false if @server.nil?
      return false if !@port.nil? && @port > 65535
      return false if !@port.nil? && @port < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol Object to be assigned
    def protocol=(protocol)
      validator = EnumAttributeValidator.new('String', ['TCP', 'TLS', 'UDP', 'LI', 'LI-TLS'])
      unless validator.valid?(protocol)
        fail ArgumentError, 'invalid value for "protocol", must be one of #{validator.allowable_values}.'
      end
      @protocol = protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level Object to be assigned
    def level=(level)
      validator = EnumAttributeValidator.new('String', ['EMERG', 'ALERT', 'CRIT', 'ERR', 'WARNING', 'NOTICE', 'INFO', 'DEBUG'])
      unless validator.valid?(level)
        fail ArgumentError, 'invalid value for "level", must be one of #{validator.allowable_values}.'
      end
      @level = level
    end

    # Custom attribute writer method with validation
    # @param [Object] port Value to be assigned
    def port=(port)
      if !port.nil? && port > 65535
        fail ArgumentError, 'invalid value for "port", must be smaller than or equal to 65535.'
      end

      if !port.nil? && port < 1
        fail ArgumentError, 'invalid value for "port", must be greater than or equal to 1.'
      end

      @port = port
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          tls_ca_pem == o.tls_ca_pem &&
          protocol == o.protocol &&
          exporter_name == o.exporter_name &&
          level == o.level &&
          tls_client_ca_pem == o.tls_client_ca_pem &&
          tls_cert_pem == o.tls_cert_pem &&
          server == o.server &&
          facilities == o.facilities &&
          msgids == o.msgids &&
          structured_data == o.structured_data &&
          port == o.port &&
          tls_key_pem == o.tls_key_pem
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, tls_ca_pem, protocol, exporter_name, level, tls_client_ca_pem, tls_cert_pem, server, facilities, msgids, structured_data, port, tls_key_pem].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
