=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  # Host Node Status
  class HostNodeStatus
    # Gives details of state of desired configuration. This property is available only if Tranport Node exists for the host. Following are the supported values pending  - Transport Node configuration status is pending in_progress - Transport Node configuration status is in progress success - Transport Node configuration status is successful failed - Transport Node configuration status is failed partial_success - Transport Node configuration status is partial success orphaned - Transport Node configuration status is orphaned unknown - Transport Node configuration status is unknown error - Error occured during Transport Node configuration
    attr_accessor :config_status

    # Unique Id of the host node
    attr_accessor :node_id

    # This specifies the current nsx install status for host node. Following are the supported values INSTALL_IN_PROGRESS - NSX installation is in progress on the host INSTALL_FAILED - NSX installation failed on the host INSTALL_SUCCESSFUL - NSX installation successful on the host UNINSTALL_IN_PROGRESS - NSX uninstallation in progress on the host UNINSTALL_FAILED - NSX uninstallation failed on the host UNINSTALL_SUCCESSFUL - NSX uninstallation successful on the host UNINSTALL_SCHEDULED - NSX uninstallation is scheduled on the host UPGRADE_IN_PROGRESS - NSX upgrade is in progress on the host UPGRADE_FAILED - NSX upgrade failed on the host DEPLOYMENT_QUEUED - Deployment is queued on the DEPLOYMENT_IN_PROGRESS - Deployment is in progress DEPLOYMENT_FAILED - Deployment is failed DEPLOYMENT_SUCCESSFUL - Deployment is successful UNDEPLOYMENT_QUEUED - Undeployment is queued UNDEPLOYMENT_IN_PROGRESS - Undeployment is in progress UNDEPLOYMENT_FAILED - Undeployment failed UNDEPLOYMENT_SUCCESSFUL - Undeployment is successful UPGRADE_QUEUED - Upgrade is queued HOST_DISCONNECTED - Host is disconnected POWERED_OFF - Host is powered off
    attr_accessor :deployment_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'config_status' => :'config_status',
        :'node_id' => :'node_id',
        :'deployment_status' => :'deployment_status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'config_status' => :'String',
        :'node_id' => :'String',
        :'deployment_status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'config_status')
        self.config_status = attributes[:'config_status']
      end

      if attributes.has_key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.has_key?(:'deployment_status')
        self.deployment_status = attributes[:'deployment_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      config_status_validator = EnumAttributeValidator.new('String', ['pending', 'in_progress', 'success', 'failed', 'partial_success', 'orphaned', 'unknown', 'error'])
      return false unless config_status_validator.valid?(@config_status)
      deployment_status_validator = EnumAttributeValidator.new('String', ['INSTALL_IN_PROGRESS', 'INSTALL_FAILED', 'INSTALL_SUCCESSFUL', 'UNINSTALL_IN_PROGRESS', 'UNINSTALL_FAILED', 'UNINSTALL_SUCCESSFUL', 'UNINSTALL_SCHEDULED', 'UPGRADE_IN_PROGRESS', 'UPGRADE_FAILED', 'DEPLOYMENT_QUEUED', 'DEPLOYMENT_IN_PROGRESS', 'DEPLOYMENT_FAILED', 'DEPLOYMENT_SUCCESSFUL', 'UNDEPLOYMENT_QUEUED', 'UNDEPLOYMENT_IN_PROGRESS', 'UNDEPLOYMENT_FAILED', 'UNDEPLOYMENT_SUCCESSFUL', 'UPGRADE_QUEUED', 'HOST_DISCONNECTED', 'POWERED_OFF'])
      return false unless deployment_status_validator.valid?(@deployment_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] config_status Object to be assigned
    def config_status=(config_status)
      validator = EnumAttributeValidator.new('String', ['pending', 'in_progress', 'success', 'failed', 'partial_success', 'orphaned', 'unknown', 'error'])
      unless validator.valid?(config_status)
        fail ArgumentError, 'invalid value for "config_status", must be one of #{validator.allowable_values}.'
      end
      @config_status = config_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_status Object to be assigned
    def deployment_status=(deployment_status)
      validator = EnumAttributeValidator.new('String', ['INSTALL_IN_PROGRESS', 'INSTALL_FAILED', 'INSTALL_SUCCESSFUL', 'UNINSTALL_IN_PROGRESS', 'UNINSTALL_FAILED', 'UNINSTALL_SUCCESSFUL', 'UNINSTALL_SCHEDULED', 'UPGRADE_IN_PROGRESS', 'UPGRADE_FAILED', 'DEPLOYMENT_QUEUED', 'DEPLOYMENT_IN_PROGRESS', 'DEPLOYMENT_FAILED', 'DEPLOYMENT_SUCCESSFUL', 'UNDEPLOYMENT_QUEUED', 'UNDEPLOYMENT_IN_PROGRESS', 'UNDEPLOYMENT_FAILED', 'UNDEPLOYMENT_SUCCESSFUL', 'UPGRADE_QUEUED', 'HOST_DISCONNECTED', 'POWERED_OFF'])
      unless validator.valid?(deployment_status)
        fail ArgumentError, 'invalid value for "deployment_status", must be one of #{validator.allowable_values}.'
      end
      @deployment_status = deployment_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          config_status == o.config_status &&
          node_id == o.node_id &&
          deployment_status == o.deployment_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [config_status, node_id, deployment_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
