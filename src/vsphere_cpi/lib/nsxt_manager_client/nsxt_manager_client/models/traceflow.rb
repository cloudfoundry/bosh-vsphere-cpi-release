=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module NSXT
  class Traceflow
    # Link to this resource
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # Represents the traceflow operation state
    attr_accessor :operation_state

    # counters of observations from logical components
    attr_accessor :logical_counters

    # Maximum time (in ms) the management plane will be waiting for this traceflow round.
    attr_accessor :timeout

    # A flag, when set true, indicates some observations were deleted from the result set.
    attr_accessor :result_overflowed

    # id of the source logical port used for injecting the traceflow packet
    attr_accessor :lport_id

    # observation counters
    attr_accessor :counters

    # The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.
    attr_accessor :request_status

    # Traceflow result analysis notes
    attr_accessor :analysis

    # The id of the traceflow round
    attr_accessor :id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'operation_state' => :'operation_state',
        :'logical_counters' => :'logical_counters',
        :'timeout' => :'timeout',
        :'result_overflowed' => :'result_overflowed',
        :'lport_id' => :'lport_id',
        :'counters' => :'counters',
        :'request_status' => :'request_status',
        :'analysis' => :'analysis',
        :'id' => :'id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'operation_state' => :'String',
        :'logical_counters' => :'TraceflowObservationCounters',
        :'timeout' => :'Integer',
        :'result_overflowed' => :'BOOLEAN',
        :'lport_id' => :'String',
        :'counters' => :'TraceflowObservationCounters',
        :'request_status' => :'String',
        :'analysis' => :'Array<String>',
        :'id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'operation_state')
        self.operation_state = attributes[:'operation_state']
      end

      if attributes.has_key?(:'logical_counters')
        self.logical_counters = attributes[:'logical_counters']
      end

      if attributes.has_key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.has_key?(:'result_overflowed')
        self.result_overflowed = attributes[:'result_overflowed']
      end

      if attributes.has_key?(:'lport_id')
        self.lport_id = attributes[:'lport_id']
      end

      if attributes.has_key?(:'counters')
        self.counters = attributes[:'counters']
      end

      if attributes.has_key?(:'request_status')
        self.request_status = attributes[:'request_status']
      end

      if attributes.has_key?(:'analysis')
        if (value = attributes[:'analysis']).is_a?(Array)
          self.analysis = value
        end
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@timeout.nil? && @timeout > 15000
        invalid_properties.push('invalid value for "timeout", must be smaller than or equal to 15000.')
      end

      if !@timeout.nil? && @timeout < 5000
        invalid_properties.push('invalid value for "timeout", must be greater than or equal to 5000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      operation_state_validator = EnumAttributeValidator.new('String', ['IN_PROGRESS', 'FINISHED', 'FAILED'])
      return false unless operation_state_validator.valid?(@operation_state)
      return false if !@timeout.nil? && @timeout > 15000
      return false if !@timeout.nil? && @timeout < 5000
      request_status_validator = EnumAttributeValidator.new('String', ['SUCCESS', 'TIMEOUT', 'SOURCE_PORT_NOT_FOUND', 'DATA_PATH_NOT_READY', 'CONNECTION_ERROR', 'UNKNOWN'])
      return false unless request_status_validator.valid?(@request_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation_state Object to be assigned
    def operation_state=(operation_state)
      validator = EnumAttributeValidator.new('String', ['IN_PROGRESS', 'FINISHED', 'FAILED'])
      unless validator.valid?(operation_state)
        fail ArgumentError, 'invalid value for "operation_state", must be one of #{validator.allowable_values}.'
      end
      @operation_state = operation_state
    end

    # Custom attribute writer method with validation
    # @param [Object] timeout Value to be assigned
    def timeout=(timeout)
      if !timeout.nil? && timeout > 15000
        fail ArgumentError, 'invalid value for "timeout", must be smaller than or equal to 15000.'
      end

      if !timeout.nil? && timeout < 5000
        fail ArgumentError, 'invalid value for "timeout", must be greater than or equal to 5000.'
      end

      @timeout = timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_status Object to be assigned
    def request_status=(request_status)
      validator = EnumAttributeValidator.new('String', ['SUCCESS', 'TIMEOUT', 'SOURCE_PORT_NOT_FOUND', 'DATA_PATH_NOT_READY', 'CONNECTION_ERROR', 'UNKNOWN'])
      unless validator.valid?(request_status)
        fail ArgumentError, 'invalid value for "request_status", must be one of #{validator.allowable_values}.'
      end
      @request_status = request_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          operation_state == o.operation_state &&
          logical_counters == o.logical_counters &&
          timeout == o.timeout &&
          result_overflowed == o.result_overflowed &&
          lport_id == o.lport_id &&
          counters == o.counters &&
          request_status == o.request_status &&
          analysis == o.analysis &&
          id == o.id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, operation_state, logical_counters, timeout, result_overflowed, lport_id, counters, request_status, analysis, id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NSXT.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
