require 'integration/spec_helper'

describe 'NSXT certificate authentication' do

  #certificate and key were generated by following command
  #openssl req -newkey rsa:2048 -x509 -nodes -keyout /tmp/cert/pks.key -new -out /tmp/cert/pks.crt -subj /CN=bosh-test-user -sha256 -days 730

  before(:all) do
    @nsxt_host = fetch_property('BOSH_VSPHERE_CPI_NSXT_HOST')
    cert_file = File.join(File.dirname(__FILE__), 'assets', 'test.crt')
    private_key_file = File.join(File.dirname(__FILE__), 'assets', 'test.key')
    configuration = NSXT::Configuration.new
    configuration.host = @nsxt_host
    configuration.username = fetch_property('BOSH_VSPHERE_CPI_NSXT_USERNAME')
    configuration.password = fetch_property('BOSH_VSPHERE_CPI_NSXT_PASSWORD')
    configuration.client_side_validation = false
    configuration.verify_ssl = false
    configuration.verify_ssl_host = false
    client = NSXT::ApiClient.new(configuration)
    @nsx_component_api = NSXT::NsxComponentAdministrationApi.new(client)
    @cert_id = submit_cert_to_nsxt(cert_file)
  end

  after(:all) do
    delete_test_certificate(@cert_id) unless @cert_id.nil?
  end

  let(:private_key_file) { File.join(File.dirname(__FILE__), 'assets', 'test.key') }
  let(:cert_file) { File.join(File.dirname(__FILE__), 'assets', 'test.crt') }
  let(:configuration) {
    configuration = NSXT::Configuration.new
    configuration.host = @nsxt_host
    configuration.key_file  = private_key_file
    configuration.cert_file = cert_file
    configuration.client_side_validation = false
    configuration.verify_ssl = false
    configuration.verify_ssl_host = false
    configuration
  }
  let(:client) { NSXT::ApiClient.new(configuration) }
  let(:nsx_component_api) { NSXT::NsxComponentAdministrationApi.new(client) }

  context 'when certificate is attached to principal' do
    before do
      @principal_id = attach_cert_to_principal
    end

    after do
      delete_principal unless @principal_id.nil?
    end

    it 'used to authenticate a client' do
      certs = nsx_component_api.get_certificates
      expect(certs).not_to be_nil
    end
  end

  context 'if certificate is not attach to principal' do
    let(:private_key_file) { File.join(File.dirname(__FILE__), 'assets', 'test2.key') }
    let(:cert_file) { File.join(File.dirname(__FILE__), 'assets', 'test2.crt') }

    before do
      @cert2_id = submit_cert_to_nsxt(cert_file)
    end

    after do
      delete_test_certificate(@cert2_id) unless @cert2_id.nil?
    end


    it 'returns auth exception' do
      expect {
        nsx_component_api.get_certificates
      }.to raise_error(/SSL connect error/)
    end
  end

  def submit_cert_to_nsxt(cert_file)
    certificate = File.open(cert_file).readlines.join
    trust_object = NSXT::TrustObjectData.new(pem_encoded: certificate)
    certs = @nsx_component_api.add_certificate_import(trust_object)
    certs.results[0].id
  end

  def delete_test_certificate(cert_id)
    @nsx_component_api.delete_certificate(cert_id)
  end

  def attach_cert_to_principal
    pi = NSXT::PrincipalIdentity.new(name: 'testprincipal', node_id: 'node-1',
                                     certificate_id: @cert_id, permission_group: 'read_write_api_users')
    @nsx_component_api.register_principal_identity(pi).id
  end

  def delete_principal
    @nsx_component_api.delete_principal_identity(@principal_id)
  end
end