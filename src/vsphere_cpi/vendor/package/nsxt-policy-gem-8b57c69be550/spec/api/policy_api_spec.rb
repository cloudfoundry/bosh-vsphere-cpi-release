=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PolicyApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PolicyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyApi' do
    it 'should create an instance of PolicyApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PolicyApi)
    end
  end

  # unit tests for delete_domain
  # Delete Domain and all the entities contained by this domain
  # Delete the domain along with all the entities contained by this domain. The groups that are a part of this domain are also deleted along with the domain. 
  # @param domain_id Domain ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_group
  # Delete Group
  # Delete Group
  # @param domain_id Domain ID
  # @param group_id Group ID
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
  # @return [nil]
  describe 'delete_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_service_entry
  # Delete Service entry
  # Delete Service entry
  # @param service_id Service ID
  # @param service_entry_id Service entry ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_service_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_service_for_tenant
  # Delete Service
  # Delete Service
  # @param service_id Service ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_service_for_tenant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_domain_for_infra
  # List domains for infra
  # Paginated list of all domains for infra. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [DomainListResult]
  describe 'list_domain_for_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_gateway_policies_for_domain
  # List gateway policies
  # List all gateway policies for specified Domain.
  # @param domain_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [GatewayPolicyListResult]
  describe 'list_gateway_policies_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_group_for_domain
  # List Groups for a domain
  # List Groups for a domain
  # @param domain_id Domain ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [GroupListResult]
  describe 'list_group_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_service_entries
  # List Service entries for the given service
  # Paginated list of Service entries for the given service 
  # @param service_id Service ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [ServiceEntryListResult]
  describe 'list_service_entries test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_services_for_tenant
  # List Services for infra
  # Paginated list of Services for infra. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :default_service Fetch all default services
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [ServiceListResult]
  describe 'list_services_for_tenant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_domain_for_infra
  # Patch a domain
  # If a domain with the domain-id is not already present, create a new domain. If it already exists, patch the domain 
  # @param domain_id Domain ID
  # @param domain 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_domain_for_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_group_for_domain
  # Patch a group
  # If a group with the group-id is not already present, create a new group. If it already exists, patch the group. 
  # @param domain_id Domain ID
  # @param group_id Group ID
  # @param group 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_group_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_infra
  # Update the infra including all the nested entities
  # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependecies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. 
  # @param infra 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :enforce_revision_check Force revision check
  # @return [nil]
  describe 'patch_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_service_entry
  # Patch a ServiceEntry
  # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, patch the service entry. 
  # @param service_id Service ID
  # @param service_entry_id Service entry ID
  # @param service_entry 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_service_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_service_for_tenant
  # Patch a Service
  # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, patch the service including the nested service entries. 
  # @param service_id Service ID
  # @param service 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_service_for_tenant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_domain_for_infra
  # Read domain
  # Read a domain. 
  # @param domain_id Domain ID
  # @param [Hash] opts the optional parameters
  # @return [Domain]
  describe 'read_domain_for_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_group_for_domain
  # Read group
  # Read group
  # @param domain_id Domain ID
  # @param group_id Group ID
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'read_group_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_infra
  # Read infra
  # Read infra. Returns only the infra related properties. Inner object are not populated. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter string as java regex
  # @return [Infra]
  describe 'read_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_service_entry
  # Service entry
  # Service entry
  # @param service_id Service ID
  # @param service_entry_id Service entry ID
  # @param [Hash] opts the optional parameters
  # @return [ServiceEntry]
  describe 'read_service_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_service_for_tenant
  # Read a service
  # Read a service
  # @param service_id Service ID
  # @param [Hash] opts the optional parameters
  # @return [Service]
  describe 'read_service_for_tenant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for revise_gateway_policy_revise
  # Revise the positioning of gateway policy
  # This is used to set a precedence of a gateway policy w.r.t others. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param gateway_policy 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
  # @option opts [String] :operation Operation
  # @return [GatewayPolicy]
  describe 'revise_gateway_policy_revise test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for revise_gateway_rule_revise
  # Revise the positioning of gateway rule
  # This is used to re-order a gateway rule within a gateway policy. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param rule_id 
  # @param rule 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
  # @option opts [String] :operation Operation
  # @return [Rule]
  describe 'revise_gateway_rule_revise test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_domain_for_infra
  # Create or update a domain
  # If a domain with the domain-id is not already present, create a new domain. If it already exists, update the domain including the nested groups. This is a full replace 
  # @param domain_id Domain ID
  # @param domain 
  # @param [Hash] opts the optional parameters
  # @return [Domain]
  describe 'update_domain_for_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_group_for_domain
  # Create or update a group
  # If a group with the group-id is not already present, create a new group. If it already exists, update the group. 
  # @param domain_id Domain ID
  # @param group_id Group ID
  # @param group 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'update_group_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_infra
  # Update the infra including all the nested entities
  # Update the infra including all the nested entities
  # @param infra 
  # @param [Hash] opts the optional parameters
  # @return [Infra]
  describe 'update_infra test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_service_entry
  # Create or update a ServiceEntry
  # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
  # @param service_id Service ID
  # @param service_entry_id Service entry ID
  # @param service_entry 
  # @param [Hash] opts the optional parameters
  # @return [ServiceEntry]
  describe 'update_service_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_service_for_tenant
  # Create or update a Service
  # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
  # @param service_id Service ID
  # @param service 
  # @param [Hash] opts the optional parameters
  # @return [Service]
  describe 'update_service_for_tenant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
