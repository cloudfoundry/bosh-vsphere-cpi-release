=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PolicyGiApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyGiApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PolicyGiApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyGiApi' do
    it 'should create an instance of PolicyGiApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PolicyGiApi)
    end
  end

  # unit tests for create_or_update_endpoint_policy
  # Create or update Endpoint policy
  # Create or update the Endpoint policy. 
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param endpoint_policy 
  # @param [Hash] opts the optional parameters
  # @return [EndpointPolicy]
  describe 'create_or_update_endpoint_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_update_endpoint_rule
  # Update Endpoint rule
  # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param endpoint_rule_id Endpoint rule id
  # @param endpoint_rule 
  # @param [Hash] opts the optional parameters
  # @return [EndpointRule]
  describe 'create_or_update_endpoint_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_endpoint_policy
  # Delete Endpoint policy
  # Delete Endpoint policy.
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_endpoint_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_endpoint_rule
  # Delete EndpointRule
  # Delete EndpointRule
  # @param domain_id Domain ID
  # @param endpoint_policy_id EndpointPolicy ID
  # @param endpoint_rule_id EndpointRule ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_endpoint_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_endpoint_rule
  # List Endpoint rules
  # List Endpoint rules
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [EndpointRuleListResult]
  describe 'list_endpoint_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_endpoint_policy
  # Create or update Endpoint policy
  # Create or update the Endpoint policy. 
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param endpoint_policy 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_endpoint_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_endpoint_rule
  # Update Endpoint rule
  # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param endpoint_rule_id Endpoint rule id
  # @param endpoint_rule 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_endpoint_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_endpoint_policy
  # Read Endpoint policy
  # Read Endpoint policy. 
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param [Hash] opts the optional parameters
  # @return [EndpointPolicy]
  describe 'read_endpoint_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_endpoint_rule
  # Read Endpoint rule
  # Read Endpoint rule
  # @param domain_id Domain id
  # @param endpoint_policy_id Endpoint policy id
  # @param endpoint_rule_id Endpoint rule id
  # @param [Hash] opts the optional parameters
  # @return [EndpointRule]
  describe 'read_endpoint_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
