=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PolicyPoolManagementIpPoolsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyPoolManagementIpPoolsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PolicyPoolManagementIpPoolsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyPoolManagementIpPoolsApi' do
    it 'should create an instance of PolicyPoolManagementIpPoolsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PolicyPoolManagementIpPoolsApi)
    end
  end

  # unit tests for create_or_patch_ip_address_block
  # Create a new IPBlock
  # Creates a new IpAddressBlock with specified ID if not already present. If IpAddressBlock of given ID is already present, then the instance is updated with specified attributes. 
  # @param ip_block_id 
  # @param ip_address_block 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_or_patch_ip_address_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_patch_ip_address_pool
  # Create a new IP address pool
  # Creates a new IpAddressPool with specified ID if not already present. If IpAddressPool of given ID is already present, then the instance is updated. This is a full replace. 
  # @param ip_pool_id 
  # @param ip_address_pool 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_or_patch_ip_address_pool test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_patch_ip_address_pool_allocation
  # Records intent to allocate an IP Address from an IP Pool
  # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. 
  # @param ip_pool_id 
  # @param ip_allocation_id 
  # @param ip_address_allocation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_or_patch_ip_address_pool_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_patch_ip_address_pool_subnet
  # Create a new IP Subnet
  # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
  # @param ip_pool_id 
  # @param ip_subnet_id 
  # @param ip_address_pool_subnet 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_or_patch_ip_address_pool_subnet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_ip_address_block
  # Create or Replace IpAddressBlock
  # Create a new IpAddressBlock with given ID if it does not exist. If IpAddressBlock with given ID already exists, it will update existing instance. This is a full replace. 
  # @param ip_block_id 
  # @param ip_address_block 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressBlock]
  describe 'create_or_replace_ip_address_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_ip_address_pool
  # Create or Replace IpAddressPool
  # Create a new IpAddressPool with given ID if it does not exist. If IpAddressPool with given ID already exists, it will update existing instance. This is a full replace. 
  # @param ip_pool_id 
  # @param ip_address_pool 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressPool]
  describe 'create_or_replace_ip_address_pool test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_ip_address_pool_allocation
  # Records intent to allocate an IP Address from an IP Pool
  # If allocation of the same ID is found, this is a no-op. If no allocation of the specified ID is found, then a new allocation is created. An allocation cannot be updated once created. When an IP allocation is requested from an IpAddressPool, the IP could be allocated from any subnet in the pool that has the available capacity. Request to allocate an IP will fail if no subnet was previously created. If specific IP was requested, the status of allocation is reflected in the realized state. If any IP is requested, the IP finally allocated is obtained by polling on the realized state until the allocated IP is returned in the extended attributes. An allocation cannot be updated once created. 
  # @param ip_pool_id 
  # @param ip_allocation_id 
  # @param ip_address_allocation 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressAllocation]
  describe 'create_or_replace_ip_address_pool_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_ip_address_pool_subnet
  # Create a new IP Subnet
  # Creates a new IpAddressPoolSubnet with the specified ID if it does not already exist. If a IpAddressPoolSubnet of the given ID already exists, IpAddressPoolSubnet will be updated. This is a full replace. 
  # @param ip_pool_id 
  # @param ip_subnet_id 
  # @param ip_address_pool_subnet 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressPoolSubnet]
  describe 'create_or_replace_ip_address_pool_subnet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ip_address_block
  # Delete an IpAddressBlock
  # Delete the IpAddressBlock with the given id. 
  # @param ip_block_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ip_address_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ip_address_pool
  # Delete an IpAddressPool
  # Delete the IpAddressPool with the given id. 
  # @param ip_pool_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ip_address_pool test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ip_address_pool_allocation
  # Records intent to release an IP from an IpPool.
  # Releases the IP that was allocated for this allocation request 
  # @param ip_pool_id 
  # @param ip_allocation_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ip_address_pool_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ip_address_pool_subnet
  # Delete an IpAddressPoolSubnet
  # Delete the IpAddressPoolSubnet with the given id. 
  # @param ip_pool_id 
  # @param ip_subnet_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ip_address_pool_subnet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_ip_address_blocks
  # List IpAddressBlocks
  # Paginated list of IpAddressBlocks. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [IpAddressBlockListResult]
  describe 'list_ip_address_blocks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_ip_address_pool_allocations
  # List IpAddressPool Allocations
  # Returns information about which addresses have been allocated from a specified IP address pool in policy. 
  # @param ip_pool_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [IpAddressAllocationListResult]
  describe 'list_ip_address_pool_allocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_ip_address_pool_subnets
  # List IpAddressPoolSubnets
  # Paginated list of IpAddressPoolSubnets. 
  # @param ip_pool_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [IpAddressPoolSubnetListResult]
  describe 'list_ip_address_pool_subnets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_ip_address_pools
  # List IpAddressPools
  # Paginated list of IpAddressPools. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [IpAddressPoolListResult]
  describe 'list_ip_address_pools test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_ip_address_block
  # Read a IpAddressBlock
  # Read IpAddressBlock with given Id. 
  # @param ip_block_id 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressBlock]
  describe 'read_ip_address_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_ip_address_pool
  # Read an IpAddressPool
  # Read IpAddressPool with given Id. 
  # @param ip_pool_id 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressPool]
  describe 'read_ip_address_pool test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_ip_address_pool_allocation
  # Read policy IpPool allocation
  # Read a previously created allocation 
  # @param ip_pool_id 
  # @param ip_allocation_id 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressAllocation]
  describe 'read_ip_address_pool_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_ip_address_pool_subnet
  # Read an IpAddressPoolSubnet
  # Read IpAddressPoolSubnet with given Id. 
  # @param ip_pool_id 
  # @param ip_subnet_id 
  # @param [Hash] opts the optional parameters
  # @return [IpAddressPoolSubnet]
  describe 'read_ip_address_pool_subnet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
