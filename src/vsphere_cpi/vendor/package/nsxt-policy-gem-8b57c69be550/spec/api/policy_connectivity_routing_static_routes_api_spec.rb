=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PolicyConnectivityRoutingStaticRoutesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyConnectivityRoutingStaticRoutesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PolicyConnectivityRoutingStaticRoutesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyConnectivityRoutingStaticRoutesApi' do
    it 'should create an instance of PolicyConnectivityRoutingStaticRoutesApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PolicyConnectivityRoutingStaticRoutesApi)
    end
  end

  # unit tests for create_or_replace_tier0_static_routes
  # Create or update a Tier-0 static routes
  # If static routes for route-id are not already present, create static routes. If it already exists, replace the static routes for route-id. 
  # @param tier_0_id 
  # @param route_id 
  # @param static_routes 
  # @param [Hash] opts the optional parameters
  # @return [StaticRoutes]
  describe 'create_or_replace_tier0_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_tier1_static_routes
  # Create or update a Tier-1 static routes
  # If static routes for route-id are not already present, create static routes. If it already exists, replace the static routes for route-id. 
  # @param tier_1_id 
  # @param route_id 
  # @param static_routes 
  # @param [Hash] opts the optional parameters
  # @return [StaticRoutes]
  describe 'create_or_replace_tier1_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tier0_static_routes
  # Delete Tier-0 static routes
  # Delete Tier-0 static routes
  # @param tier_0_id 
  # @param route_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tier0_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tier1_static_routes
  # Delete Tier-1 static routes
  # Delete Tier-1 static routes
  # @param tier_1_id 
  # @param route_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tier1_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_tier0_static_routes
  # List Tier-0 Static Routes
  # Paginated list of all Tier-0 Static Routes 
  # @param tier_0_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [StaticRoutesListResult]
  describe 'list_tier0_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_tier1_static_routes
  # List Tier-1 Static Routes
  # Paginated list of all Tier-1 Static Routes 
  # @param tier_1_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [StaticRoutesListResult]
  describe 'list_tier1_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_tier0_static_routes
  # Create or update a Tier-0 static routes
  # If static routes for route-id are not already present, create static routes. If it already exists, update static routes for route-id. 
  # @param tier_0_id 
  # @param route_id 
  # @param static_routes 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_tier0_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_tier1_static_routes
  # Create or update a Tier-1 static routes
  # If static routes for route-id are not already present, create static routes. If it already exists, update static routes for route-id. 
  # @param tier_1_id 
  # @param route_id 
  # @param static_routes 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_tier1_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_tier0_static_routes
  # Read Tier-0 static routes
  # Read Tier-0 static routes
  # @param tier_0_id 
  # @param route_id 
  # @param [Hash] opts the optional parameters
  # @return [StaticRoutes]
  describe 'read_tier0_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_tier1_static_routes
  # Read Tier-1 static routes
  # Read Tier-1 static routes
  # @param tier_1_id 
  # @param route_id 
  # @param [Hash] opts the optional parameters
  # @return [StaticRoutes]
  describe 'read_tier1_static_routes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
