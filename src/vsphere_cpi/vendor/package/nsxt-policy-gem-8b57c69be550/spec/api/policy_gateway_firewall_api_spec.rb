=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PolicyGatewayFirewallApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyGatewayFirewallApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PolicyGatewayFirewallApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyGatewayFirewallApi' do
    it 'should create an instance of PolicyGatewayFirewallApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PolicyGatewayFirewallApi)
    end
  end

  # unit tests for create_or_replace_gateway_policy_for_domain
  # Update gateway policy
  # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param gateway_policy 
  # @param [Hash] opts the optional parameters
  # @return [GatewayPolicy]
  describe 'create_or_replace_gateway_policy_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_gateway_rule
  # Update gateway rule
  # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param rule_id 
  # @param rule 
  # @param [Hash] opts the optional parameters
  # @return [Rule]
  describe 'create_or_replace_gateway_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_or_replace_tier0_group
  # Create or update Group under specified Tier-0
  # If a Group with the group-id is not already present, create a new Group under the tier-0-id. Update if exists. The API valiates that Tier-0 is present before creating the Group. 
  # @param tier_0_id 
  # @param group_id 
  # @param group 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'create_or_replace_tier0_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_gateway_policy
  # Delete GatewayPolicy
  # Delete GatewayPolicy
  # @param domain_id 
  # @param gateway_policy_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_gateway_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_gateway_rule
  # Delete rule
  # Delete rule
  # @param domain_id 
  # @param gateway_policy_id 
  # @param rule_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_gateway_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tier0_group
  # Deletes Group under Tier-0
  # Delete the Group under Tier-0. 
  # @param tier_0_id 
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tier0_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_gateway_rules
  # List rules
  # List rules
  # @param domain_id 
  # @param gateway_policy_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [RuleListResult]
  describe 'list_gateway_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_tier0_group
  # List Groups for Tier-0
  # Paginated list of all Groups for Tier-0. 
  # @param tier_0_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
  # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
  # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
  # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
  # @option opts [BOOLEAN] :sort_ascending 
  # @option opts [String] :sort_by Field by which records are sorted
  # @return [GroupListResult]
  describe 'list_tier0_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_gateway_policy_for_domain
  # Update gateway policy
  # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param gateway_policy 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_gateway_policy_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_gateway_rule
  # Update gateway rule
  # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param rule_id 
  # @param rule 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_gateway_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_tier0_group
  # Create or update Group under specified Tier-0
  # If a Group with the group-id is not already present, create a new Group under the tier-0-id. Update if exists. The API valiates that Tier-0 is present before creating the Group. 
  # @param tier_0_id 
  # @param group_id 
  # @param group 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_tier0_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_gateway_policy_for_domain
  # Read gateway policy
  # Read gateway policy for a domain. 
  # @param domain_id 
  # @param gateway_policy_id 
  # @param [Hash] opts the optional parameters
  # @return [GatewayPolicy]
  describe 'read_gateway_policy_for_domain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_gateway_rule
  # Read rule
  # Read rule
  # @param domain_id 
  # @param gateway_policy_id 
  # @param rule_id 
  # @param [Hash] opts the optional parameters
  # @return [Rule]
  describe 'read_gateway_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_tier0_group
  # Read Tier-0 Group
  # Read Tier-0 Group
  # @param tier_0_id 
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'read_tier0_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for view_tier0_gateway_firewall
  # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
  # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
  # @param tier_0_id 
  # @param [Hash] opts the optional parameters
  # @return [GatewayPolicyListResult]
  describe 'view_tier0_gateway_firewall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for view_tier0_locale_services_gateway_firewall
  # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
  # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
  # @param tier_0_id 
  # @param locale_services_id 
  # @param [Hash] opts the optional parameters
  # @return [GatewayPolicyListResult]
  describe 'view_tier0_locale_services_gateway_firewall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for view_tier1_gateway_firewall
  # Get list of gateway policies with rules that belong to the specific Tier-1. 
  # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
  # @param tier_1_id 
  # @param [Hash] opts the optional parameters
  # @return [GatewayPolicyListResult]
  describe 'view_tier1_gateway_firewall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for view_tier1_locale_services_gateway_firewall
  # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
  # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
  # @param tier_1_id 
  # @param locale_services_id 
  # @param [Hash] opts the optional parameters
  # @return [GatewayPolicyListResult]
  describe 'view_tier1_locale_services_gateway_firewall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
