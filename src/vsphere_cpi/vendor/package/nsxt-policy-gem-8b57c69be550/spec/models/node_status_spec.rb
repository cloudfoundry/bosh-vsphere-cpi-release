=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for SwaggerClient::NodeStatus
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'NodeStatus' do
  before do
    # run before each test
    @instance = SwaggerClient::NodeStatus.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NodeStatus' do
    it 'should create an instance of NodeStatus' do
      expect(@instance).to be_instance_of(SwaggerClient::NodeStatus)
    end
  end
  describe 'test attribute "mpa_connectivity_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["UP", "DOWN", "UNKNOWN"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.mpa_connectivity_status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lcp_connectivity_status_details"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "mpa_connectivity_status_details"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "external_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "software_version"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "maintenance_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["OFF", "ENTERING", "ON", "EXITING"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.maintenance_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "inventory_sync_paused"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "system_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "inventory_sync_reenable_time"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "lcp_connectivity_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["UP", "DOWN", "DEGRADED", "UNKNOWN"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.lcp_connectivity_status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "last_heartbeat_timestamp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "last_sync_time"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "host_node_deployment_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NOT_PREPARED", "INSTALL_IN_PROGRESS", "INSTALL_FAILED", "INSTALL_SUCCESSFUL", "UNINSTALL_IN_PROGRESS", "UNINSTALL_FAILED", "UNINSTALL_SUCCESSFUL", "UNINSTALL_SCHEDULED", "UPGRADE_IN_PROGRESS", "UPGRADE_FAILED", "PENDING_UPGRADE", "NOT_AVAILABLE", "VM_DEPLOYMENT_QUEUED", "VM_DEPLOYMENT_IN_PROGRESS", "VM_DEPLOYMENT_FAILED", "VM_POWER_ON_IN_PROGRESS", "VM_POWER_ON_FAILED", "REGISTRATION_PENDING", "NODE_NOT_READY", "NODE_READY", "VM_POWER_OFF_IN_PROGRESS", "VM_POWER_OFF_FAILED", "VM_UNDEPLOY_IN_PROGRESS", "VM_UNDEPLOY_FAILED", "VM_UNDEPLOY_SUCCESSFUL", "EDGE_CONFIG_ERROR", "VM_DEPLOYMENT_RESTARTED", "REGISTRATION_FAILED", "HOST_DISCONNECTED", "POWERED_OFF", "TRANSPORT_NODE_SYNC_PENDING", "TRANSPORT_NODE_CONFIGURATION_MISSING", "EDGE_HARDWARE_NOT_SUPPORTED", "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED", "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER", "TZ_ENDPOINTS_NOT_SPECIFIED", "NO_PNIC_PREPARED_IN_EDGE", "APPLIANCE_INTERNAL_ERROR", "VTEP_DHCP_NOT_SUPPORTED", "UNSUPPORTED_HOST_SWITCH_PROFILE", "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED", "HOSTSWITCH_PROFILE_NOT_FOUND", "LLDP_SEND_ENABLED_NOT_SUPPORTED", "UNSUPPORTED_NAMED_TEAMING_POLICY", "MULTIPLE_UPLINKS_IN_NAMED_TEAMING_NOT_SUPPORTED_IF_UPLINK_IN_DEFAULT_TEAMING", "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM", "LACP_NOT_SUPPORTED_FOR_EDGE_VM", "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM", "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE", "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE", "EDGE_NODE_VERSION_NOT_SUPPORTED", "NO_PNIC_SPECIFIED_IN_TN", "INVALID_PNIC_DEVICE_NAME", "TRANSPORT_NODE_READY"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.host_node_deployment_status = value }.not_to raise_error
      # end
    end
  end

end
