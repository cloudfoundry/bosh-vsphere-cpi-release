=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  class IPMirrorDestination
    # Resource types of mirror destination
    attr_accessor :resource_type

    # The destination IPs of the mirror packet will be sent to.
    attr_accessor :destination_ips

    # You can choose GRE, ERSPAN II or ERSPAN III.
    attr_accessor :encapsulation_type

    # Used by physical switch for the mirror traffic forwarding. Must be provided and only effective when encapsulation type is ERSPAN type II or type III. 
    attr_accessor :erspan_id

    # User-configurable 32-bit key only for GRE
    attr_accessor :gre_key

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'resource_type' => :'resource_type',
        :'destination_ips' => :'destination_ips',
        :'encapsulation_type' => :'encapsulation_type',
        :'erspan_id' => :'erspan_id',
        :'gre_key' => :'gre_key'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'resource_type' => :'String',
        :'destination_ips' => :'Array<String>',
        :'encapsulation_type' => :'String',
        :'erspan_id' => :'Integer',
        :'gre_key' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'destination_ips')
        if (value = attributes[:'destination_ips']).is_a?(Array)
          self.destination_ips = value
        end
      end

      if attributes.has_key?(:'encapsulation_type')
        self.encapsulation_type = attributes[:'encapsulation_type']
      else
        self.encapsulation_type = 'GRE'
      end

      if attributes.has_key?(:'erspan_id')
        self.erspan_id = attributes[:'erspan_id']
      end

      if attributes.has_key?(:'gre_key')
        self.gre_key = attributes[:'gre_key']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if @destination_ips.nil?
        invalid_properties.push('invalid value for "destination_ips", destination_ips cannot be nil.')
      end

      if @encapsulation_type.nil?
        invalid_properties.push('invalid value for "encapsulation_type", encapsulation_type cannot be nil.')
      end

      if !@erspan_id.nil? && @erspan_id > 1023
        invalid_properties.push('invalid value for "erspan_id", must be smaller than or equal to 1023.')
      end

      if !@erspan_id.nil? && @erspan_id < 0
        invalid_properties.push('invalid value for "erspan_id", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['LogicalPortMirrorDestination', 'PnicMirrorDestination', 'IPMirrorDestination'])
      return false unless resource_type_validator.valid?(@resource_type)
      return false if @destination_ips.nil?
      return false if @encapsulation_type.nil?
      encapsulation_type_validator = EnumAttributeValidator.new('String', ['GRE', 'ERSPAN_TWO', 'ERSPAN_THREE'])
      return false unless encapsulation_type_validator.valid?(@encapsulation_type)
      return false if !@erspan_id.nil? && @erspan_id > 1023
      return false if !@erspan_id.nil? && @erspan_id < 0
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['LogicalPortMirrorDestination', 'PnicMirrorDestination', 'IPMirrorDestination'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encapsulation_type Object to be assigned
    def encapsulation_type=(encapsulation_type)
      validator = EnumAttributeValidator.new('String', ['GRE', 'ERSPAN_TWO', 'ERSPAN_THREE'])
      unless validator.valid?(encapsulation_type)
        fail ArgumentError, 'invalid value for "encapsulation_type", must be one of #{validator.allowable_values}.'
      end
      @encapsulation_type = encapsulation_type
    end

    # Custom attribute writer method with validation
    # @param [Object] erspan_id Value to be assigned
    def erspan_id=(erspan_id)
      if !erspan_id.nil? && erspan_id > 1023
        fail ArgumentError, 'invalid value for "erspan_id", must be smaller than or equal to 1023.'
      end

      if !erspan_id.nil? && erspan_id < 0
        fail ArgumentError, 'invalid value for "erspan_id", must be greater than or equal to 0.'
      end

      @erspan_id = erspan_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resource_type == o.resource_type &&
          destination_ips == o.destination_ips &&
          encapsulation_type == o.encapsulation_type &&
          erspan_id == o.erspan_id &&
          gre_key == o.gre_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_type, destination_ips, encapsulation_type, erspan_id, gre_key].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # If value has resource_type - use it to deserialize
        unless value[:resource_type].nil?
          type = value[:resource_type].to_sym
        end
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
