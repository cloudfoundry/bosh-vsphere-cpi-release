=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  # Enables traffic limit for incoming/outgoing broadcast and multicast packets. Use 0 to disable rate limiting for a specific traffic type
  class RateLimits
    # Incoming multicast traffic limit in packets per second
    attr_accessor :rx_multicast

    # Outgoing multicast traffic limit in packets per second
    attr_accessor :tx_multicast

    # Whether rate limiting is enabled
    attr_accessor :enabled

    # Outgoing broadcast traffic limit in packets per second
    attr_accessor :tx_broadcast

    # Incoming broadcast traffic limit in packets per second
    attr_accessor :rx_broadcast

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rx_multicast' => :'rx_multicast',
        :'tx_multicast' => :'tx_multicast',
        :'enabled' => :'enabled',
        :'tx_broadcast' => :'tx_broadcast',
        :'rx_broadcast' => :'rx_broadcast'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rx_multicast' => :'Integer',
        :'tx_multicast' => :'Integer',
        :'enabled' => :'BOOLEAN',
        :'tx_broadcast' => :'Integer',
        :'rx_broadcast' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'rx_multicast')
        self.rx_multicast = attributes[:'rx_multicast']
      else
        self.rx_multicast = 0
      end

      if attributes.has_key?(:'tx_multicast')
        self.tx_multicast = attributes[:'tx_multicast']
      else
        self.tx_multicast = 0
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = false
      end

      if attributes.has_key?(:'tx_broadcast')
        self.tx_broadcast = attributes[:'tx_broadcast']
      else
        self.tx_broadcast = 0
      end

      if attributes.has_key?(:'rx_broadcast')
        self.rx_broadcast = attributes[:'rx_broadcast']
      else
        self.rx_broadcast = 0
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@rx_multicast.nil? && @rx_multicast < 0
        invalid_properties.push('invalid value for "rx_multicast", must be greater than or equal to 0.')
      end

      if !@tx_multicast.nil? && @tx_multicast < 0
        invalid_properties.push('invalid value for "tx_multicast", must be greater than or equal to 0.')
      end

      if !@tx_broadcast.nil? && @tx_broadcast < 0
        invalid_properties.push('invalid value for "tx_broadcast", must be greater than or equal to 0.')
      end

      if !@rx_broadcast.nil? && @rx_broadcast < 0
        invalid_properties.push('invalid value for "rx_broadcast", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@rx_multicast.nil? && @rx_multicast < 0
      return false if !@tx_multicast.nil? && @tx_multicast < 0
      return false if !@tx_broadcast.nil? && @tx_broadcast < 0
      return false if !@rx_broadcast.nil? && @rx_broadcast < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] rx_multicast Value to be assigned
    def rx_multicast=(rx_multicast)
      if !rx_multicast.nil? && rx_multicast < 0
        fail ArgumentError, 'invalid value for "rx_multicast", must be greater than or equal to 0.'
      end

      @rx_multicast = rx_multicast
    end

    # Custom attribute writer method with validation
    # @param [Object] tx_multicast Value to be assigned
    def tx_multicast=(tx_multicast)
      if !tx_multicast.nil? && tx_multicast < 0
        fail ArgumentError, 'invalid value for "tx_multicast", must be greater than or equal to 0.'
      end

      @tx_multicast = tx_multicast
    end

    # Custom attribute writer method with validation
    # @param [Object] tx_broadcast Value to be assigned
    def tx_broadcast=(tx_broadcast)
      if !tx_broadcast.nil? && tx_broadcast < 0
        fail ArgumentError, 'invalid value for "tx_broadcast", must be greater than or equal to 0.'
      end

      @tx_broadcast = tx_broadcast
    end

    # Custom attribute writer method with validation
    # @param [Object] rx_broadcast Value to be assigned
    def rx_broadcast=(rx_broadcast)
      if !rx_broadcast.nil? && rx_broadcast < 0
        fail ArgumentError, 'invalid value for "rx_broadcast", must be greater than or equal to 0.'
      end

      @rx_broadcast = rx_broadcast
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rx_multicast == o.rx_multicast &&
          tx_multicast == o.tx_multicast &&
          enabled == o.enabled &&
          tx_broadcast == o.tx_broadcast &&
          rx_broadcast == o.rx_broadcast
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rx_multicast, tx_multicast, enabled, tx_broadcast, rx_broadcast].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # If value has resource_type - use it to deserialize
        unless value[:resource_type].nil?
          type = value[:resource_type].to_sym
        end
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
