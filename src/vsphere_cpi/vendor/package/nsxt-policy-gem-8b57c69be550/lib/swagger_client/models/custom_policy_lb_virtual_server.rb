=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  # Virtual server acts as a facade to an application, receives all client connections over a specified protocol and distributes them among the backend servers.  This custom type allows for more complex settings than the simplified PolicyLbVirtualServer types.  This object allows for complex configurations for PolicyLbVirtualServers of all types. All HTTP specific inputs will be rejected when combined with TPC or UDP protocols. 
  class CustomPolicyLbVirtualServer
    # Link to this resource
    attr_accessor :_self

    # The server will populate this field when returing the resource. Ignored on PUT and POST.
    attr_accessor :_links

    # Schema for this resource
    attr_accessor :_schema

    # The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
    attr_accessor :_revision

    # Indicates system owned resource
    attr_accessor :_system_owned

    # Defaults to ID if not set
    attr_accessor :display_name

    # Description of this resource
    attr_accessor :description

    # Opaque identifiers meaningful to the API user
    attr_accessor :tags

    # ID of the user who created this resource
    attr_accessor :_create_user

    # Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
    attr_accessor :_protection

    # Timestamp of resource creation
    attr_accessor :_create_time

    # Timestamp of last modification
    attr_accessor :_last_modified_time

    # ID of the user who last modified this resource
    attr_accessor :_last_modified_user

    # Unique identifier of this resource
    attr_accessor :id

    attr_accessor :resource_type

    # Absolute path of this object
    attr_accessor :path

    # Path of its parent
    attr_accessor :parent_path

    # Path relative from its parent
    attr_accessor :relative_path

    # subtree for this type within policy tree containing nested elements. 
    attr_accessor :children

    # Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects. 
    attr_accessor :marked_for_delete

    # If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled. 
    attr_accessor :access_log_enabled

    # Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network. 
    attr_accessor :router_path

    # Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default. 
    attr_accessor :lb_persistence_profile

    attr_accessor :traffic_source

    # Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. 
    attr_accessor :ip_address

    # Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. 
    attr_accessor :ports

    # Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address. 
    attr_accessor :insert_client_ip_header

    # The setting is used when load balancer acts as an SSL server and terminating the client SSL connection.  A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension. 
    attr_accessor :default_client_ssl_certificate_id

    # As the custom type allows for more complex settings than the simplified PolicyLbVirtualServer types, also specify the desired protocol for receiving all client connections. 
    attr_accessor :app_protocol

    # Security settings representing various security settings when the VirtualServer acts as an SSL server - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317 
    attr_accessor :client_ssl_settings

    # To support client authentication (load balancer acting as a client authenticating to the backend server), server_ssl_certificate_id can be specified.  When supplied, the backend server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified. This setting is only applicable for L7 protocols and will be rejected in combination with TCP or UDP. 
    attr_accessor :server_auth_ca_certificate_ids

    # Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server. The setting is used when load balancer acts as an SSL server and terminating the client SSL connection 
    attr_accessor :client_ssl_certificate_ids

    # Indicates whether to enable server side SSL.  Server side SSL will be enabled when a specific security setting is selected. The selected security setting or profile represents various configurations related to SSL when the VirtualServer acts as a client connecting over SSL to the backend server.  This setting is only applicable for L7 protocols and will be rejected in combination with TCP or UDP. - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317 - DISABLED 
    attr_accessor :server_ssl_settings

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_self' => :'_self',
        :'_links' => :'_links',
        :'_schema' => :'_schema',
        :'_revision' => :'_revision',
        :'_system_owned' => :'_system_owned',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'tags' => :'tags',
        :'_create_user' => :'_create_user',
        :'_protection' => :'_protection',
        :'_create_time' => :'_create_time',
        :'_last_modified_time' => :'_last_modified_time',
        :'_last_modified_user' => :'_last_modified_user',
        :'id' => :'id',
        :'resource_type' => :'resource_type',
        :'path' => :'path',
        :'parent_path' => :'parent_path',
        :'relative_path' => :'relative_path',
        :'children' => :'children',
        :'marked_for_delete' => :'marked_for_delete',
        :'access_log_enabled' => :'access_log_enabled',
        :'router_path' => :'router_path',
        :'lb_persistence_profile' => :'lb_persistence_profile',
        :'traffic_source' => :'traffic_source',
        :'ip_address' => :'ip_address',
        :'ports' => :'ports',
        :'insert_client_ip_header' => :'insert_client_ip_header',
        :'default_client_ssl_certificate_id' => :'default_client_ssl_certificate_id',
        :'app_protocol' => :'app_protocol',
        :'client_ssl_settings' => :'client_ssl_settings',
        :'server_auth_ca_certificate_ids' => :'server_auth_ca_certificate_ids',
        :'client_ssl_certificate_ids' => :'client_ssl_certificate_ids',
        :'server_ssl_settings' => :'server_ssl_settings'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_self' => :'SelfResourceLink',
        :'_links' => :'Array<ResourceLink>',
        :'_schema' => :'String',
        :'_revision' => :'Integer',
        :'_system_owned' => :'BOOLEAN',
        :'display_name' => :'String',
        :'description' => :'String',
        :'tags' => :'Array<Tag>',
        :'_create_user' => :'String',
        :'_protection' => :'String',
        :'_create_time' => :'Integer',
        :'_last_modified_time' => :'Integer',
        :'_last_modified_user' => :'String',
        :'id' => :'String',
        :'resource_type' => :'String',
        :'path' => :'String',
        :'parent_path' => :'String',
        :'relative_path' => :'String',
        :'children' => :'Array<ChildPolicyConfigResource>',
        :'marked_for_delete' => :'BOOLEAN',
        :'access_log_enabled' => :'BOOLEAN',
        :'router_path' => :'String',
        :'lb_persistence_profile' => :'String',
        :'traffic_source' => :'String',
        :'ip_address' => :'String',
        :'ports' => :'Array<String>',
        :'insert_client_ip_header' => :'BOOLEAN',
        :'default_client_ssl_certificate_id' => :'String',
        :'app_protocol' => :'String',
        :'client_ssl_settings' => :'String',
        :'server_auth_ca_certificate_ids' => :'Array<String>',
        :'client_ssl_certificate_ids' => :'Array<String>',
        :'server_ssl_settings' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.has_key?(:'_links')
        if (value = attributes[:'_links']).is_a?(Array)
          self._links = value
        end
      end

      if attributes.has_key?(:'_schema')
        self._schema = attributes[:'_schema']
      end

      if attributes.has_key?(:'_revision')
        self._revision = attributes[:'_revision']
      end

      if attributes.has_key?(:'_system_owned')
        self._system_owned = attributes[:'_system_owned']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'_create_user')
        self._create_user = attributes[:'_create_user']
      end

      if attributes.has_key?(:'_protection')
        self._protection = attributes[:'_protection']
      end

      if attributes.has_key?(:'_create_time')
        self._create_time = attributes[:'_create_time']
      end

      if attributes.has_key?(:'_last_modified_time')
        self._last_modified_time = attributes[:'_last_modified_time']
      end

      if attributes.has_key?(:'_last_modified_user')
        self._last_modified_user = attributes[:'_last_modified_user']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'parent_path')
        self.parent_path = attributes[:'parent_path']
      end

      if attributes.has_key?(:'relative_path')
        self.relative_path = attributes[:'relative_path']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'marked_for_delete')
        self.marked_for_delete = attributes[:'marked_for_delete']
      else
        self.marked_for_delete = false
      end

      if attributes.has_key?(:'access_log_enabled')
        self.access_log_enabled = attributes[:'access_log_enabled']
      else
        self.access_log_enabled = false
      end

      if attributes.has_key?(:'router_path')
        self.router_path = attributes[:'router_path']
      end

      if attributes.has_key?(:'lb_persistence_profile')
        self.lb_persistence_profile = attributes[:'lb_persistence_profile']
      end

      if attributes.has_key?(:'traffic_source')
        self.traffic_source = attributes[:'traffic_source']
      end

      if attributes.has_key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.has_key?(:'ports')
        if (value = attributes[:'ports']).is_a?(Array)
          self.ports = value
        end
      end

      if attributes.has_key?(:'insert_client_ip_header')
        self.insert_client_ip_header = attributes[:'insert_client_ip_header']
      else
        self.insert_client_ip_header = false
      end

      if attributes.has_key?(:'default_client_ssl_certificate_id')
        self.default_client_ssl_certificate_id = attributes[:'default_client_ssl_certificate_id']
      end

      if attributes.has_key?(:'app_protocol')
        self.app_protocol = attributes[:'app_protocol']
      end

      if attributes.has_key?(:'client_ssl_settings')
        self.client_ssl_settings = attributes[:'client_ssl_settings']
      else
        self.client_ssl_settings = 'HIGH_SECURE_111317'
      end

      if attributes.has_key?(:'server_auth_ca_certificate_ids')
        if (value = attributes[:'server_auth_ca_certificate_ids']).is_a?(Array)
          self.server_auth_ca_certificate_ids = value
        end
      end

      if attributes.has_key?(:'client_ssl_certificate_ids')
        if (value = attributes[:'client_ssl_certificate_ids']).is_a?(Array)
          self.client_ssl_certificate_ids = value
        end
      end

      if attributes.has_key?(:'server_ssl_settings')
        self.server_ssl_settings = attributes[:'server_ssl_settings']
      else
        self.server_ssl_settings = 'DISABLED'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      if !@description.nil? && @description.to_s.length > 1024
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1024.')
      end

      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      if @router_path.nil?
        invalid_properties.push('invalid value for "router_path", router_path cannot be nil.')
      end

      if @ip_address.nil?
        invalid_properties.push('invalid value for "ip_address", ip_address cannot be nil.')
      end

      if @ports.nil?
        invalid_properties.push('invalid value for "ports", ports cannot be nil.')
      end

      if @app_protocol.nil?
        invalid_properties.push('invalid value for "app_protocol", app_protocol cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@description.nil? && @description.to_s.length > 1024
      return false if @resource_type.nil?
      resource_type_validator = EnumAttributeValidator.new('String', ['TcpPolicyLbVirtualServer', 'UdpPolicyLbVirtualServer', 'HttpPolicyLbVirtualServer', 'HttpsPolicyLbVirtualServer', 'CustomPolicyLbVirtualServer'])
      return false unless resource_type_validator.valid?(@resource_type)
      return false if @router_path.nil?
      return false if @ip_address.nil?
      return false if @ports.nil?
      return false if @app_protocol.nil?
      app_protocol_validator = EnumAttributeValidator.new('String', ['TCP', 'UDP', 'HTTP', 'HTTPS'])
      return false unless app_protocol_validator.valid?(@app_protocol)
      client_ssl_settings_validator = EnumAttributeValidator.new('String', ['BASE_SECURE_111317', 'MODERATE_SECURE_111317', 'HIGH_SECURE_111317'])
      return false unless client_ssl_settings_validator.valid?(@client_ssl_settings)
      server_ssl_settings_validator = EnumAttributeValidator.new('String', ['BASE_SECURE_111317', 'MODERATE_SECURE_111317', 'HIGH_SECURE_111317', 'DISABLED'])
      return false unless server_ssl_settings_validator.valid?(@server_ssl_settings)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 1024
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1024.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ['TcpPolicyLbVirtualServer', 'UdpPolicyLbVirtualServer', 'HttpPolicyLbVirtualServer', 'HttpsPolicyLbVirtualServer', 'CustomPolicyLbVirtualServer'])
      unless validator.valid?(resource_type)
        fail ArgumentError, 'invalid value for "resource_type", must be one of #{validator.allowable_values}.'
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] app_protocol Object to be assigned
    def app_protocol=(app_protocol)
      validator = EnumAttributeValidator.new('String', ['TCP', 'UDP', 'HTTP', 'HTTPS'])
      unless validator.valid?(app_protocol)
        fail ArgumentError, 'invalid value for "app_protocol", must be one of #{validator.allowable_values}.'
      end
      @app_protocol = app_protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_ssl_settings Object to be assigned
    def client_ssl_settings=(client_ssl_settings)
      validator = EnumAttributeValidator.new('String', ['BASE_SECURE_111317', 'MODERATE_SECURE_111317', 'HIGH_SECURE_111317'])
      unless validator.valid?(client_ssl_settings)
        fail ArgumentError, 'invalid value for "client_ssl_settings", must be one of #{validator.allowable_values}.'
      end
      @client_ssl_settings = client_ssl_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] server_ssl_settings Object to be assigned
    def server_ssl_settings=(server_ssl_settings)
      validator = EnumAttributeValidator.new('String', ['BASE_SECURE_111317', 'MODERATE_SECURE_111317', 'HIGH_SECURE_111317', 'DISABLED'])
      unless validator.valid?(server_ssl_settings)
        fail ArgumentError, 'invalid value for "server_ssl_settings", must be one of #{validator.allowable_values}.'
      end
      @server_ssl_settings = server_ssl_settings
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _self == o._self &&
          _links == o._links &&
          _schema == o._schema &&
          _revision == o._revision &&
          _system_owned == o._system_owned &&
          display_name == o.display_name &&
          description == o.description &&
          tags == o.tags &&
          _create_user == o._create_user &&
          _protection == o._protection &&
          _create_time == o._create_time &&
          _last_modified_time == o._last_modified_time &&
          _last_modified_user == o._last_modified_user &&
          id == o.id &&
          resource_type == o.resource_type &&
          path == o.path &&
          parent_path == o.parent_path &&
          relative_path == o.relative_path &&
          children == o.children &&
          marked_for_delete == o.marked_for_delete &&
          access_log_enabled == o.access_log_enabled &&
          router_path == o.router_path &&
          lb_persistence_profile == o.lb_persistence_profile &&
          traffic_source == o.traffic_source &&
          ip_address == o.ip_address &&
          ports == o.ports &&
          insert_client_ip_header == o.insert_client_ip_header &&
          default_client_ssl_certificate_id == o.default_client_ssl_certificate_id &&
          app_protocol == o.app_protocol &&
          client_ssl_settings == o.client_ssl_settings &&
          server_auth_ca_certificate_ids == o.server_auth_ca_certificate_ids &&
          client_ssl_certificate_ids == o.client_ssl_certificate_ids &&
          server_ssl_settings == o.server_ssl_settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_self, _links, _schema, _revision, _system_owned, display_name, description, tags, _create_user, _protection, _create_time, _last_modified_time, _last_modified_user, id, resource_type, path, parent_path, relative_path, children, marked_for_delete, access_log_enabled, router_path, lb_persistence_profile, traffic_source, ip_address, ports, insert_client_ip_header, default_client_ssl_certificate_id, app_protocol, client_ssl_settings, server_auth_ca_certificate_ids, client_ssl_certificate_ids, server_ssl_settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # If value has resource_type - use it to deserialize
        unless value[:resource_type].nil?
          type = value[:resource_type].to_sym
        end
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
