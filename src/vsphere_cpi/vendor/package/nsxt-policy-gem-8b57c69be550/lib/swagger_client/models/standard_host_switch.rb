=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  # Standard host switch specification
  class StandardHostSwitch
    # By default a host-switch is ready for network traffic once it is created, but it can be set as not ready in some special cases like NSXV-to-NSXT migration.
    attr_accessor :not_ready

    # The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.
    attr_accessor :vmk_install_migration

    # IPs can come from either a static IP pool or an explicitly specified IP list or DHCP. In case a list of IP is specified, the number of IPs provided should be sufficient as per teaming policy associated with host switch uplink profile.
    attr_accessor :ip_assignment_spec

    # CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.
    attr_accessor :cpu_config

    # If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.
    attr_accessor :is_migrate_pnics

    # The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.
    attr_accessor :vmk_uninstall_migration

    # Physical NICs connected to the host switch
    attr_accessor :pnics

    # If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.
    attr_accessor :host_switch_name

    # The pnics to be migrated out to a non N-VDS switch during transport node deletion.
    attr_accessor :pnics_uninstall_migration

    # host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.
    attr_accessor :host_switch_profile_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'not_ready' => :'not_ready',
        :'vmk_install_migration' => :'vmk_install_migration',
        :'ip_assignment_spec' => :'ip_assignment_spec',
        :'cpu_config' => :'cpu_config',
        :'is_migrate_pnics' => :'is_migrate_pnics',
        :'vmk_uninstall_migration' => :'vmk_uninstall_migration',
        :'pnics' => :'pnics',
        :'host_switch_name' => :'host_switch_name',
        :'pnics_uninstall_migration' => :'pnics_uninstall_migration',
        :'host_switch_profile_ids' => :'host_switch_profile_ids'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'not_ready' => :'BOOLEAN',
        :'vmk_install_migration' => :'Array<VmknicNetwork>',
        :'ip_assignment_spec' => :'IpAssignmentSpec',
        :'cpu_config' => :'Array<CpuCoreConfigForEnhancedNetworkingStackSwitch>',
        :'is_migrate_pnics' => :'BOOLEAN',
        :'vmk_uninstall_migration' => :'Array<VmknicNetwork>',
        :'pnics' => :'Array<Pnic>',
        :'host_switch_name' => :'String',
        :'pnics_uninstall_migration' => :'Array<Pnic>',
        :'host_switch_profile_ids' => :'Array<HostSwitchProfileTypeIdEntry>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'not_ready')
        self.not_ready = attributes[:'not_ready']
      else
        self.not_ready = false
      end

      if attributes.has_key?(:'vmk_install_migration')
        if (value = attributes[:'vmk_install_migration']).is_a?(Array)
          self.vmk_install_migration = value
        end
      end

      if attributes.has_key?(:'ip_assignment_spec')
        self.ip_assignment_spec = attributes[:'ip_assignment_spec']
      end

      if attributes.has_key?(:'cpu_config')
        if (value = attributes[:'cpu_config']).is_a?(Array)
          self.cpu_config = value
        end
      end

      if attributes.has_key?(:'is_migrate_pnics')
        self.is_migrate_pnics = attributes[:'is_migrate_pnics']
      else
        self.is_migrate_pnics = false
      end

      if attributes.has_key?(:'vmk_uninstall_migration')
        if (value = attributes[:'vmk_uninstall_migration']).is_a?(Array)
          self.vmk_uninstall_migration = value
        end
      end

      if attributes.has_key?(:'pnics')
        if (value = attributes[:'pnics']).is_a?(Array)
          self.pnics = value
        end
      end

      if attributes.has_key?(:'host_switch_name')
        self.host_switch_name = attributes[:'host_switch_name']
      else
        self.host_switch_name = 'nsxDefaultHostSwitch'
      end

      if attributes.has_key?(:'pnics_uninstall_migration')
        if (value = attributes[:'pnics_uninstall_migration']).is_a?(Array)
          self.pnics_uninstall_migration = value
        end
      end

      if attributes.has_key?(:'host_switch_profile_ids')
        if (value = attributes[:'host_switch_profile_ids']).is_a?(Array)
          self.host_switch_profile_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          not_ready == o.not_ready &&
          vmk_install_migration == o.vmk_install_migration &&
          ip_assignment_spec == o.ip_assignment_spec &&
          cpu_config == o.cpu_config &&
          is_migrate_pnics == o.is_migrate_pnics &&
          vmk_uninstall_migration == o.vmk_uninstall_migration &&
          pnics == o.pnics &&
          host_switch_name == o.host_switch_name &&
          pnics_uninstall_migration == o.pnics_uninstall_migration &&
          host_switch_profile_ids == o.host_switch_profile_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [not_ready, vmk_install_migration, ip_assignment_spec, cpu_config, is_migrate_pnics, vmk_uninstall_migration, pnics, host_switch_name, pnics_uninstall_migration, host_switch_profile_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # If value has resource_type - use it to deserialize
        unless value[:resource_type].nil?
          type = value[:resource_type].to_sym
        end
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
