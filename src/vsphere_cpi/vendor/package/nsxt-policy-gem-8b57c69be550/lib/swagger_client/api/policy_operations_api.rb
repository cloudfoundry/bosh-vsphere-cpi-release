=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyOperationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector port. 
    # @param ipfix_collector_profile_id IPFIX collector profile id
    # @param ipfix_collector_profile 
    # @param [Hash] opts the optional parameters
    # @return [IPFIXCollectorProfile]
    def create_or_replace_ipfix_collector_profile(ipfix_collector_profile_id, ipfix_collector_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, ipfix_collector_profile, opts)
      data
    end

    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector port. 
    # @param ipfix_collector_profile_id IPFIX collector profile id
    # @param ipfix_collector_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXCollectorProfile, Fixnum, Hash)>] IPFIXCollectorProfile data, response status code and response headers
    def create_or_replace_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, ipfix_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.create_or_replace_ipfix_collector_profile ...'
      end
      # verify the required parameter 'ipfix_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_collector_profile_id' when calling PolicyOperationsApi.create_or_replace_ipfix_collector_profile"
      end
      # verify the required parameter 'ipfix_collector_profile' is set
      if @api_client.config.client_side_validation && ipfix_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_collector_profile' when calling PolicyOperationsApi.create_or_replace_ipfix_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}'.sub('{' + 'ipfix-collector-profile-id' + '}', ipfix_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfix_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXCollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#create_or_replace_ipfix_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX switch collection instance
    # Create or replace IPFIX switch collection instance. Instance will start forwarding data to provided IPFIX collector. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [IPFIXSwitchCollectionInstance]
    def create_or_replace_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      data, _status_code, _headers = create_or_replace_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts)
      data
    end

    # Create or Replace IPFIX switch collection instance
    # Create or replace IPFIX switch collection instance. Instance will start forwarding data to provided IPFIX collector. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXSwitchCollectionInstance, Fixnum, Hash)>] IPFIXSwitchCollectionInstance data, response status code and response headers
    def create_or_replace_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.create_or_replace_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsApi.create_or_replace_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsApi.create_or_replace_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance' when calling PolicyOperationsApi.create_or_replace_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfix_switch_collection_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#create_or_replace_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def create_or_replace_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      data
    end

    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def create_or_replace_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.create_or_replace_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling PolicyOperationsApi.create_or_replace_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#create_or_replace_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ipfix_collector_profile(ipfix_collector_profile_id, opts = {})
      delete_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, opts)
      nil
    end

    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.delete_ipfix_collector_profile ...'
      end
      # verify the required parameter 'ipfix_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_collector_profile_id' when calling PolicyOperationsApi.delete_ipfix_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}'.sub('{' + 'ipfix-collector-profile-id' + '}', ipfix_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#delete_ipfix_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Switch Collection Instance
    # API deletes IPFIX Switch Collection Instance.Flow forwarding to selected collector will be stopped. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      delete_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts)
      nil
    end

    # Delete IPFIX Switch Collection Instance
    # API deletes IPFIX Switch Collection Instance.Flow forwarding to selected collector will be stopped. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.delete_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsApi.delete_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsApi.delete_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#delete_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, opts = {})
      delete_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      nil
    end

    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.delete_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsApi.delete_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsApi.delete_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsApi.delete_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#delete_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXCollectorProfileListResult]
    def list_ipfix_collector_profiles(opts = {})
      data, _status_code, _headers = list_ipfix_collector_profiles_with_http_info(opts)
      data
    end

    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXCollectorProfileListResult, Fixnum, Hash)>] IPFIXCollectorProfileListResult data, response status code and response headers
    def list_ipfix_collector_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.list_ipfix_collector_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_ipfix_collector_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_ipfix_collector_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-collector-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXCollectorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#list_ipfix_collector_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Switch Collection Instances
    # API provides list IPFIX Switch collection instances available on selected logical switch. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXSwitchCollectionInstanceListResult]
    def list_ipfix_switch_collection_instances(tier_1_id, opts = {})
      data, _status_code, _headers = list_ipfix_switch_collection_instances_with_http_info(tier_1_id, opts)
      data
    end

    # List IPFIX Switch Collection Instances
    # API provides list IPFIX Switch collection instances available on selected logical switch. 
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXSwitchCollectionInstanceListResult, Fixnum, Hash)>] IPFIXSwitchCollectionInstanceListResult data, response status code and response headers
    def list_ipfix_switch_collection_instances_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.list_ipfix_switch_collection_instances ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsApi.list_ipfix_switch_collection_instances"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_ipfix_switch_collection_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_ipfix_switch_collection_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#list_ipfix_switch_collection_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringInstanceListResult]
    def list_port_mirroring_instances(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_port_mirroring_instances_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringInstanceListResult, Fixnum, Hash)>] PortMirroringInstanceListResult data, response status code and response headers
    def list_port_mirroring_instances_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.list_port_mirroring_instances ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsApi.list_port_mirroring_instances"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsApi.list_port_mirroring_instances"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_port_mirroring_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_port_mirroring_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#list_port_mirroring_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # For each type of entity what are the attributes owned by policy.
    # This API provides field names of attributes in NSX types that are owned by Policy, as opposed to those owned by the enforcement point. For any type on NSX, some of the attributes of that type may be owned and set by Policy when realizing the intent, while some others may be owned and set by the enforcement point itself. This information can be used to disable updates to Policy owned attributes by the advanced networking UI, while allowing tweaking to the attributes owned by the management plane. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type query
    # @return [ResourceInfoListResult]
    def list_resource_info(opts = {})
      data, _status_code, _headers = list_resource_info_with_http_info(opts)
      data
    end

    # For each type of entity what are the attributes owned by policy.
    # This API provides field names of attributes in NSX types that are owned by Policy, as opposed to those owned by the enforcement point. For any type on NSX, some of the attributes of that type may be owned and set by Policy when realizing the intent, while some others may be owned and set by the enforcement point itself. This information can be used to disable updates to Policy owned attributes by the advanced networking UI, while allowing tweaking to the attributes owned by the management plane. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type query
    # @return [Array<(ResourceInfoListResult, Fixnum, Hash)>] ResourceInfoListResult data, response status code and response headers
    def list_resource_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.list_resource_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_resource_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyOperationsApi.list_resource_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fine-tuning/resources'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#list_resource_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_collector_profile_id IPFIX collector profile id
    # @param ipfix_collector_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ipfix_collector_profile(ipfix_collector_profile_id, ipfix_collector_profile, opts = {})
      patch_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, ipfix_collector_profile, opts)
      nil
    end

    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_collector_profile_id IPFIX collector profile id
    # @param ipfix_collector_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, ipfix_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.patch_ipfix_collector_profile ...'
      end
      # verify the required parameter 'ipfix_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_collector_profile_id' when calling PolicyOperationsApi.patch_ipfix_collector_profile"
      end
      # verify the required parameter 'ipfix_collector_profile' is set
      if @api_client.config.client_side_validation && ipfix_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_collector_profile' when calling PolicyOperationsApi.patch_ipfix_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}'.sub('{' + 'ipfix-collector-profile-id' + '}', ipfix_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfix_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#patch_ipfix_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX switch collection instance
    # Create a new IPFIX switch collection instance if the IPFIX switch collection instance  with given id does not already exist. If the IPFIX switch collection instance with the given id already exists, patch with the existing IPFIX switch collection instance. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      patch_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts)
      nil
    end

    # Patch IPFIX switch collection instance
    # Create a new IPFIX switch collection instance if the IPFIX switch collection instance  with given id does not already exist. If the IPFIX switch collection instance with the given id already exists, patch with the existing IPFIX switch collection instance. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX Switch Collection Instance ID
    # @param ipfix_switch_collection_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, ipfix_switch_collection_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.patch_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsApi.patch_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsApi.patch_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance' when calling PolicyOperationsApi.patch_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfix_switch_collection_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#patch_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      patch_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      nil
    end

    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.patch_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling PolicyOperationsApi.patch_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#patch_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. If profile does not exist, it will return 404. 
    # @param ipfix_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXCollectorProfile]
    def read_ipfix_collector_profile(ipfix_collector_profile_id, opts = {})
      data, _status_code, _headers = read_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, opts)
      data
    end

    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. If profile does not exist, it will return 404. 
    # @param ipfix_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXCollectorProfile, Fixnum, Hash)>] IPFIXCollectorProfile data, response status code and response headers
    def read_ipfix_collector_profile_with_http_info(ipfix_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.read_ipfix_collector_profile ...'
      end
      # verify the required parameter 'ipfix_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_collector_profile_id' when calling PolicyOperationsApi.read_ipfix_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}'.sub('{' + 'ipfix-collector-profile-id' + '}', ipfix_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXCollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#read_ipfix_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Switch Collection Instance
    # API will return details of IPFIX switch collection. If instance does not exist, it will return 404. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX switch collection id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXSwitchCollectionInstance]
    def read_ipfix_switch_collection_instance(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      data, _status_code, _headers = read_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts)
      data
    end

    # Get IPFIX Switch Collection Instance
    # API will return details of IPFIX switch collection. If instance does not exist, it will return 404. 
    # @param tier_1_id Tier-1 ID
    # @param ipfix_switch_collection_instance_id IPFIX switch collection id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXSwitchCollectionInstance, Fixnum, Hash)>] IPFIXSwitchCollectionInstance data, response status code and response headers
    def read_ipfix_switch_collection_instance_with_http_info(tier_1_id, ipfix_switch_collection_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.read_ipfix_switch_collection_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyOperationsApi.read_ipfix_switch_collection_instance"
      end
      # verify the required parameter 'ipfix_switch_collection_instance_id' is set
      if @api_client.config.client_side_validation && ipfix_switch_collection_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_switch_collection_instance_id' when calling PolicyOperationsApi.read_ipfix_switch_collection_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'ipfix-switch-collection-instance-id' + '}', ipfix_switch_collection_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXSwitchCollectionInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#read_ipfix_switch_collection_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def read_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      data
    end

    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def read_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyOperationsApi.read_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyOperationsApi.read_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyOperationsApi.read_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling PolicyOperationsApi.read_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyOperationsApi#read_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
