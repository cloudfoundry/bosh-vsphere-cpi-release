=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyDiscoveryprofilebindingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Infra Port Discovery Profile Binding Profile
    # API will delete Infra Port Discovery Profile Binding Profile
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_port_discovery_binding(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, opts = {})
      delete_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, opts)
      nil
    end

    # Delete Infra Port Discovery Profile Binding Profile
    # API will delete Infra Port Discovery Profile Binding Profile
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.delete_infra_port_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.delete_infra_port_discovery_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyDiscoveryprofilebindingApi.delete_infra_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.delete_infra_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#delete_infra_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment Discovery Profile Binding Profile
    # API will delete Segment Discovery Profile Binding Profile
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_discovery_binding(infra_segment_id, segment_discovery_profile_binding_map_id, opts = {})
      delete_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment Discovery Profile Binding Profile
    # API will delete Segment Discovery Profile Binding Profile
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.delete_infra_segment_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.delete_infra_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.delete_infra_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#delete_infra_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Discovery Profile Binding Profile
    # API will delete Port Discovery Profile Binding Profile
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_discovery_binding(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, opts = {})
      delete_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, opts)
      nil
    end

    # Delete Port Discovery Profile Binding Profile
    # API will delete Port Discovery Profile Binding Profile
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.delete_port_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.delete_port_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.delete_port_discovery_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyDiscoveryprofilebindingApi.delete_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.delete_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#delete_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment Discovery Profile Binding Profile
    # API will delete Segment Discovery Profile Binding Profile
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_discovery_binding(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, opts = {})
      delete_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment Discovery Profile Binding Profile
    # API will delete Segment Discovery Profile Binding Profile
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.delete_segment_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.delete_segment_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.delete_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.delete_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#delete_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Infra Port Discovery Profile Binding Map
    # API will get Infra Port Discovery Profile Binding Map 
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortDiscoveryProfileBindingMap]
    def get_infra_port_discovery_binding(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, opts)
      data
    end

    # Get Infra Port Discovery Profile Binding Map
    # API will get Infra Port Discovery Profile Binding Map 
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortDiscoveryProfileBindingMap, Fixnum, Hash)>] PortDiscoveryProfileBindingMap data, response status code and response headers
    def get_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.get_infra_port_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.get_infra_port_discovery_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyDiscoveryprofilebindingApi.get_infra_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.get_infra_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#get_infra_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Infra Segment Discovery Profile Binding Map
    # API will get Infra Segment Discovery Profile Binding Map 
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentDiscoveryProfileBindingMap]
    def get_infra_segment_discovery_binding(infra_segment_id, segment_discovery_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, opts)
      data
    end

    # Get Infra Segment Discovery Profile Binding Map
    # API will get Infra Segment Discovery Profile Binding Map 
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentDiscoveryProfileBindingMap, Fixnum, Hash)>] SegmentDiscoveryProfileBindingMap data, response status code and response headers
    def get_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.get_infra_segment_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.get_infra_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.get_infra_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#get_infra_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Port Discovery Profile Binding Map
    # API will get Port Discovery Profile Binding Map 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortDiscoveryProfileBindingMap]
    def get_port_discovery_binding(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, opts)
      data
    end

    # Get Port Discovery Profile Binding Map
    # API will get Port Discovery Profile Binding Map 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortDiscoveryProfileBindingMap, Fixnum, Hash)>] PortDiscoveryProfileBindingMap data, response status code and response headers
    def get_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.get_port_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.get_port_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.get_port_discovery_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyDiscoveryprofilebindingApi.get_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.get_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#get_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Segment Discovery Profile Binding Map
    # API will get Segment Discovery Profile Binding Map 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentDiscoveryProfileBindingMap]
    def get_segment_discovery_binding(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, opts)
      data
    end

    # Get Segment Discovery Profile Binding Map
    # API will get Segment Discovery Profile Binding Map 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentDiscoveryProfileBindingMap, Fixnum, Hash)>] SegmentDiscoveryProfileBindingMap data, response status code and response headers
    def get_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.get_segment_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.get_segment_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.get_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.get_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#get_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Infra Port Discovery Profile Binding Maps
    # API will list all Infra Port Discovery Profile Binding Maps in current port id. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortDiscoveryProfileBindingMapListResult]
    def list_infra_port_discovery_bindings(infra_segment_id, infra_port_id, opts = {})
      data, _status_code, _headers = list_infra_port_discovery_bindings_with_http_info(infra_segment_id, infra_port_id, opts)
      data
    end

    # List Infra Port Discovery Profile Binding Maps
    # API will list all Infra Port Discovery Profile Binding Maps in current port id. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortDiscoveryProfileBindingMapListResult, Fixnum, Hash)>] PortDiscoveryProfileBindingMapListResult data, response status code and response headers
    def list_infra_port_discovery_bindings_with_http_info(infra_segment_id, infra_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.list_infra_port_discovery_bindings ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.list_infra_port_discovery_bindings"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyDiscoveryprofilebindingApi.list_infra_port_discovery_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_infra_port_discovery_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_infra_port_discovery_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortDiscoveryProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#list_infra_port_discovery_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Infra Segment Discovery Profile Binding Maps
    # API will list all Infra Segment Discovery Profile Binding Maps in current segment id. 
    # @param infra_segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentDiscoveryProfileBindingMapListResult]
    def list_infra_segment_discovery_bindings(infra_segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_discovery_bindings_with_http_info(infra_segment_id, opts)
      data
    end

    # List Infra Segment Discovery Profile Binding Maps
    # API will list all Infra Segment Discovery Profile Binding Maps in current segment id. 
    # @param infra_segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentDiscoveryProfileBindingMapListResult, Fixnum, Hash)>] SegmentDiscoveryProfileBindingMapListResult data, response status code and response headers
    def list_infra_segment_discovery_bindings_with_http_info(infra_segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.list_infra_segment_discovery_bindings ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.list_infra_segment_discovery_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_infra_segment_discovery_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_infra_segment_discovery_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentDiscoveryProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#list_infra_segment_discovery_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Discovery Profile Binding Maps
    # API will list all Port Discovery Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortDiscoveryProfileBindingMapListResult]
    def list_port_discovery_bindings(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = list_port_discovery_bindings_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List Port Discovery Profile Binding Maps
    # API will list all Port Discovery Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortDiscoveryProfileBindingMapListResult, Fixnum, Hash)>] PortDiscoveryProfileBindingMapListResult data, response status code and response headers
    def list_port_discovery_bindings_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.list_port_discovery_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.list_port_discovery_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.list_port_discovery_bindings"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyDiscoveryprofilebindingApi.list_port_discovery_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_port_discovery_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_port_discovery_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortDiscoveryProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#list_port_discovery_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Segment Discovery Profile Binding Maps
    # API will list all Segment Discovery Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentDiscoveryProfileBindingMapListResult]
    def list_segment_discovery_bindings(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_discovery_bindings_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Segment Discovery Profile Binding Maps
    # API will list all Segment Discovery Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentDiscoveryProfileBindingMapListResult, Fixnum, Hash)>] SegmentDiscoveryProfileBindingMapListResult data, response status code and response headers
    def list_segment_discovery_bindings_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.list_segment_discovery_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.list_segment_discovery_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.list_segment_discovery_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_segment_discovery_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDiscoveryprofilebindingApi.list_segment_discovery_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentDiscoveryProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#list_segment_discovery_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Infra Port Discovery Profile Binding Map
    # API will create Infra Port Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_port_discovery_binding(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      patch_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts)
      nil
    end

    # Create Infra Port Discovery Profile Binding Map
    # API will create Infra Port Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.patch_infra_port_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.patch_infra_port_discovery_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyDiscoveryprofilebindingApi.patch_infra_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.patch_infra_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.patch_infra_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#patch_infra_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Infra Segment Discovery Profile Binding Map
    # API will create Infra Segment Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_discovery_binding(infra_segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      patch_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts)
      nil
    end

    # Create Infra Segment Discovery Profile Binding Map
    # API will create Infra Segment Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.patch_infra_segment_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.patch_infra_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.patch_infra_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.patch_infra_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#patch_infra_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Port Discovery Profile Binding Map
    # API will create Port Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_discovery_binding(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      patch_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts)
      nil
    end

    # Create Port Discovery Profile Binding Map
    # API will create Port Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.patch_port_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.patch_port_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.patch_port_discovery_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyDiscoveryprofilebindingApi.patch_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.patch_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.patch_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#patch_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Segment Discovery Profile Binding Map
    # API will create Segment Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_discovery_binding(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      patch_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts)
      nil
    end

    # Create Segment Discovery Profile Binding Map
    # API will create Segment Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.patch_segment_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.patch_segment_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.patch_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.patch_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.patch_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#patch_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Infra Port Discovery Profile Binding Map
    # API will update Infra Port Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortDiscoveryProfileBindingMap]
    def update_infra_port_discovery_binding(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts)
      data
    end

    # Update Infra Port Discovery Profile Binding Map
    # API will update Infra Port Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortDiscoveryProfileBindingMap, Fixnum, Hash)>] PortDiscoveryProfileBindingMap data, response status code and response headers
    def update_infra_port_discovery_binding_with_http_info(infra_segment_id, infra_port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.update_infra_port_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.update_infra_port_discovery_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyDiscoveryprofilebindingApi.update_infra_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.update_infra_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.update_infra_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#update_infra_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Infra Segment Discovery Profile Binding Map
    # API will update Infra Segment Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentDiscoveryProfileBindingMap]
    def update_infra_segment_discovery_binding(infra_segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts)
      data
    end

    # Update Infra Segment Discovery Profile Binding Map
    # API will update Infra Segment Discovery Profile Binding Map
    # @param infra_segment_id Infra Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentDiscoveryProfileBindingMap, Fixnum, Hash)>] SegmentDiscoveryProfileBindingMap data, response status code and response headers
    def update_infra_segment_discovery_binding_with_http_info(infra_segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.update_infra_segment_discovery_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyDiscoveryprofilebindingApi.update_infra_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.update_infra_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.update_infra_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#update_infra_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Port Discovery Profile Binding Map
    # API will update Port Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortDiscoveryProfileBindingMap]
    def update_port_discovery_binding(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      data, _status_code, _headers = update_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts)
      data
    end

    # Update Port Discovery Profile Binding Map
    # API will update Port Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_discovery_profile_binding_map_id Port Discovery Profile Binding Map ID
    # @param port_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortDiscoveryProfileBindingMap, Fixnum, Hash)>] PortDiscoveryProfileBindingMap data, response status code and response headers
    def update_port_discovery_binding_with_http_info(tier_1_id, segment_id, port_id, port_discovery_profile_binding_map_id, port_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.update_port_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.update_port_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.update_port_discovery_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyDiscoveryprofilebindingApi.update_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.update_port_discovery_binding"
      end
      # verify the required parameter 'port_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.update_port_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-discovery-profile-binding-map-id' + '}', port_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#update_port_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Segment Discovery Profile Binding Map
    # API will update Segment Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentDiscoveryProfileBindingMap]
    def update_segment_discovery_binding(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      data, _status_code, _headers = update_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts)
      data
    end

    # Update Segment Discovery Profile Binding Map
    # API will update Segment Discovery Profile Binding Map
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_discovery_profile_binding_map_id Segment Discovery Profile Binding Map ID
    # @param segment_discovery_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentDiscoveryProfileBindingMap, Fixnum, Hash)>] SegmentDiscoveryProfileBindingMap data, response status code and response headers
    def update_segment_discovery_binding_with_http_info(tier_1_id, segment_id, segment_discovery_profile_binding_map_id, segment_discovery_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDiscoveryprofilebindingApi.update_segment_discovery_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyDiscoveryprofilebindingApi.update_segment_discovery_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyDiscoveryprofilebindingApi.update_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map_id' when calling PolicyDiscoveryprofilebindingApi.update_segment_discovery_binding"
      end
      # verify the required parameter 'segment_discovery_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_discovery_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_discovery_profile_binding_map' when calling PolicyDiscoveryprofilebindingApi.update_segment_discovery_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-discovery-profile-binding-map-id' + '}', segment_discovery_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_discovery_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentDiscoveryProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDiscoveryprofilebindingApi#update_segment_discovery_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
