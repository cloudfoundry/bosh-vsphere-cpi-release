=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyGatewayFirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def create_or_replace_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling PolicyGatewayFirewallApi.create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Group under specified Tier-0
    # If a Group with the group-id is not already present, create a new Group under the tier-0-id. Update if exists. The API valiates that Tier-0 is present before creating the Group. 
    # @param tier_0_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def create_or_replace_tier0_group(tier_0_id, group_id, group, opts = {})
      data, _status_code, _headers = create_or_replace_tier0_group_with_http_info(tier_0_id, group_id, group, opts)
      data
    end

    # Create or update Group under specified Tier-0
    # If a Group with the group-id is not already present, create a new Group under the tier-0-id. Update if exists. The API valiates that Tier-0 is present before creating the Group. 
    # @param tier_0_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def create_or_replace_tier0_group_with_http_info(tier_0_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.create_or_replace_tier0_group ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.create_or_replace_tier0_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyGatewayFirewallApi.create_or_replace_tier0_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyGatewayFirewallApi.create_or_replace_tier0_group"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/groups/{group-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#create_or_replace_tier0_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_policy(domain_id, gateway_policy_id, opts = {})
      delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.delete_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.delete_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.delete_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyGatewayFirewallApi.delete_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes Group under Tier-0
    # Delete the Group under Tier-0. 
    # @param tier_0_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_group(tier_0_id, group_id, opts = {})
      delete_tier0_group_with_http_info(tier_0_id, group_id, opts)
      nil
    end

    # Deletes Group under Tier-0
    # Delete the Group under Tier-0. 
    # @param tier_0_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_group_with_http_info(tier_0_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.delete_tier0_group ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.delete_tier0_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyGatewayFirewallApi.delete_tier0_group"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/groups/{group-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#delete_tier0_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyGatewayFirewallApi.list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyGatewayFirewallApi.list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Groups for Tier-0
    # Paginated list of all Groups for Tier-0. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupListResult]
    def list_tier0_group(tier_0_id, opts = {})
      data, _status_code, _headers = list_tier0_group_with_http_info(tier_0_id, opts)
      data
    end

    # List Groups for Tier-0
    # Paginated list of all Groups for Tier-0. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupListResult, Fixnum, Hash)>] GroupListResult data, response status code and response headers
    def list_tier0_group_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.list_tier0_group ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.list_tier0_group"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyGatewayFirewallApi.list_tier0_group, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyGatewayFirewallApi.list_tier0_group, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/groups'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#list_tier0_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling PolicyGatewayFirewallApi.patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.patch_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyGatewayFirewallApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling PolicyGatewayFirewallApi.patch_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Group under specified Tier-0
    # If a Group with the group-id is not already present, create a new Group under the tier-0-id. Update if exists. The API valiates that Tier-0 is present before creating the Group. 
    # @param tier_0_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_group(tier_0_id, group_id, group, opts = {})
      patch_tier0_group_with_http_info(tier_0_id, group_id, group, opts)
      nil
    end

    # Create or update Group under specified Tier-0
    # If a Group with the group-id is not already present, create a new Group under the tier-0-id. Update if exists. The API valiates that Tier-0 is present before creating the Group. 
    # @param tier_0_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_group_with_http_info(tier_0_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.patch_tier0_group ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.patch_tier0_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyGatewayFirewallApi.patch_tier0_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyGatewayFirewallApi.patch_tier0_group"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/groups/{group-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#patch_tier0_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyGatewayFirewallApi.read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling PolicyGatewayFirewallApi.read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyGatewayFirewallApi.read_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Tier-0 Group
    # Read Tier-0 Group
    # @param tier_0_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def read_tier0_group(tier_0_id, group_id, opts = {})
      data, _status_code, _headers = read_tier0_group_with_http_info(tier_0_id, group_id, opts)
      data
    end

    # Read Tier-0 Group
    # Read Tier-0 Group
    # @param tier_0_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def read_tier0_group_with_http_info(tier_0_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.read_tier0_group ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.read_tier0_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyGatewayFirewallApi.read_tier0_group"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/groups/{group-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#read_tier0_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier0_gateway_firewall(tier_0_id, opts = {})
      data, _status_code, _headers = view_tier0_gateway_firewall_with_http_info(tier_0_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier0_gateway_firewall_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.view_tier0_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.view_tier0_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#view_tier0_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier0_locale_services_gateway_firewall(tier_0_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.view_tier0_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyGatewayFirewallApi.view_tier0_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicyGatewayFirewallApi.view_tier0_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#view_tier0_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_gateway_firewall(tier_1_id, opts = {})
      data, _status_code, _headers = view_tier1_gateway_firewall_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_gateway_firewall_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyGatewayFirewallApi.view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_locale_services_gateway_firewall(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGatewayFirewallApi.view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyGatewayFirewallApi.view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling PolicyGatewayFirewallApi.view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGatewayFirewallApi#view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
