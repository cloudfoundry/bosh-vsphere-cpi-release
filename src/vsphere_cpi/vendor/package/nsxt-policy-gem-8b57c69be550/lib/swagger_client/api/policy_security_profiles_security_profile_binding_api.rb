=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicySecurityProfilesSecurityProfileBindingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or replace the infra segment port security profile binding map
    # API will create or replace the port security profile binding map. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortSecurityProfileBindingMap]
    def create_or_update_infra_segment_port_security_profile_binding(segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts)
      data
    end

    # Create or replace the infra segment port security profile binding map
    # API will create or replace the port security profile binding map. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortSecurityProfileBindingMap, Fixnum, Hash)>] PortSecurityProfileBindingMap data, response status code and response headers
    def create_or_update_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_port_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#create_or_update_infra_segment_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace infra segment security profile binding map
    # API will create or replace segment security profile binding map. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityProfileBindingMap]
    def create_or_update_infra_segment_security_profile_binding(segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts)
      data
    end

    # Create or replace infra segment security profile binding map
    # API will create or replace segment security profile binding map. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityProfileBindingMap, Fixnum, Hash)>] SegmentSecurityProfileBindingMap data, response status code and response headers
    def create_or_update_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_infra_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#create_or_update_infra_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace the port security profile binding map
    # API will create or replace the port security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortSecurityProfileBindingMap]
    def create_or_update_port_security_profile_binding(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts)
      data
    end

    # Create or replace the port security profile binding map
    # API will create or replace the port security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortSecurityProfileBindingMap, Fixnum, Hash)>] PortSecurityProfileBindingMap data, response status code and response headers
    def create_or_update_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_port_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_port_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#create_or_update_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace segment security profile binding map
    # API will create or replace segment security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityProfileBindingMap]
    def create_or_update_segment_security_profile_binding(tier_1_id, segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts)
      data
    end

    # Create or replace segment security profile binding map
    # API will create or replace segment security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityProfileBindingMap, Fixnum, Hash)>] SegmentSecurityProfileBindingMap data, response status code and response headers
    def create_or_update_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_segment_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.create_or_update_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#create_or_update_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the infra segment port security profile binding map
    # API will delete the port security profile binding map. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_port_security_profile_binding(segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      delete_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, opts)
      nil
    end

    # Delete the infra segment port security profile binding map
    # API will delete the port security profile binding map. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_port_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#delete_infra_segment_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete infra segment security profile binding map
    # API will delete segment security profile binding map. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_security_profile_binding(segment_id, segment_security_profile_binding_map_id, opts = {})
      delete_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, opts)
      nil
    end

    # Delete infra segment security profile binding map
    # API will delete segment security profile binding map. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_infra_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#delete_infra_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the port security profile binding map
    # API will delete the port security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_security_profile_binding(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      delete_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, opts)
      nil
    end

    # Delete the port security profile binding map
    # API will delete the port security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.delete_port_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_port_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#delete_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete segment security profile binding map
    # API will delete segment security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_security_profile_binding(tier_1_id, segment_id, segment_security_profile_binding_map_id, opts = {})
      delete_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, opts)
      nil
    end

    # Delete segment security profile binding map
    # API will delete segment security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.delete_segment_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.delete_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#delete_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port security profile binding map
    # API will return details of the port security profile binding map. If the security profile binding map does not exist, it will return 404. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [PortSecurityProfileBindingMap]
    def get_infra_segment_port_security_profile_binding(segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, opts)
      data
    end

    # Get infra segment port security profile binding map
    # API will return details of the port security profile binding map. If the security profile binding map does not exist, it will return 404. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortSecurityProfileBindingMap, Fixnum, Hash)>] PortSecurityProfileBindingMap data, response status code and response headers
    def get_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_port_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#get_infra_segment_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment security profile binding map
    # API will return details of the segment security profile binding map. If the binding map does not exist, it will return 404. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityProfileBindingMap]
    def get_infra_segment_security_profile_binding(segment_id, segment_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, opts)
      data
    end

    # Get infra segment security profile binding map
    # API will return details of the segment security profile binding map. If the binding map does not exist, it will return 404. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityProfileBindingMap, Fixnum, Hash)>] SegmentSecurityProfileBindingMap data, response status code and response headers
    def get_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_infra_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#get_infra_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get port security profile binding map
    # API will return details of the port security profile binding map. If the security profile binding map does not exist, it will return 404. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [PortSecurityProfileBindingMap]
    def get_port_security_profile_binding(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, opts)
      data
    end

    # Get port security profile binding map
    # API will return details of the port security profile binding map. If the security profile binding map does not exist, it will return 404. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortSecurityProfileBindingMap, Fixnum, Hash)>] PortSecurityProfileBindingMap data, response status code and response headers
    def get_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.get_port_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_port_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#get_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get segment security profile binding map
    # API will return details of the segment security profile binding map. If the binding map does not exist, it will return 404. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityProfileBindingMap]
    def get_segment_security_profile_binding(tier_1_id, segment_id, segment_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, opts)
      data
    end

    # Get segment security profile binding map
    # API will return details of the segment security profile binding map. If the binding map does not exist, it will return 404. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityProfileBindingMap, Fixnum, Hash)>] SegmentSecurityProfileBindingMap data, response status code and response headers
    def get_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.get_segment_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.get_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#get_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List infra segment port security profile binding maps
    # API will list all port security profile binding maps. 
    # @param segment_id segment id
    # @param port_id port id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortSecurityProfileBindingMapListResult]
    def list_infra_segment_port_security_profile_bindings(segment_id, port_id, opts = {})
      data, _status_code, _headers = list_infra_segment_port_security_profile_bindings_with_http_info(segment_id, port_id, opts)
      data
    end

    # List infra segment port security profile binding maps
    # API will list all port security profile binding maps. 
    # @param segment_id segment id
    # @param port_id port id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortSecurityProfileBindingMapListResult, Fixnum, Hash)>] PortSecurityProfileBindingMapListResult data, response status code and response headers
    def list_infra_segment_port_security_profile_bindings_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_port_security_profile_bindings ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_port_security_profile_bindings"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_port_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_port_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_port_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#list_infra_segment_port_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List infra segment security profile binding maps
    # API will list all segment security profile binding maps. 
    # @param segment_id segment id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityProfileBindingMapListResult]
    def list_infra_segment_security_profile_bindings(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_security_profile_bindings_with_http_info(segment_id, opts)
      data
    end

    # List infra segment security profile binding maps
    # API will list all segment security profile binding maps. 
    # @param segment_id segment id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityProfileBindingMapListResult, Fixnum, Hash)>] SegmentSecurityProfileBindingMapListResult data, response status code and response headers
    def list_infra_segment_security_profile_bindings_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_security_profile_bindings ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_infra_segment_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-security-profile-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#list_infra_segment_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List port security profile binding maps
    # API will list all port security profile binding maps. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortSecurityProfileBindingMapListResult]
    def list_port_security_profile_bindings(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = list_port_security_profile_bindings_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List port security profile binding maps
    # API will list all port security profile binding maps. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortSecurityProfileBindingMapListResult, Fixnum, Hash)>] PortSecurityProfileBindingMapListResult data, response status code and response headers
    def list_port_security_profile_bindings_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.list_port_security_profile_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_port_security_profile_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_port_security_profile_bindings"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_port_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_port_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_port_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#list_port_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List segment security profile binding maps
    # API will list all segment security profile binding maps. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityProfileBindingMapListResult]
    def list_segment_security_profile_bindings(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_security_profile_bindings_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List segment security profile binding maps
    # API will list all segment security profile binding maps. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityProfileBindingMapListResult, Fixnum, Hash)>] SegmentSecurityProfileBindingMapListResult data, response status code and response headers
    def list_segment_security_profile_bindings_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.list_segment_security_profile_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_segment_security_profile_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.list_segment_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_segment_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySecurityProfilesSecurityProfileBindingApi.list_segment_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-security-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#list_segment_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch infra segment port security profile binding map
    # Create a new port security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing port security profile binding map. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_port_security_profile_binding(segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      patch_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts)
      nil
    end

    # Patch infra segment port security profile binding map
    # Create a new port security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing port security profile binding map. 
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_port_security_profile_binding_with_http_info(segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_port_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#patch_infra_segment_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch infra segment security profile binding map
    # Create a new segment security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing segment security profile binding map. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_security_profile_binding(segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      patch_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts)
      nil
    end

    # Patch infra segment security profile binding map
    # Create a new segment security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing segment security profile binding map. 
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_security_profile_binding_with_http_info(segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_security_profile_binding ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_infra_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#patch_infra_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch port security profile binding map
    # Create a new port security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing port security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_security_profile_binding(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      patch_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts)
      nil
    end

    # Patch port security profile binding map
    # Create a new port security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing port security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param port_id port id
    # @param port_security_profile_binding_map_id port security profile binding map id
    # @param port_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_security_profile_binding_with_http_info(tier_1_id, segment_id, port_id, port_security_profile_binding_map_id, port_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.patch_port_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_port_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_port_security_profile_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_port_security_profile_binding"
      end
      # verify the required parameter 'port_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_port_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-security-profile-binding-maps/{port-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-security-profile-binding-map-id' + '}', port_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#patch_port_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch segment security profile binding map
    # Create a new segment security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing segment security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_security_profile_binding(tier_1_id, segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      patch_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts)
      nil
    end

    # Patch segment security profile binding map
    # Create a new segment security profile binding map if the given security profile binding map does not exist. Otherwise, patch the existing segment security profile binding map. 
    # @param tier_1_id tier-1 gateway id
    # @param segment_id segment id
    # @param segment_security_profile_binding_map_id segment security profile binding map id
    # @param segment_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_security_profile_binding_with_http_info(tier_1_id, segment_id, segment_security_profile_binding_map_id, segment_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySecurityProfilesSecurityProfileBindingApi.patch_segment_security_profile_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map_id' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_segment_security_profile_binding"
      end
      # verify the required parameter 'segment_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_profile_binding_map' when calling PolicySecurityProfilesSecurityProfileBindingApi.patch_segment_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-security-profile-binding-maps/{segment-security-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-security-profile-binding-map-id' + '}', segment_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySecurityProfilesSecurityProfileBindingApi#patch_segment_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
