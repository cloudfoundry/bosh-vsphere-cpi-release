=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class UpgradeNodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the version whitelist
    # Get whitelist of versions for different components
    # @param [Hash] opts the optional parameters
    # @return [AcceptableComponentVersionList]
    def get_version_whitelist(opts = {})
      data, _status_code, _headers = get_version_whitelist_with_http_info(opts)
      data
    end

    # Get the version whitelist
    # Get whitelist of versions for different components
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptableComponentVersionList, Fixnum, Hash)>] AcceptableComponentVersionList data, response status code and response headers
    def get_version_whitelist_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeNodesApi.get_version_whitelist ...'
      end
      # resource path
      local_var_path = '/upgrade/version-whitelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptableComponentVersionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeNodesApi#get_version_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the version whitelist for the specified component
    # Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [AcceptableComponentVersion]
    def get_version_whitelist_by_component(component_type, opts = {})
      data, _status_code, _headers = get_version_whitelist_by_component_with_http_info(component_type, opts)
      data
    end

    # Get the version whitelist for the specified component
    # Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP
    # @param component_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptableComponentVersion, Fixnum, Hash)>] AcceptableComponentVersion data, response status code and response headers
    def get_version_whitelist_by_component_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeNodesApi.get_version_whitelist_by_component ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeNodesApi.get_version_whitelist_by_component"
      end
      # resource path
      local_var_path = '/upgrade/version-whitelist/{component_type}'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptableComponentVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeNodesApi#get_version_whitelist_by_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the version whitelist for the specified component type
    # Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
    # @param component_type 
    # @param version_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_version_whitelist(component_type, version_list, opts = {})
      update_version_whitelist_with_http_info(component_type, version_list, opts)
      nil
    end

    # Update the version whitelist for the specified component type
    # Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).
    # @param component_type 
    # @param version_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_version_whitelist_with_http_info(component_type, version_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpgradeNodesApi.update_version_whitelist ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling UpgradeNodesApi.update_version_whitelist"
      end
      # verify the required parameter 'version_list' is set
      if @api_client.config.client_side_validation && version_list.nil?
        fail ArgumentError, "Missing the required parameter 'version_list' when calling UpgradeNodesApi.update_version_whitelist"
      end
      # resource path
      local_var_path = '/upgrade/version-whitelist/{component_type}'.sub('{' + 'component_type' + '}', component_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(version_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpgradeNodesApi#update_version_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
