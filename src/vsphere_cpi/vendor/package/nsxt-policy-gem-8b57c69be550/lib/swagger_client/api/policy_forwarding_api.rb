=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyForwardingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update forwarding policy
    # Create or update the forwarding policy. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param forwarding_policy 
    # @param [Hash] opts the optional parameters
    # @return [ForwardingPolicy]
    def create_or_update_forwarding_policy(domain_id, forwarding_policy_id, forwarding_policy, opts = {})
      data, _status_code, _headers = create_or_update_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, forwarding_policy, opts)
      data
    end

    # Create or update forwarding policy
    # Create or update the forwarding policy. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param forwarding_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForwardingPolicy, Fixnum, Hash)>] ForwardingPolicy data, response status code and response headers
    def create_or_update_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, forwarding_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.create_or_update_forwarding_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.create_or_update_forwarding_policy"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.create_or_update_forwarding_policy"
      end
      # verify the required parameter 'forwarding_policy' is set
      if @api_client.config.client_side_validation && forwarding_policy.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy' when calling PolicyForwardingApi.create_or_update_forwarding_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(forwarding_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForwardingPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#create_or_update_forwarding_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update forwarding rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param rule_id rule id
    # @param forwarding_rule 
    # @param [Hash] opts the optional parameters
    # @return [ForwardingRule]
    def create_or_update_forwarding_rule(domain_id, forwarding_policy_id, rule_id, forwarding_rule, opts = {})
      data, _status_code, _headers = create_or_update_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, forwarding_rule, opts)
      data
    end

    # Update forwarding rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param rule_id rule id
    # @param forwarding_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForwardingRule, Fixnum, Hash)>] ForwardingRule data, response status code and response headers
    def create_or_update_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, forwarding_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.create_or_update_forwarding_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.create_or_update_forwarding_rule"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.create_or_update_forwarding_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyForwardingApi.create_or_update_forwarding_rule"
      end
      # verify the required parameter 'forwarding_rule' is set
      if @api_client.config.client_side_validation && forwarding_rule.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_rule' when calling PolicyForwardingApi.create_or_update_forwarding_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(forwarding_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForwardingRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#create_or_update_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete forwarding policy
    # Delete forwarding policy.
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_forwarding_policy(domain_id, forwarding_policy_id, opts = {})
      delete_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, opts)
      nil
    end

    # Delete forwarding policy
    # Delete forwarding policy.
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.delete_forwarding_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.delete_forwarding_policy"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.delete_forwarding_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#delete_forwarding_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete ForwardingRule
    # Delete ForwardingRule
    # @param domain_id Domain ID
    # @param forwarding_policy_id Forwarding Map ID
    # @param rule_id ForwardingRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_forwarding_rule(domain_id, forwarding_policy_id, rule_id, opts = {})
      delete_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, opts)
      nil
    end

    # Delete ForwardingRule
    # Delete ForwardingRule
    # @param domain_id Domain ID
    # @param forwarding_policy_id Forwarding Map ID
    # @param rule_id ForwardingRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.delete_forwarding_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.delete_forwarding_rule"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.delete_forwarding_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyForwardingApi.delete_forwarding_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#delete_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List forwarding policies for the given domain
    # List all forwarding policies for the given domain ordered by precedence. 
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ForwardingPolicyListResult]
    def list_forwarding_policies(domain_id, opts = {})
      data, _status_code, _headers = list_forwarding_policies_with_http_info(domain_id, opts)
      data
    end

    # List forwarding policies for the given domain
    # List all forwarding policies for the given domain ordered by precedence. 
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ForwardingPolicyListResult, Fixnum, Hash)>] ForwardingPolicyListResult data, response status code and response headers
    def list_forwarding_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.list_forwarding_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.list_forwarding_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyForwardingApi.list_forwarding_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyForwardingApi.list_forwarding_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForwardingPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#list_forwarding_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ForwardingRuleListResult]
    def list_forwarding_rule(domain_id, forwarding_policy_id, opts = {})
      data, _status_code, _headers = list_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ForwardingRuleListResult, Fixnum, Hash)>] ForwardingRuleListResult data, response status code and response headers
    def list_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.list_forwarding_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.list_forwarding_rule"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.list_forwarding_rule"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyForwardingApi.list_forwarding_rule, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyForwardingApi.list_forwarding_rule, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForwardingRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#list_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update forwarding policy
    # Create or update the forwarding policy. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param forwarding_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_forwarding_policy(domain_id, forwarding_policy_id, forwarding_policy, opts = {})
      patch_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, forwarding_policy, opts)
      nil
    end

    # Create or update forwarding policy
    # Create or update the forwarding policy. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param forwarding_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, forwarding_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.patch_forwarding_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.patch_forwarding_policy"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.patch_forwarding_policy"
      end
      # verify the required parameter 'forwarding_policy' is set
      if @api_client.config.client_side_validation && forwarding_policy.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy' when calling PolicyForwardingApi.patch_forwarding_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(forwarding_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#patch_forwarding_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update forwarding rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param rule_id Rule id
    # @param forwarding_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_forwarding_rule(domain_id, forwarding_policy_id, rule_id, forwarding_rule, opts = {})
      patch_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, forwarding_rule, opts)
      nil
    end

    # Update forwarding rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param rule_id Rule id
    # @param forwarding_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, forwarding_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.patch_forwarding_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.patch_forwarding_rule"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.patch_forwarding_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyForwardingApi.patch_forwarding_rule"
      end
      # verify the required parameter 'forwarding_rule' is set
      if @api_client.config.client_side_validation && forwarding_rule.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_rule' when calling PolicyForwardingApi.patch_forwarding_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(forwarding_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#patch_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read forwarding policy
    # Read forwarding policy. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param [Hash] opts the optional parameters
    # @return [ForwardingPolicy]
    def read_forwarding_policy(domain_id, forwarding_policy_id, opts = {})
      data, _status_code, _headers = read_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, opts)
      data
    end

    # Read forwarding policy
    # Read forwarding policy. 
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForwardingPolicy, Fixnum, Hash)>] ForwardingPolicy data, response status code and response headers
    def read_forwarding_policy_with_http_info(domain_id, forwarding_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.read_forwarding_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.read_forwarding_policy"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.read_forwarding_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForwardingPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#read_forwarding_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [ForwardingRule]
    def read_forwarding_rule(domain_id, forwarding_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param forwarding_policy_id Forwarding map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForwardingRule, Fixnum, Hash)>] ForwardingRule data, response status code and response headers
    def read_forwarding_rule_with_http_info(domain_id, forwarding_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyForwardingApi.read_forwarding_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyForwardingApi.read_forwarding_rule"
      end
      # verify the required parameter 'forwarding_policy_id' is set
      if @api_client.config.client_side_validation && forwarding_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'forwarding_policy_id' when calling PolicyForwardingApi.read_forwarding_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyForwardingApi.read_forwarding_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/forwarding-policies/{forwarding-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'forwarding-policy-id' + '}', forwarding_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForwardingRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyForwardingApi#read_forwarding_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
