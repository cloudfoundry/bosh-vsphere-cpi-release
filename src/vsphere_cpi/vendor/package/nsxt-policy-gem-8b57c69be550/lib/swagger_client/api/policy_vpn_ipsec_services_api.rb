=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyVpnIpsecServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for given locale service.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      create_or_patch_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      nil
    end

    # Create or patch IPSec VPN service
    # Create or patch IPSec VPN service for given locale service.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.create_or_patch_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.create_or_patch_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.create_or_patch_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnIpsecServicesApi.create_or_patch_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling PolicyVpnIpsecServicesApi.create_or_patch_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#create_or_patch_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch the L3Vpn Context
    # Create the new L3Vpn Context under tier-0 if it does not exist. If the L3Vpn Context already exists under tier-0, merge with the the existing one. This is a patch. If the passed L3VpnContext has new L3VpnRules, add them to the existing L3VpnContext. If the passed L3VpnContext also has existing L3VpnRules, update the existing L3VpnRules. This API is deprecated. Please use PATCH /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/ipsec-vpn-services/default instead. If used, this deprecated API will result in an IPSecVpnService being internally created/patched: - IPSecVpnService: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/ ipsec-vpn-services/default. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3_vpn_context 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l3_vpn_context(tier_0_id, locale_service_id, l3_vpn_context, opts = {})
      create_or_patch_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, l3_vpn_context, opts)
      nil
    end

    # Create or patch the L3Vpn Context
    # Create the new L3Vpn Context under tier-0 if it does not exist. If the L3Vpn Context already exists under tier-0, merge with the the existing one. This is a patch. If the passed L3VpnContext has new L3VpnRules, add them to the existing L3VpnContext. If the passed L3VpnContext also has existing L3VpnRules, update the existing L3VpnRules. This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default instead. If used, this deprecated API will result in an IPSecVpnService being internally created/patched: - IPSecVpnService: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ ipsec-vpn-services/default. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3_vpn_context 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, l3_vpn_context, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.create_or_patch_l3_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.create_or_patch_l3_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.create_or_patch_l3_vpn_context"
      end
      # verify the required parameter 'l3_vpn_context' is set
      if @api_client.config.client_side_validation && l3_vpn_context.nil?
        fail ArgumentError, "Missing the required parameter 'l3_vpn_context' when calling PolicyVpnIpsecServicesApi.create_or_patch_l3_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l3_vpn_context)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#create_or_patch_l3_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace the L3Vpn Context
    # Create the new L3Vpn Context under tier-0 if it does not exist. If the L3Vpn Context already exists under tier-0, replace the the existing one. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/ipsec-vpn-services/default instead. If used, this deprecated API will result in an IPSecVpnService being internally created/updated: - IPSecVpnService: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/ ipsec-vpn-services/default. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3_vpn_context 
    # @param [Hash] opts the optional parameters
    # @return [L3VpnContext]
    def create_or_replace_l3_vpn_context(tier_0_id, locale_service_id, l3_vpn_context, opts = {})
      data, _status_code, _headers = create_or_replace_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, l3_vpn_context, opts)
      data
    end

    # Create or replace the L3Vpn Context
    # Create the new L3Vpn Context under tier-0 if it does not exist. If the L3Vpn Context already exists under tier-0, replace the the existing one. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default instead. If used, this deprecated API will result in an IPSecVpnService being internally created/updated: - IPSecVpnService: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/ ipsec-vpn-services/default. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l3_vpn_context 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3VpnContext, Fixnum, Hash)>] L3VpnContext data, response status code and response headers
    def create_or_replace_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, l3_vpn_context, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.create_or_replace_l3_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.create_or_replace_l3_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.create_or_replace_l3_vpn_context"
      end
      # verify the required parameter 'l3_vpn_context' is set
      if @api_client.config.client_side_validation && l3_vpn_context.nil?
        fail ArgumentError, "Missing the required parameter 'l3_vpn_context' when calling PolicyVpnIpsecServicesApi.create_or_replace_l3_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l3_vpn_context)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3VpnContext')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#create_or_replace_l3_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for given locale service. Revision is optional for creation and required for update.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def create_or_update_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      data, _status_code, _headers = create_or_update_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts)
      data
    end

    # Create or fully replace IPSec VPN service
    # Create or fully replace IPSec VPN service for given locale service. Revision is optional for creation and required for update.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param ip_sec_vpn_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def create_or_update_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, ip_sec_vpn_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.create_or_update_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.create_or_update_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.create_or_update_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnIpsecServicesApi.create_or_update_ip_sec_vpn_service"
      end
      # verify the required parameter 'ip_sec_vpn_service' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_service.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_service' when calling PolicyVpnIpsecServicesApi.create_or_update_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#create_or_update_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN service
    # Delete IPSec VPN service for given locale service.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      delete_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      nil
    end

    # Delete IPSec VPN service
    # Delete IPSec VPN service for given locale service.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.delete_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.delete_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.delete_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnIpsecServicesApi.delete_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#delete_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service
    # Get IPSec VPN service for given locale service.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnService]
    def get_ip_sec_vpn_service(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = get_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN service
    # Get IPSec VPN service for given locale service.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnService, Fixnum, Hash)>] IPSecVpnService data, response status code and response headers
    def get_ip_sec_vpn_service_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.get_ip_sec_vpn_service ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.get_ip_sec_vpn_service"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.get_ip_sec_vpn_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnIpsecServicesApi.get_ip_sec_vpn_service"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#get_ip_sec_vpn_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnServiceListResult]
    def list_ip_sec_vpn_services(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_ip_sec_vpn_services_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Get IPSec VPN service list result
    # Get paginated list of all IPSec VPN services.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnServiceListResult, Fixnum, Hash)>] IPSecVpnServiceListResult data, response status code and response headers
    def list_ip_sec_vpn_services_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.list_ip_sec_vpn_services ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.list_ip_sec_vpn_services"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.list_ip_sec_vpn_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyVpnIpsecServicesApi.list_ip_sec_vpn_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyVpnIpsecServicesApi.list_ip_sec_vpn_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#list_ip_sec_vpn_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the L3Vpn Context
    # Read the L3Vpn Context under tier-0. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/ipsec-vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [L3VpnContext]
    def read_l3_vpn_context(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read the L3Vpn Context
    # Read the L3Vpn Context under tier-0. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/ipsec-vpn-services/default instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L3VpnContext, Fixnum, Hash)>] L3VpnContext data, response status code and response headers
    def read_l3_vpn_context_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnIpsecServicesApi.read_l3_vpn_context ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnIpsecServicesApi.read_l3_vpn_context"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnIpsecServicesApi.read_l3_vpn_context"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l3vpn-context'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L3VpnContext')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnIpsecServicesApi#read_l3_vpn_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
