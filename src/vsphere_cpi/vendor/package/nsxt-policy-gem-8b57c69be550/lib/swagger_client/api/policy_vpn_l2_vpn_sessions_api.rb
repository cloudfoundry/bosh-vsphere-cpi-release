=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyVpnL2VpnSessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, merge with the existing L2Vpn. This is a patch. This API is deprecated. Please use PATCH /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in an L2VPNSession being internally created/patched: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      create_or_patch_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts)
      nil
    end

    # Create or patch an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, merge with the existing L2Vpn. This is a patch. This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in an L2VPNSession being internally created/patched: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn"
      end
      # verify the required parameter 'l2_vpn' is set
      if @api_client.config.client_side_validation && l2_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#create_or_patch_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session
    # Create or patch an L2VPN session. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      create_or_patch_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      nil
    end

    # Create or patch an L2VPN session
    # Create or patch an L2VPN session. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#create_or_patch_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch an L2VPN session from Peer Codes
    # Create or patch an L2VPN session from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts)
      nil
    end

    # Create or patch an L2VPN session from Peer Codes
    # Create or patch an L2VPN session from Peer Codes. In addition to the L2VPN Session, the IPSec VPN Session, along with the IKE, Tunnel, and DPD Profiles are created and owned by the system. IPSec VPN Service and Local Endpoint are created only when required, i.e., an IPSec VPN Service does not already exist, or an IPSec VPN Local Endpoint with same local address does not already exist. Updating the L2VPN Session can be performed only through this API by specifying new peer codes. Use of specific APIs to update the L2VPN Session and the different resources associated with it is not allowed, except for IPSec VPN Service and Local Endpoint, resources that are not system owned. API supported only when L2VPN Service is in Client Mode. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code"
      end
      # verify the required parameter 'l2_vpn_session_data' is set
      if @api_client.config.client_side_validation && l2_vpn_session_data.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session_data' when calling PolicyVpnL2VpnSessionsApi.create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}?action=create_with_peer_code'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#create_or_patch_l2_vpn_session_from_peer_codes_create_with_peer_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, update the existing L2Vpn. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in an L2VPNSession being internally created/updated: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [L2Vpn]
    def create_or_replace_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      data, _status_code, _headers = create_or_replace_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts)
      data
    end

    # Create or replace an L2Vpn
    # Create a new L2Vpn if the L2Vpn with given id does not already exist. If the L2Vpn with the given id already exists, update the existing L2Vpn. This is a full replace. This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in an L2VPNSession being internally created/updated: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param l2_vpn 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2Vpn, Fixnum, Hash)>] L2Vpn data, response status code and response headers
    def create_or_replace_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, l2_vpn, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.create_or_replace_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling PolicyVpnL2VpnSessionsApi.create_or_replace_l2_vpn"
      end
      # verify the required parameter 'l2_vpn' is set
      if @api_client.config.client_side_validation && l2_vpn.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn' when calling PolicyVpnL2VpnSessionsApi.create_or_replace_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#create_or_replace_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace L2VPN session
    # Create or fully replace L2VPN session. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def create_or_update_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      data, _status_code, _headers = create_or_update_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts)
      data
    end

    # Create or fully replace L2VPN session
    # Create or fully replace L2VPN session. API supported only when L2VPN Service is in Server Mode. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param l2_vpn_session 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def create_or_update_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, l2_vpn_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.create_or_update_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyVpnL2VpnSessionsApi.create_or_update_l2_vpn_session"
      end
      # verify the required parameter 'l2_vpn_session' is set
      if @api_client.config.client_side_validation && l2_vpn_session.nil?
        fail ArgumentError, "Missing the required parameter 'l2_vpn_session' when calling PolicyVpnL2VpnSessionsApi.create_or_update_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(l2_vpn_session)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#create_or_update_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an L2Vpn
    # Delete the L2Vpn with the given id. This API is deprecated. Please use DELETE /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/<l2vpn-id> instead. If used, this deprecated API will result in the L2VPNSession being deleted: - L2VPNSession: /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-services/   default/sessions/L2VPN_<l2vpn-id>. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      delete_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      nil
    end

    # Delete an L2Vpn
    # Delete the L2Vpn with the given id. This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/&lt;l2vpn-id&gt; instead. If used, this deprecated API will result in the L2VPNSession being deleted: - L2VPNSession: /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-services/   default/sessions/L2VPN_&lt;l2vpn-id&gt;. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.delete_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#delete_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete L2VPN session
    # Delete L2VPN session. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      delete_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      nil
    end

    # Delete L2VPN session
    # Delete L2VPN session. When L2VPN Service is in CLIENT Mode, the L2VPN Session is deleted along with its transpot tunnels and related resources.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.delete_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyVpnL2VpnSessionsApi.delete_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#delete_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN Session
    # Get L2VPN session.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [L2VPNSession]
    def get_l2_vpn_session(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN Session
    # Get L2VPN session.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2VPNSession, Fixnum, Hash)>] L2VPNSession data, response status code and response headers
    def get_l2_vpn_session_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.get_l2_vpn_session ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#get_l2_vpn_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN session configuration for the peer site
    # Get peer config for the L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VPNSessionPeerConfig]
    def get_l2_vpn_session_peer_config(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      data, _status_code, _headers = get_l2_vpn_session_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts)
      data
    end

    # Get L2VPN session configuration for the peer site
    # Get peer config for the L2VPN session to configure the remote side of the tunnel. - no enforcement point path specified: L2VPN Session Peer Codes will be evaluated on each enforcement point. - enforcement point paths specified: L2VPN Session Peer Codes are evaluated only on the given enforcement points. API supported only when L2VPN Service is in Server Mode. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param session_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VPNSessionPeerConfig, Fixnum, Hash)>] AggregateL2VPNSessionPeerConfig data, response status code and response headers
    def get_l2_vpn_session_peer_config_with_http_info(tier_0_id, locale_service_id, service_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.get_l2_vpn_session_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session_peer_config"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling PolicyVpnL2VpnSessionsApi.get_l2_vpn_session_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions/{session-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VPNSessionPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#get_l2_vpn_session_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get L2VPN sessions list result
    # Get paginated list of all L2VPN sessions.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VPNSessionListResult]
    def list_l2_vpn_sessions(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_l2_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get L2VPN sessions list result
    # Get paginated list of all L2VPN sessions.
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VPNSessionListResult, Fixnum, Hash)>] L2VPNSessionListResult data, response status code and response headers
    def list_l2_vpn_sessions_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.list_l2_vpn_sessions ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.list_l2_vpn_sessions"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.list_l2_vpn_sessions"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyVpnL2VpnSessionsApi.list_l2_vpn_sessions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyVpnL2VpnSessionsApi.list_l2_vpn_sessions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyVpnL2VpnSessionsApi.list_l2_vpn_sessions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-services/{service-id}/sessions'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VPNSessionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#list_l2_vpn_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List L2Vpns
    # Paginated list of L2Vpns. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions instead. If used, this deprecated API will only return L2Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/<tier-0-id>/locale-services/<locale-service-id>/l2vpn-context/ l2vpns/<l2vpn-id> APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [L2VpnListResult]
    def list_l2_vpns(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_l2_vpns_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List L2Vpns
    # Paginated list of L2Vpns. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions instead. If used, this deprecated API will only return L2Vpns that were created through the deprecated PATCH and PUT /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/&lt;locale-service-id&gt;/l2vpn-context/ l2vpns/&lt;l2vpn-id&gt; APIs. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(L2VpnListResult, Fixnum, Hash)>] L2VpnListResult data, response status code and response headers
    def list_l2_vpns_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.list_l2_vpns ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.list_l2_vpns"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.list_l2_vpns"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyVpnL2VpnSessionsApi.list_l2_vpns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyVpnL2VpnSessionsApi.list_l2_vpns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2VpnListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#list_l2_vpns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an L2Vpn
    # Read the L2Vpn with the given id. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/L2VPN_<l2vpn-id> instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [L2Vpn]
    def read_l2_vpn(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Read an L2Vpn
    # Read the L2Vpn with the given id. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(L2Vpn, Fixnum, Hash)>] L2Vpn data, response status code and response headers
    def read_l2_vpn_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.read_l2_vpn ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.read_l2_vpn"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.read_l2_vpn"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling PolicyVpnL2VpnSessionsApi.read_l2_vpn"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'L2Vpn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#read_l2_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Peer Config for L2Vpn
    # Get peer config for the L2Vpn to configure the remote side of the tunnel. - no enforcement point path specified: L2Vpn Peer Codes will be evaluated on each enforcement point. - {enforcement_point_path}: L2Vpn Peer Codes are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/<tier-0-id>/locale-services/ <locale-service-id>/l2vpn-services/default/sessions/L2VPN_<l2vpn-id>/peer-config  instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateL2VpnPeerConfig]
    def read_l2_vpn_peer_config(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      data, _status_code, _headers = read_l2_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts)
      data
    end

    # Get Peer Config for L2Vpn
    # Get peer config for the L2Vpn to configure the remote side of the tunnel. - no enforcement point path specified: L2Vpn Peer Codes will be evaluated on each enforcement point. - {enforcement_point_path}: L2Vpn Peer Codes are evaluated only on the given enforcement point. This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/locale-services/ &lt;locale-service-id&gt;/l2vpn-services/default/sessions/L2VPN_&lt;l2vpn-id&gt;/peer-config  instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param l2vpn_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateL2VpnPeerConfig, Fixnum, Hash)>] AggregateL2VpnPeerConfig data, response status code and response headers
    def read_l2_vpn_peer_config_with_http_info(tier_0_id, locale_service_id, l2vpn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyVpnL2VpnSessionsApi.read_l2_vpn_peer_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyVpnL2VpnSessionsApi.read_l2_vpn_peer_config"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyVpnL2VpnSessionsApi.read_l2_vpn_peer_config"
      end
      # verify the required parameter 'l2vpn_id' is set
      if @api_client.config.client_side_validation && l2vpn_id.nil?
        fail ArgumentError, "Missing the required parameter 'l2vpn_id' when calling PolicyVpnL2VpnSessionsApi.read_l2_vpn_peer_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/l2vpn-context/l2vpns/{l2vpn-id}/peer-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'l2vpn-id' + '}', l2vpn_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateL2VpnPeerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyVpnL2VpnSessionsApi#read_l2_vpn_peer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
