=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyConnectivitySegmentsPortsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def create_or_replace_infra_segment_port(segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = create_or_replace_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def create_or_replace_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.create_or_replace_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#create_or_replace_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def create_or_replace_tier1_segment_port(tier_1_id, segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = create_or_replace_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def create_or_replace_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.create_or_replace_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PolicyConnectivitySegmentsPortsApi.create_or_replace_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#create_or_replace_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an infra segment port
    # Delete an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_port(segment_id, port_id, opts = {})
      delete_infra_segment_port_with_http_info(segment_id, port_id, opts)
      nil
    end

    # Delete an infra segment port
    # Delete an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_port_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.delete_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.delete_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.delete_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#delete_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tier-1 segment port
    # Delete a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_segment_port(tier_1_id, segment_id, port_id, opts = {})
      delete_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts)
      nil
    end

    # Delete a Tier-1 segment port
    # Delete a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.delete_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsPortsApi.delete_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.delete_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.delete_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#delete_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def get_infra_segment_port(segment_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def get_infra_segment_port_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.get_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.get_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.get_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#get_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def get_tier1_segment_port(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = get_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def get_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.get_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsPortsApi.get_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.get_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.get_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#get_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List infra segment ports
    # List all the ports for an infra. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def list_infra_segment_ports(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_ports_with_http_info(segment_id, opts)
      data
    end

    # List infra segment ports
    # List all the ports for an infra. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def list_infra_segment_ports_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.list_infra_segment_ports ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.list_infra_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsPortsApi.list_infra_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsPortsApi.list_infra_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#list_infra_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def list_tier1_segment_ports(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_tier1_segment_ports_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def list_tier1_segment_ports_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.list_tier1_segment_ports ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsPortsApi.list_tier1_segment_ports"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.list_tier1_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsPortsApi.list_tier1_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsPortsApi.list_tier1_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#list_tier1_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_port(segment_id, port_id, segment_port, opts = {})
      patch_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.patch_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.patch_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.patch_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PolicyConnectivitySegmentsPortsApi.patch_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#patch_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_segment_port(tier_1_id, segment_id, port_id, segment_port, opts = {})
      patch_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsPortsApi.patch_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsPortsApi.patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsPortsApi.patch_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsPortsApi.patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PolicyConnectivitySegmentsPortsApi.patch_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsPortsApi#patch_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
