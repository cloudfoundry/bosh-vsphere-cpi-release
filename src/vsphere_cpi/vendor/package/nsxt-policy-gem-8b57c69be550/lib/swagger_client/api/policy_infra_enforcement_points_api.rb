=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyInfraEnforcementPointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. This is a deprecated API. DeploymentZone has been renamed to Site. Use PUT /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def create_or_update_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      data, _status_code, _headers = create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      data
    end

    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. This is a deprecated API. DeploymentZone has been renamed to Site. Use PUT /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#create_or_update_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/update a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def create_or_update_enforcement_point_for_site(site_id, enforcementpoint_id, enforcement_point, opts = {})
      data, _status_code, _headers = create_or_update_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts)
      data
    end

    # Create/update a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def create_or_update_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling PolicyInfraEnforcementPointsApi.create_or_update_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#create_or_update_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EnforcementPoint
    # Delete EnforcementPoint. This is a deprecated API. DeploymentZone has been renamed to Site. Use DELETE /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id enforcementpoint-id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point(deployment_zone_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      nil
    end

    # Delete EnforcementPoint
    # Delete EnforcementPoint. This is a deprecated API. DeploymentZone has been renamed to Site. Use DELETE /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id enforcementpoint-id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.delete_enforcement_point ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyInfraEnforcementPointsApi.delete_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.delete_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#delete_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EnforcementPoint from Site
    # Delete EnforcementPoint from Site
    # @param site_id Site id
    # @param enforcementpoint_id enforcementpoint-id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      nil
    end

    # Delete EnforcementPoint from Site
    # Delete EnforcementPoint from Site
    # @param site_id Site id
    # @param enforcementpoint_id enforcementpoint-id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.delete_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.delete_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.delete_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#delete_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Full sync EnforcementPoint from Site
    # Full sync EnforcementPoint from Site
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def full_sync_enforcement_point_for_site_full_sync(site_id, enforcement_point_id, opts = {})
      full_sync_enforcement_point_for_site_full_sync_with_http_info(site_id, enforcement_point_id, opts)
      nil
    end

    # Full sync EnforcementPoint from Site
    # Full sync EnforcementPoint from Site
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def full_sync_enforcement_point_for_site_full_sync_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.full_sync_enforcement_point_for_site_full_sync ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.full_sync_enforcement_point_for_site_full_sync"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicyInfraEnforcementPointsApi.full_sync_enforcement_point_for_site_full_sync"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}?action=full-sync'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#full_sync_enforcement_point_for_site_full_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra. This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_infra(deployment_zone_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts)
      data
    end

    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra. This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.list_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyInfraEnforcementPointsApi.list_enforcement_point_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInfraEnforcementPointsApi.list_enforcement_point_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInfraEnforcementPointsApi.list_enforcement_point_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#list_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_site(site_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_site_with_http_info(site_id, opts)
      data
    end

    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.list_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.list_enforcement_point_for_site"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInfraEnforcementPointsApi.list_enforcement_point_for_site, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyInfraEnforcementPointsApi.list_enforcement_point_for_site, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#list_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. This is a deprecated API. DeploymentZone has been renamed to Site. Use PATCH /infra/sites/site-1/enforcement-points/enforcementpoint-1. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      patch_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      nil
    end

    # Patch a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. This is a deprecated API. DeploymentZone has been renamed to Site. Use PATCH /infra/sites/site-1/enforcement-points/enforcementpoint-1. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#patch_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_enforcement_point_for_site(site_id, enforcementpoint_id, enforcement_point, opts = {})
      patch_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts)
      nil
    end

    # Patch a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling PolicyInfraEnforcementPointsApi.patch_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#patch_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point
    # Read an Enforcement Point. This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point
    # Read an Enforcement Point. This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.read_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyInfraEnforcementPointsApi.read_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.read_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#read_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.read_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.read_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.read_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#read_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reload an Enforcement Point under Site
    # Reload an Enforcement Point under Site. This will read and update fabric configs from enforcement point. 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def reload_enforcement_point_for_site_reload(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = reload_enforcement_point_for_site_reload_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Reload an Enforcement Point under Site
    # Reload an Enforcement Point under Site. This will read and update fabric configs from enforcement point. 
    # @param site_id Site id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def reload_enforcement_point_for_site_reload_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyInfraEnforcementPointsApi.reload_enforcement_point_for_site_reload ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling PolicyInfraEnforcementPointsApi.reload_enforcement_point_for_site_reload"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyInfraEnforcementPointsApi.reload_enforcement_point_for_site_reload"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}?action=reload'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyInfraEnforcementPointsApi#reload_enforcement_point_for_site_reload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
