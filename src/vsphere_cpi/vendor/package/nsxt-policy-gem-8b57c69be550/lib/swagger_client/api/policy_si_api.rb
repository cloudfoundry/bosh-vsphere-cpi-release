=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicySiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Byod service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [ByodPolicyServiceInstance]
    def create_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      data, _status_code, _headers = create_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts)
      data
    end

    # Create service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Byod service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ByodPolicyServiceInstance, Fixnum, Hash)>] ByodPolicyServiceInstance data, response status code and response headers
    def create_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.create_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.create_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.create_byod_policy_service_instance"
      end
      # verify the required parameter 'byod_policy_service_instance' is set
      if @api_client.config.client_side_validation && byod_policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'byod_policy_service_instance' when calling PolicySiApi.create_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(byod_policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def create_or_update_redirection_policy(domain_id, redirection_policy_id, redirection_policy, opts = {})
      data, _status_code, _headers = create_or_update_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      data
    end

    # Create or update redirection policy
    # Create or update the redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def create_or_update_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_or_update_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.create_or_update_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.create_or_update_redirection_policy"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling PolicySiApi.create_or_update_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_or_update_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def create_or_update_redirection_rule(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      data, _status_code, _headers = create_or_update_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      data
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def create_or_update_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_or_update_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySiApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling PolicySiApi.create_or_update_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_or_update_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def create_or_update_service_reference(service_reference_id, service_reference, opts = {})
      data, _status_code, _headers = create_or_update_service_reference_with_http_info(service_reference_id, service_reference, opts)
      data
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def create_or_update_service_reference_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_or_update_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.create_or_update_service_reference"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling PolicySiApi.create_or_update_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_or_update_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def create_or_update_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts)
      data
    end

    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def create_or_update_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_or_update_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.create_or_update_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.create_or_update_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling PolicySiApi.create_or_update_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint' is set
      if @api_client.config.client_side_validation && virtual_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint' when calling PolicySiApi.create_or_update_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_or_update_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance
    # Create service instance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceInstance]
    def create_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      data, _status_code, _headers = create_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts)
      data
    end

    # Create service instance
    # Create service instance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceInstance, Fixnum, Hash)>] PolicyServiceInstance data, response status code and response headers
    def create_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.create_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.create_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.create_policy_service_instance"
      end
      # verify the required parameter 'policy_service_instance' is set
      if @api_client.config.client_side_validation && policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_instance' when calling PolicySiApi.create_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def create_policy_service_profile(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      data, _status_code, _headers = create_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      data
    end

    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def create_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.create_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySiApi.create_policy_service_profile"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling PolicySiApi.create_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def create_service_chain(service_chain_id, policy_service_chain, opts = {})
      data, _status_code, _headers = create_service_chain_with_http_info(service_chain_id, policy_service_chain, opts)
      data
    end

    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def create_service_chain_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySiApi.create_service_chain"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling PolicySiApi.create_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Service Definition on given enforcement point.
    # Create a Service Definition on given enforcement point.
    # @param enforcement_point_id Enforcement point id
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def create_service_definition(enforcement_point_id, service_definition, opts = {})
      data, _status_code, _headers = create_service_definition_with_http_info(enforcement_point_id, service_definition, opts)
      data
    end

    # Create a Service Definition on given enforcement point.
    # Create a Service Definition on given enforcement point.
    # @param enforcement_point_id Enforcement point id
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def create_service_definition_with_http_info(enforcement_point_id, service_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySiApi.create_service_definition"
      end
      # verify the required parameter 'service_definition' is set
      if @api_client.config.client_side_validation && service_definition.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition' when calling PolicySiApi.create_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_definition)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance endpoint
    # Create service instance endpoint with given request if not exist. Modification of service instance endpoint is not allowed. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceEndpoint]
    def create_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      data, _status_code, _headers = create_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts)
      data
    end

    # Create service instance endpoint
    # Create service instance endpoint with given request if not exist. Modification of service instance endpoint is not allowed. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceEndpoint, Fixnum, Hash)>] ServiceInstanceEndpoint data, response status code and response headers
    def create_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.create_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling PolicySiApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint' is set
      if @api_client.config.client_side_validation && service_instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint' when calling PolicySiApi.create_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#create_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete BYOD policy service instance
    # Delete BYOD policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      delete_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Delete BYOD policy service instance
    # Delete BYOD policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.delete_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.delete_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.delete_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_chain(service_chain_id, opts = {})
      delete_policy_service_chain_with_http_info(service_chain_id, opts)
      nil
    end

    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_policy_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySiApi.delete_policy_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_policy_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete policy service instance
    # Delete policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      delete_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Delete policy service instance
    # Delete policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.delete_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.delete_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.delete_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete policy service instance endpoint
    # Delete policy service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      delete_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts)
      nil
    end

    # Delete policy service instance endpoint
    # Delete policy service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_policy_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.delete_policy_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.delete_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.delete_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling PolicySiApi.delete_policy_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_policy_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_profile(service_reference_id, service_profile_id, opts = {})
      delete_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts)
      nil
    end

    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.delete_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySiApi.delete_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_policy(domain_id, redirection_policy_id, opts = {})
      delete_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts)
      nil
    end

    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.delete_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.delete_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_rule(domain_id, redirection_policy_id, rule_id, opts = {})
      delete_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      nil
    end

    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.delete_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.delete_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySiApi.delete_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing Service Definition on the given enforcement point 
    # Delete an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_definition(enforcement_point_id, service_definition_id, opts = {})
      delete_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts)
      nil
    end

    # Delete an existing Service Definition on the given enforcement point 
    # Delete an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySiApi.delete_service_definition"
      end
      # verify the required parameter 'service_definition_id' is set
      if @api_client.config.client_side_validation && service_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition_id' when calling PolicySiApi.delete_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions/{service-definition-id}'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'service-definition-id' + '}', service_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_reference(service_reference_id, opts = {})
      delete_service_reference_with_http_info(service_reference_id, opts)
      nil
    end

    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_reference_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.delete_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete virtual endpoint
    # Delete virtual endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      delete_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts)
      nil
    end

    # Delete virtual endpoint
    # Delete virtual endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.delete_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.delete_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.delete_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling PolicySiApi.delete_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#delete_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for all runtimes associated with this PolicyServiceInstance
    # Get statistics for all data NICs on all runtimes associated with this PolicyServiceInstance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyServiceInstanceStatistics]
    def get_policy_service_instance_statistics(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_policy_service_instance_statistics_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Get statistics for all runtimes associated with this PolicyServiceInstance
    # Get statistics for all data NICs on all runtimes associated with this PolicyServiceInstance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyServiceInstanceStatistics, Fixnum, Hash)>] PolicyServiceInstanceStatistics data, response status code and response headers
    def get_policy_service_instance_statistics_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.get_policy_service_instance_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.get_policy_service_instance_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.get_policy_service_instance_statistics"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.get_policy_service_instance_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstanceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#get_policy_service_instance_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceProfileGroups]
    def get_policy_service_profile_groups(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = get_policy_service_profile_groups_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceProfileGroups, Fixnum, Hash)>] ServiceProfileGroups data, response status code and response headers
    def get_policy_service_profile_groups_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.get_policy_service_profile_groups ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.get_policy_service_profile_groups"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySiApi.get_policy_service_profile_groups"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/group-associations'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfileGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#get_policy_service_profile_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read all BYOD service instance objects under a tier-0
    # Read all BYOD service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ByodPolicyServiceInstanceListResult]
    def list_byod_policy_service_instances_for_tier0(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_byod_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read all BYOD service instance objects under a tier-0
    # Read all BYOD service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ByodPolicyServiceInstanceListResult, Fixnum, Hash)>] ByodPolicyServiceInstanceListResult data, response status code and response headers
    def list_byod_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_byod_policy_service_instances_for_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.list_byod_policy_service_instances_for_tier0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.list_byod_policy_service_instances_for_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_byod_policy_service_instances_for_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_byod_policy_service_instances_for_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_byod_policy_service_instances_for_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceChainMappingListResult]
    def list_policy_service_chain_mappings(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = list_policy_service_chain_mappings_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceChainMappingListResult, Fixnum, Hash)>] ServiceChainMappingListResult data, response status code and response headers
    def list_policy_service_chain_mappings_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_policy_service_chain_mappings ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.list_policy_service_chain_mappings"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySiApi.list_policy_service_chain_mappings"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/service-chain-mappings'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChainMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_policy_service_chain_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceChainListResult]
    def list_policy_service_chains(opts = {})
      data, _status_code, _headers = list_policy_service_chains_with_http_info(opts)
      data
    end

    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceChainListResult, Fixnum, Hash)>] PolicyServiceChainListResult data, response status code and response headers
    def list_policy_service_chains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_policy_service_chains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_policy_service_chains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_policy_service_chains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-chains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_policy_service_chains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service instance endpoint
    # List all service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceInstanceEndpointListResult]
    def list_policy_service_instance_endpoints(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = list_policy_service_instance_endpoints_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # List all service instance endpoint
    # List all service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceInstanceEndpointListResult, Fixnum, Hash)>] ServiceInstanceEndpointListResult data, response status code and response headers
    def list_policy_service_instance_endpoints_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_policy_service_instance_endpoints ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.list_policy_service_instance_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.list_policy_service_instance_endpoints"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.list_policy_service_instance_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_policy_service_instance_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_policy_service_instance_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_policy_service_instance_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceProfileListResult]
    def list_policy_service_profiles(service_reference_id, opts = {})
      data, _status_code, _headers = list_policy_service_profiles_with_http_info(service_reference_id, opts)
      data
    end

    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceProfileListResult, Fixnum, Hash)>] PolicyServiceProfileListResult data, response status code and response headers
    def list_policy_service_profiles_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_policy_service_profiles ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.list_policy_service_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_policy_service_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_policy_service_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_policy_service_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policys for a domain
    # List redirection policys for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies(domain_id, opts = {})
      data, _status_code, _headers = list_redirection_policies_with_http_info(domain_id, opts)
      data
    end

    # List redirection policys for a domain
    # List redirection policys for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_redirection_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.list_redirection_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_redirection_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_redirection_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_redirection_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionRuleListResult]
    def list_redirection_rules(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = list_redirection_rules_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionRuleListResult, Fixnum, Hash)>] RedirectionRuleListResult data, response status code and response headers
    def list_redirection_rules_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_redirection_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.list_redirection_rules"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.list_redirection_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_redirection_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_redirection_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_redirection_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all Service Definitions registered on given enforcement point.
    # List all Service Definitions registered on given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionServiceListResult]
    def list_service_definitions(enforcement_point_id, opts = {})
      data, _status_code, _headers = list_service_definitions_with_http_info(enforcement_point_id, opts)
      data
    end

    # List all Service Definitions registered on given enforcement point.
    # List all Service Definitions registered on given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionServiceListResult, Fixnum, Hash)>] ServiceInsertionServiceListResult data, response status code and response headers
    def list_service_definitions_with_http_info(enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_service_definitions ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySiApi.list_service_definitions"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_service_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceReferenceListResult]
    def list_service_references(opts = {})
      data, _status_code, _headers = list_service_references_with_http_info(opts)
      data
    end

    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceReferenceListResult, Fixnum, Hash)>] ServiceReferenceListResult data, response status code and response headers
    def list_service_references_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_service_references ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_service_references, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_service_references, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-references'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReferenceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_service_references\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all virtual endpoints
    # List all virtual endpoints
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualEndpointListResult]
    def list_virtual_endpoints_for_tier0(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_virtual_endpoints_for_tier0_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List all virtual endpoints
    # List all virtual endpoints
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualEndpointListResult, Fixnum, Hash)>] VirtualEndpointListResult data, response status code and response headers
    def list_virtual_endpoints_for_tier0_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.list_virtual_endpoints_for_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.list_virtual_endpoints_for_tier0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.list_virtual_endpoints_for_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_virtual_endpoints_for_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.list_virtual_endpoints_for_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#list_virtual_endpoints_for_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      patch_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts)
      nil
    end

    # Create service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.patch_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.patch_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.patch_byod_policy_service_instance"
      end
      # verify the required parameter 'byod_policy_service_instance' is set
      if @api_client.config.client_side_validation && byod_policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'byod_policy_service_instance' when calling PolicySiApi.patch_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(byod_policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance
    # Create Service Instance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      patch_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts)
      nil
    end

    # Create service instance
    # Create Service Instance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.patch_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.patch_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.patch_policy_service_instance"
      end
      # verify the required parameter 'policy_service_instance' is set
      if @api_client.config.client_side_validation && policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_instance' when calling PolicySiApi.patch_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_service_profile(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      patch_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      nil
    end

    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.patch_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySiApi.patch_policy_service_profile"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling PolicySiApi.patch_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_policy(domain_id, redirection_policy_id, redirection_policy, opts = {})
      patch_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      nil
    end

    # Create or update redirection policy
    # Create or update the redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.patch_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.patch_redirection_policy"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling PolicySiApi.patch_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_rule(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      patch_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      nil
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.patch_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.patch_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySiApi.patch_redirection_rule"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling PolicySiApi.patch_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_chain(service_chain_id, policy_service_chain, opts = {})
      patch_service_chain_with_http_info(service_chain_id, policy_service_chain, opts)
      nil
    end

    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_chain_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySiApi.patch_service_chain"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling PolicySiApi.patch_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance endpoint
    # Create Service instance endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      patch_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts)
      nil
    end

    # Create service instance endpoint
    # Create Service instance endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling PolicySiApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint' is set
      if @api_client.config.client_side_validation && service_instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint' when calling PolicySiApi.patch_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_reference(service_reference_id, service_reference, opts = {})
      patch_service_reference_with_http_info(service_reference_id, service_reference, opts)
      nil
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_reference_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.patch_service_reference"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling PolicySiApi.patch_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      patch_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts)
      nil
    end

    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.patch_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.patch_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.patch_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling PolicySiApi.patch_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint' is set
      if @api_client.config.client_side_validation && virtual_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint' when calling PolicySiApi.patch_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#patch_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read all service instance objects under a tier-0
    # Read all service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceInstanceListResult]
    def read_all_policy_service_instances_for_tier0(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_all_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read all service instance objects under a tier-0
    # Read all service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceInstanceListResult, Fixnum, Hash)>] PolicyServiceInstanceListResult data, response status code and response headers
    def read_all_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_all_policy_service_instances_for_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.read_all_policy_service_instances_for_tier0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.read_all_policy_service_instances_for_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.read_all_policy_service_instances_for_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.read_all_policy_service_instances_for_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_all_policy_service_instances_for_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read byod service instance
    # Read byod service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [ByodPolicyServiceInstance]
    def read_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = read_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Read byod service instance
    # Read byod service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ByodPolicyServiceInstance, Fixnum, Hash)>] ByodPolicyServiceInstance data, response status code and response headers
    def read_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.read_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.read_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.read_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read partner service identified by provided name
    # Read the specific partner service identified by provided name.
    # @param service_name Name of the service
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def read_partner_service(service_name, opts = {})
      data, _status_code, _headers = read_partner_service_with_http_info(service_name, opts)
      data
    end

    # Read partner service identified by provided name
    # Read the specific partner service identified by provided name.
    # @param service_name Name of the service
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def read_partner_service_with_http_info(service_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_partner_service ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling PolicySiApi.read_partner_service"
      end
      # resource path
      local_var_path = '/infra/partner-services/{service-name}'.sub('{' + 'service-name' + '}', service_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_partner_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read partner services
    # Read all the partner services available for service insertion
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceInsertionServiceListResult]
    def read_partner_services(opts = {})
      data, _status_code, _headers = read_partner_services_with_http_info(opts)
      data
    end

    # Read partner services
    # Read all the partner services available for service insertion
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceInsertionServiceListResult, Fixnum, Hash)>] ServiceInsertionServiceListResult data, response status code and response headers
    def read_partner_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_partner_services ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.read_partner_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicySiApi.read_partner_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/partner-services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_partner_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service instance
    # Read service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceInstance]
    def read_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = read_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Read service instance
    # Read service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceInstance, Fixnum, Hash)>] PolicyServiceInstance data, response status code and response headers
    def read_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.read_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.read_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.read_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service instance endpoint
    # Read service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceEndpoint]
    def read_policy_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      data, _status_code, _headers = read_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts)
      data
    end

    # Read service instance endpoint
    # Read service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceEndpoint, Fixnum, Hash)>] ServiceInstanceEndpoint data, response status code and response headers
    def read_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_policy_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.read_policy_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.read_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.read_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling PolicySiApi.read_policy_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_policy_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def read_policy_service_profile(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = read_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def read_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.read_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling PolicySiApi.read_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def read_redirection_policy(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = read_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def read_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.read_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.read_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def read_redirection_rule(domain_id, redirection_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def read_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicySiApi.read_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling PolicySiApi.read_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicySiApi.read_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def read_service_chain(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_chain_with_http_info(service_chain_id, opts)
      data
    end

    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def read_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling PolicySiApi.read_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Service Definition with given service-definition-id.
    # Read Service Definition with given service-definition-id. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def read_service_definition(enforcement_point_id, service_definition_id, opts = {})
      data, _status_code, _headers = read_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts)
      data
    end

    # Read Service Definition with given service-definition-id.
    # Read Service Definition with given service-definition-id. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def read_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySiApi.read_service_definition"
      end
      # verify the required parameter 'service_definition_id' is set
      if @api_client.config.client_side_validation && service_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition_id' when calling PolicySiApi.read_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions/{service-definition-id}'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'service-definition-id' + '}', service_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def read_service_reference(service_reference_id, opts = {})
      data, _status_code, _headers = read_service_reference_with_http_info(service_reference_id, opts)
      data
    end

    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def read_service_reference_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling PolicySiApi.read_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read virtual endpoint
    # Read virtual endpoint with given id under given Tier0.
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def read_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      data, _status_code, _headers = read_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts)
      data
    end

    # Read virtual endpoint
    # Read virtual endpoint with given id under given Tier0.
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def read_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.read_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.read_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.read_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling PolicySiApi.read_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#read_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Renew the authentication tokens
    # Use this API when an alarm complaining JWT expiry is raised while deploying partner service VM. The OVF for partner service needs to be downloaded from partner services provider. It might be possible that the authentication token for this communication is expired when the service VM deployment starts. That will either require re-login through UI or use of this API. Certain authentication and authorization steps are internally processed in order to enable communication with partner service provider. This API offers the functionality to re-establish communication with partner services provider. This API needs open id and access token to be passed as headers. Those can be obtained from CSP authorize API. Please make sure to pass headers - Authorization:<Bearer ACCESS_TOKEN> and X-NSX-OpenId:<OPEN_ID>. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renew_authentication_tokens_for_policy_service_instance_reauth(tier_0_id, locale_service_id, service_instance_id, opts = {})
      renew_authentication_tokens_for_policy_service_instance_reauth_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Renew the authentication tokens
    # Use this API when an alarm complaining JWT expiry is raised while deploying partner service VM. The OVF for partner service needs to be downloaded from partner services provider. It might be possible that the authentication token for this communication is expired when the service VM deployment starts. That will either require re-login through UI or use of this API. Certain authentication and authorization steps are internally processed in order to enable communication with partner service provider. This API offers the functionality to re-establish communication with partner services provider. This API needs open id and access token to be passed as headers. Those can be obtained from CSP authorize API. Please make sure to pass headers - Authorization:&lt;Bearer ACCESS_TOKEN&gt; and X-NSX-OpenId:&lt;OPEN_ID&gt;. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renew_authentication_tokens_for_policy_service_instance_reauth_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.renew_authentication_tokens_for_policy_service_instance_reauth ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicySiApi.renew_authentication_tokens_for_policy_service_instance_reauth"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicySiApi.renew_authentication_tokens_for_policy_service_instance_reauth"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling PolicySiApi.renew_authentication_tokens_for_policy_service_instance_reauth"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}?action=reauth'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#renew_authentication_tokens_for_policy_service_instance_reauth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing Service Definition on the given enforcement point 
    # Update an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def update_service_definition(enforcement_point_id, service_definition_id, service_definition, opts = {})
      data, _status_code, _headers = update_service_definition_with_http_info(enforcement_point_id, service_definition_id, service_definition, opts)
      data
    end

    # Update an existing Service Definition on the given enforcement point 
    # Update an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def update_service_definition_with_http_info(enforcement_point_id, service_definition_id, service_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicySiApi.update_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling PolicySiApi.update_service_definition"
      end
      # verify the required parameter 'service_definition_id' is set
      if @api_client.config.client_side_validation && service_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition_id' when calling PolicySiApi.update_service_definition"
      end
      # verify the required parameter 'service_definition' is set
      if @api_client.config.client_side_validation && service_definition.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition' when calling PolicySiApi.update_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions/{service-definition-id}'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'service-definition-id' + '}', service_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_definition)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicySiApi#update_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
