=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyMonitoringApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Group Monitoring Profile Binding
    # API will delete Group Monitoring Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      delete_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Group Monitoring Profile Binding
    # API will delete Group Monitoring Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.delete_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyMonitoringApi.delete_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyMonitoringApi.delete_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.delete_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#delete_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Infra Port Monitoring Profile Binding Profile
    # API will delete Infra Port Monitoring Profile Binding Profile.
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_port_monitoring_binding(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      delete_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Infra Port Monitoring Profile Binding Profile
    # API will delete Infra Port Monitoring Profile Binding Profile.
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.delete_infra_port_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.delete_infra_port_monitoring_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyMonitoringApi.delete_infra_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.delete_infra_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#delete_infra_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Infra Segment Monitoring Profile Binding Profile
    # API will delete Infra Segment Monitoring Profile Binding Profile.
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_monitoring_binding(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      delete_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Infra Segment Monitoring Profile Binding Profile
    # API will delete Infra Segment Monitoring Profile Binding Profile.
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.delete_infra_segment_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.delete_infra_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.delete_infra_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#delete_infra_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Monitoring Profile Binding Profile
    # API will delete Port Monitoring Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_monitoring_binding(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      delete_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Port Monitoring Profile Binding Profile
    # API will delete Port Monitoring Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.delete_port_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.delete_port_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.delete_port_monitoring_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyMonitoringApi.delete_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.delete_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#delete_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Segment Monitoring Profile Binding Profile
    # API will delete Segment Monitoring Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment_monitoring_binding(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      delete_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Segment Monitoring Profile Binding Profile
    # API will delete Segment Monitoring Profile Binding Profile.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.delete_segment_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.delete_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.delete_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.delete_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#delete_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Group Monitoring Profile Binding Map
    # API will get Group Monitoring Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [GroupMonitoringProfileBindingMap]
    def get_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Group Monitoring Profile Binding Map
    # API will get Group Monitoring Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMonitoringProfileBindingMap, Fixnum, Hash)>] GroupMonitoringProfileBindingMap data, response status code and response headers
    def get_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.get_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyMonitoringApi.get_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyMonitoringApi.get_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.get_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#get_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Infra Port Monitoring Profile Binding Map
    # API will get Infra Port Monitoring Profile Binding Map. 
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortMonitoringProfileBindingMap]
    def get_infra_port_monitoring_binding(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Infra Port Monitoring Profile Binding Map
    # API will get Infra Port Monitoring Profile Binding Map. 
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMonitoringProfileBindingMap, Fixnum, Hash)>] PortMonitoringProfileBindingMap data, response status code and response headers
    def get_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.get_infra_port_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.get_infra_port_monitoring_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyMonitoringApi.get_infra_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.get_infra_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#get_infra_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Infra Segment Monitoring Profile Binding Map
    # API will get Infra Segment Monitoring Profile Binding Map. 
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentMonitoringProfileBindingMap]
    def get_infra_segment_monitoring_binding(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Infra Segment Monitoring Profile Binding Map
    # API will get Infra Segment Monitoring Profile Binding Map. 
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentMonitoringProfileBindingMap, Fixnum, Hash)>] SegmentMonitoringProfileBindingMap data, response status code and response headers
    def get_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.get_infra_segment_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.get_infra_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.get_infra_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#get_infra_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Port Monitoring Profile Binding Map
    # API will get Port Monitoring Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PortMonitoringProfileBindingMap]
    def get_port_monitoring_binding(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Port Monitoring Profile Binding Map
    # API will get Port Monitoring Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMonitoringProfileBindingMap, Fixnum, Hash)>] PortMonitoringProfileBindingMap data, response status code and response headers
    def get_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.get_port_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.get_port_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.get_port_monitoring_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyMonitoringApi.get_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.get_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#get_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Segment Monitoring Profile Binding Map
    # API will get Segment Monitoring Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [SegmentMonitoringProfileBindingMap]
    def get_segment_monitoring_binding(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Segment Monitoring Profile Binding Map
    # API will get Segment Monitoring Profile Binding Map. 
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentMonitoringProfileBindingMap, Fixnum, Hash)>] SegmentMonitoringProfileBindingMap data, response status code and response headers
    def get_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.get_segment_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.get_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.get_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.get_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#get_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Group Monitoring Profile Binding Maps
    # API will list all Group Monitoring Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupMonitoringProfileBindingMapListResult]
    def list_group_monitoring_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_group_monitoring_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Group Monitoring Profile Binding Maps
    # API will list all Group Monitoring Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupMonitoringProfileBindingMapListResult, Fixnum, Hash)>] GroupMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_group_monitoring_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.list_group_monitoring_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyMonitoringApi.list_group_monitoring_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyMonitoringApi.list_group_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_group_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_group_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#list_group_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Infra Port Monitoring Profile Binding Maps
    # API will list all Infra Port Monitoring Profile Binding Maps in current port id. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMonitoringProfileBindingMapListResult]
    def list_infra_port_monitoring_bindings(infra_segment_id, infra_port_id, opts = {})
      data, _status_code, _headers = list_infra_port_monitoring_bindings_with_http_info(infra_segment_id, infra_port_id, opts)
      data
    end

    # List Infra Port Monitoring Profile Binding Maps
    # API will list all Infra Port Monitoring Profile Binding Maps in current port id. 
    # @param infra_segment_id 
    # @param infra_port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMonitoringProfileBindingMapListResult, Fixnum, Hash)>] PortMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_infra_port_monitoring_bindings_with_http_info(infra_segment_id, infra_port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.list_infra_port_monitoring_bindings ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.list_infra_port_monitoring_bindings"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyMonitoringApi.list_infra_port_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_infra_port_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_infra_port_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#list_infra_port_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Infra Segment Monitoring Profile Binding Maps
    # API will list all Infra Segment Monitoring Profile Binding Maps in current segment id. 
    # @param infra_segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentMonitoringProfileBindingMapListResult]
    def list_infra_segment_monitoring_bindings(infra_segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_monitoring_bindings_with_http_info(infra_segment_id, opts)
      data
    end

    # List Infra Segment Monitoring Profile Binding Maps
    # API will list all Infra Segment Monitoring Profile Binding Maps in current segment id. 
    # @param infra_segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentMonitoringProfileBindingMapListResult, Fixnum, Hash)>] SegmentMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_infra_segment_monitoring_bindings_with_http_info(infra_segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.list_infra_segment_monitoring_bindings ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.list_infra_segment_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_infra_segment_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_infra_segment_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#list_infra_segment_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Monitoring Profile Binding Maps
    # API will list all Port Monitoring Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMonitoringProfileBindingMapListResult]
    def list_port_monitoring_bindings(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = list_port_monitoring_bindings_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List Port Monitoring Profile Binding Maps
    # API will list all Port Monitoring Profile Binding Maps in current port id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMonitoringProfileBindingMapListResult, Fixnum, Hash)>] PortMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_port_monitoring_bindings_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.list_port_monitoring_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.list_port_monitoring_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.list_port_monitoring_bindings"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyMonitoringApi.list_port_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_port_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_port_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#list_port_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Segment Monitoring Profile Binding Maps
    # API will list all Segment Monitoring Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentMonitoringProfileBindingMapListResult]
    def list_segment_monitoring_bindings(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_segment_monitoring_bindings_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Segment Monitoring Profile Binding Maps
    # API will list all Segment Monitoring Profile Binding Maps in current segment id. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentMonitoringProfileBindingMapListResult, Fixnum, Hash)>] SegmentMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_segment_monitoring_bindings_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.list_segment_monitoring_bindings ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.list_segment_monitoring_bindings"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.list_segment_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_segment_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyMonitoringApi.list_segment_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#list_segment_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Group Monitoring Profile Binding Map
    # API will create group monitoring profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      patch_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Group Monitoring Profile Binding Map
    # API will create group monitoring profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.patch_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyMonitoringApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyMonitoringApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map' when calling PolicyMonitoringApi.patch_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#patch_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Infra Port Monitoring Profile Binding Map
    # API will create Infra Port Monitoring Profile Binding Map.
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_port_monitoring_binding(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      patch_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Infra Port Monitoring Profile Binding Map
    # API will create Infra Port Monitoring Profile Binding Map.
    # @param infra_segment_id Infra Segment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.patch_infra_port_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.patch_infra_port_monitoring_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyMonitoringApi.patch_infra_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.patch_infra_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map' when calling PolicyMonitoringApi.patch_infra_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#patch_infra_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Infra Segment Monitoring Profile Binding Map
    # API will create infra segment monitoring profile binding map.
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_monitoring_binding(infra_segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      patch_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Infra Segment Monitoring Profile Binding Map
    # API will create infra segment monitoring profile binding map.
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.patch_infra_segment_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.patch_infra_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.patch_infra_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map' when calling PolicyMonitoringApi.patch_infra_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#patch_infra_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Port Monitoring Profile Binding Map
    # API will create Port Monitoring Profile Binding Map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_monitoring_binding(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      patch_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Port Monitoring Profile Binding Map
    # API will create Port Monitoring Profile Binding Map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.patch_port_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.patch_port_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.patch_port_monitoring_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyMonitoringApi.patch_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.patch_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map' when calling PolicyMonitoringApi.patch_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#patch_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Segment Monitoring Profile Binding Map
    # API will create segment monitoring profile binding map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment_monitoring_binding(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      patch_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Segment Monitoring Profile Binding Map
    # API will create segment monitoring profile binding map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.patch_segment_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.patch_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.patch_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.patch_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map' when calling PolicyMonitoringApi.patch_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#patch_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Group Monitoring Profile Binding Map
    # API will update Group Monitoring Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [GroupMonitoringProfileBindingMap]
    def update_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts)
      data
    end

    # Update Group Monitoring Profile Binding Map
    # API will update Group Monitoring Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMonitoringProfileBindingMap, Fixnum, Hash)>] GroupMonitoringProfileBindingMap data, response status code and response headers
    def update_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.update_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyMonitoringApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyMonitoringApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map' when calling PolicyMonitoringApi.update_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#update_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Infra Port Monitoring Profile Binding Map
    # API will update Infra Port Monitoring Profile Binding Map.
    # @param infra_segment_id InfraSegment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortMonitoringProfileBindingMap]
    def update_infra_port_monitoring_binding(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts)
      data
    end

    # Update Infra Port Monitoring Profile Binding Map
    # API will update Infra Port Monitoring Profile Binding Map.
    # @param infra_segment_id InfraSegment ID
    # @param infra_port_id Infra Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMonitoringProfileBindingMap, Fixnum, Hash)>] PortMonitoringProfileBindingMap data, response status code and response headers
    def update_infra_port_monitoring_binding_with_http_info(infra_segment_id, infra_port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.update_infra_port_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.update_infra_port_monitoring_binding"
      end
      # verify the required parameter 'infra_port_id' is set
      if @api_client.config.client_side_validation && infra_port_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_port_id' when calling PolicyMonitoringApi.update_infra_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.update_infra_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map' when calling PolicyMonitoringApi.update_infra_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'infra-port-id' + '}', infra_port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#update_infra_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Infra Segment Monitoring Profile Binding Map
    # API will update Infra Segment Monitoring Profile Binding Map.
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentMonitoringProfileBindingMap]
    def update_infra_segment_monitoring_binding(infra_segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts)
      data
    end

    # Update Infra Segment Monitoring Profile Binding Map
    # API will update Infra Segment Monitoring Profile Binding Map.
    # @param infra_segment_id Infra Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentMonitoringProfileBindingMap, Fixnum, Hash)>] SegmentMonitoringProfileBindingMap data, response status code and response headers
    def update_infra_segment_monitoring_binding_with_http_info(infra_segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.update_infra_segment_monitoring_binding ...'
      end
      # verify the required parameter 'infra_segment_id' is set
      if @api_client.config.client_side_validation && infra_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'infra_segment_id' when calling PolicyMonitoringApi.update_infra_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.update_infra_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map' when calling PolicyMonitoringApi.update_infra_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/segments/{infra-segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'infra-segment-id' + '}', infra_segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#update_infra_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Port Monitoring Profile Binding Map
    # API will update Port Monitoring Profile Binding Map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PortMonitoringProfileBindingMap]
    def update_port_monitoring_binding(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts)
      data
    end

    # Update Port Monitoring Profile Binding Map
    # API will update Port Monitoring Profile Binding Map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param port_id Port ID
    # @param port_monitoring_profile_binding_map_id Port Monitoring Profile Binding Map ID
    # @param port_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMonitoringProfileBindingMap, Fixnum, Hash)>] PortMonitoringProfileBindingMap data, response status code and response headers
    def update_port_monitoring_binding_with_http_info(tier_1_id, segment_id, port_id, port_monitoring_profile_binding_map_id, port_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.update_port_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.update_port_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.update_port_monitoring_binding"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyMonitoringApi.update_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.update_port_monitoring_binding"
      end
      # verify the required parameter 'port_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && port_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'port_monitoring_profile_binding_map' when calling PolicyMonitoringApi.update_port_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-monitoring-profile-binding-maps/{port-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'port-monitoring-profile-binding-map-id' + '}', port_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#update_port_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Segment Monitoring Profile Binding Map
    # API will update Segment Monitoring Profile Binding Map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentMonitoringProfileBindingMap]
    def update_segment_monitoring_binding(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts)
      data
    end

    # Update Segment Monitoring Profile Binding Map
    # API will update Segment Monitoring Profile Binding Map.
    # @param tier_1_id Tier-1 ID
    # @param segment_id Segment ID
    # @param segment_monitoring_profile_binding_map_id Segment Monitoring Profile Binding Map ID
    # @param segment_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentMonitoringProfileBindingMap, Fixnum, Hash)>] SegmentMonitoringProfileBindingMap data, response status code and response headers
    def update_segment_monitoring_binding_with_http_info(tier_1_id, segment_id, segment_monitoring_profile_binding_map_id, segment_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyMonitoringApi.update_segment_monitoring_binding ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyMonitoringApi.update_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyMonitoringApi.update_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map_id' when calling PolicyMonitoringApi.update_segment_monitoring_binding"
      end
      # verify the required parameter 'segment_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && segment_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_monitoring_profile_binding_map' when calling PolicyMonitoringApi.update_segment_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-monitoring-profile-binding-maps/{segment-monitoring-profile-binding-map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'segment-monitoring-profile-binding-map-id' + '}', segment_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyMonitoringApi#update_segment_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
