=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyConnectivityServiceInterfacesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a service interface
    # If an interface with the interface-id is not already present, create a new interface. Modification of service interface is not allowed. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param interface_id 
    # @param service_interface 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInterface]
    def create_service_interface(tier_0_id, locale_service_id, interface_id, service_interface, opts = {})
      data, _status_code, _headers = create_service_interface_with_http_info(tier_0_id, locale_service_id, interface_id, service_interface, opts)
      data
    end

    # Create a service interface
    # If an interface with the interface-id is not already present, create a new interface. Modification of service interface is not allowed. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param interface_id 
    # @param service_interface 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInterface, Fixnum, Hash)>] ServiceInterface data, response status code and response headers
    def create_service_interface_with_http_info(tier_0_id, locale_service_id, interface_id, service_interface, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityServiceInterfacesApi.create_service_interface ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling PolicyConnectivityServiceInterfacesApi.create_service_interface"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling PolicyConnectivityServiceInterfacesApi.create_service_interface"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling PolicyConnectivityServiceInterfacesApi.create_service_interface"
      end
      # verify the required parameter 'service_interface' is set
      if @api_client.config.client_side_validation && service_interface.nil?
        fail ArgumentError, "Missing the required parameter 'service_interface' when calling PolicyConnectivityServiceInterfacesApi.create_service_interface"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-interfaces/{interface-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_interface)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInterface')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityServiceInterfacesApi#create_service_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
