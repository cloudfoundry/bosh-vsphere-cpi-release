=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyConnectivityDhcpApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def create_or_replace_dhcp_relay_config(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts)
      data
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, replace the DHCP relay config instance with this object. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def create_or_replace_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.create_or_replace_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling PolicyConnectivityDhcpApi.create_or_replace_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling PolicyConnectivityDhcpApi.create_or_replace_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#create_or_replace_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def create_or_replace_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling PolicyConnectivityDhcpApi.create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling PolicyConnectivityDhcpApi.create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      delete_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      nil
    end

    # Delete DHCP relay configuration
    # Delete DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.delete_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling PolicyConnectivityDhcpApi.delete_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#delete_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_server_config(dhcp_server_config_id, opts = {})
      delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.delete_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling PolicyConnectivityDhcpApi.delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpRelayConfigListResult]
    def list_dhcp_relay_config(opts = {})
      data, _status_code, _headers = list_dhcp_relay_config_with_http_info(opts)
      data
    end

    # List DHCP relay config instances
    # Paginated list of all DHCP relay config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpRelayConfigListResult, Fixnum, Hash)>] DhcpRelayConfigListResult data, response status code and response headers
    def list_dhcp_relay_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.list_dhcp_relay_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivityDhcpApi.list_dhcp_relay_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivityDhcpApi.list_dhcp_relay_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-relay-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#list_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def list_dhcp_server_config(opts = {})
      data, _status_code, _headers = list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivityDhcpApi.list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivityDhcpApi.list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_relay_config(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      patch_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts)
      nil
    end

    # Create or update DHCP relay configuration
    # If DHCP relay config with the dhcp-relay-config-id is not already present, create a new DHCP relay config instance. If it already exists, update the DHCP relay config instance with specified attributes. 
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param dhcp_relay_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_relay_config_with_http_info(dhcp_relay_config_id, dhcp_relay_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.patch_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling PolicyConnectivityDhcpApi.patch_dhcp_relay_config"
      end
      # verify the required parameter 'dhcp_relay_config' is set
      if @api_client.config.client_side_validation && dhcp_relay_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config' when calling PolicyConnectivityDhcpApi.patch_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_relay_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#patch_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.patch_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling PolicyConnectivityDhcpApi.patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling PolicyConnectivityDhcpApi.patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpRelayConfig]
    def read_dhcp_relay_config(dhcp_relay_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts)
      data
    end

    # Read DHCP relay configuration
    # Read DHCP relay configuration
    # @param dhcp_relay_config_id DHCP relay config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpRelayConfig, Fixnum, Hash)>] DhcpRelayConfig data, response status code and response headers
    def read_dhcp_relay_config_with_http_info(dhcp_relay_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.read_dhcp_relay_config ...'
      end
      # verify the required parameter 'dhcp_relay_config_id' is set
      if @api_client.config.client_side_validation && dhcp_relay_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_relay_config_id' when calling PolicyConnectivityDhcpApi.read_dhcp_relay_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-relay-configs/{dhcp-relay-config-id}'.sub('{' + 'dhcp-relay-config-id' + '}', dhcp_relay_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpRelayConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#read_dhcp_relay_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivityDhcpApi.read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling PolicyConnectivityDhcpApi.read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivityDhcpApi#read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
