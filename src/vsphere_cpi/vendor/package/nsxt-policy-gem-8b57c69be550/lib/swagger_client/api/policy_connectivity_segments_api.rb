=begin
#${NODE TITLE} API

#VMware ${NODE TITLE} REST API

OpenAPI spec version: (unknown version)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class PolicyConnectivitySegmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a infra segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, replace the segment with this object. 
    # @param segment_id Segment ID
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [Segment]
    def create_or_replace_infra_segment(segment_id, segment, opts = {})
      data, _status_code, _headers = create_or_replace_infra_segment_with_http_info(segment_id, segment, opts)
      data
    end

    # Create or update a infra segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, replace the segment with this object. 
    # @param segment_id Segment ID
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Segment, Fixnum, Hash)>] Segment data, response status code and response headers
    def create_or_replace_infra_segment_with_http_info(segment_id, segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.create_or_replace_infra_segment ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.create_or_replace_infra_segment"
      end
      # verify the required parameter 'segment' is set
      if @api_client.config.client_side_validation && segment.nil?
        fail ArgumentError, "Missing the required parameter 'segment' when calling PolicyConnectivitySegmentsApi.create_or_replace_infra_segment"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Segment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#create_or_replace_infra_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, replace the segment with this object. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [Segment]
    def create_or_replace_segment(tier_1_id, segment_id, segment, opts = {})
      data, _status_code, _headers = create_or_replace_segment_with_http_info(tier_1_id, segment_id, segment, opts)
      data
    end

    # Create or update a segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, replace the segment with this object. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Segment, Fixnum, Hash)>] Segment data, response status code and response headers
    def create_or_replace_segment_with_http_info(tier_1_id, segment_id, segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.create_or_replace_segment ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.create_or_replace_segment"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.create_or_replace_segment"
      end
      # verify the required parameter 'segment' is set
      if @api_client.config.client_side_validation && segment.nil?
        fail ArgumentError, "Missing the required parameter 'segment' when calling PolicyConnectivitySegmentsApi.create_or_replace_segment"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Segment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#create_or_replace_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a static ARP config
    # Create static ARP config with Tier-1 and segment IDs provided if it doesn't exist, update with provided config if it's already created. 
    # @param tier_1_id 
    # @param segment_id 
    # @param static_arp_config 
    # @param [Hash] opts the optional parameters
    # @return [StaticARPConfig]
    def create_or_replace_static_arp_config(tier_1_id, segment_id, static_arp_config, opts = {})
      data, _status_code, _headers = create_or_replace_static_arp_config_with_http_info(tier_1_id, segment_id, static_arp_config, opts)
      data
    end

    # Create or update a static ARP config
    # Create static ARP config with Tier-1 and segment IDs provided if it doesn&#39;t exist, update with provided config if it&#39;s already created. 
    # @param tier_1_id 
    # @param segment_id 
    # @param static_arp_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticARPConfig, Fixnum, Hash)>] StaticARPConfig data, response status code and response headers
    def create_or_replace_static_arp_config_with_http_info(tier_1_id, segment_id, static_arp_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.create_or_replace_static_arp_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.create_or_replace_static_arp_config"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.create_or_replace_static_arp_config"
      end
      # verify the required parameter 'static_arp_config' is set
      if @api_client.config.client_side_validation && static_arp_config.nil?
        fail ArgumentError, "Missing the required parameter 'static_arp_config' when calling PolicyConnectivitySegmentsApi.create_or_replace_static_arp_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/static-arp'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_arp_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticARPConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#create_or_replace_static_arp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service segment
    # A service segment with the service-segment-id is created. Modification of service segment is not supported. 
    # @param service_segment_id Service Segment ID
    # @param service_segment 
    # @param [Hash] opts the optional parameters
    # @return [ServiceSegment]
    def create_service_segment(service_segment_id, service_segment, opts = {})
      data, _status_code, _headers = create_service_segment_with_http_info(service_segment_id, service_segment, opts)
      data
    end

    # Create service segment
    # A service segment with the service-segment-id is created. Modification of service segment is not supported. 
    # @param service_segment_id Service Segment ID
    # @param service_segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceSegment, Fixnum, Hash)>] ServiceSegment data, response status code and response headers
    def create_service_segment_with_http_info(service_segment_id, service_segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.create_service_segment ...'
      end
      # verify the required parameter 'service_segment_id' is set
      if @api_client.config.client_side_validation && service_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_segment_id' when calling PolicyConnectivitySegmentsApi.create_service_segment"
      end
      # verify the required parameter 'service_segment' is set
      if @api_client.config.client_side_validation && service_segment.nil?
        fail ArgumentError, "Missing the required parameter 'service_segment' when calling PolicyConnectivitySegmentsApi.create_service_segment"
      end
      # resource path
      local_var_path = '/infra/segments/service-segments/{service-segment-id}'.sub('{' + 'service-segment-id' + '}', service_segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_segment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceSegment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#create_service_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete infra segment
    # Delete infra segment
    # @param segment_id Segment ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment(segment_id, opts = {})
      delete_infra_segment_with_http_info(segment_id, opts)
      nil
    end

    # Delete infra segment
    # Delete infra segment
    # @param segment_id Segment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.delete_infra_segment ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.delete_infra_segment"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#delete_infra_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete segment
    # Delete segment
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_segment(tier_1_id, segment_id, opts = {})
      delete_segment_with_http_info(tier_1_id, segment_id, opts)
      nil
    end

    # Delete segment
    # Delete segment
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_segment_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.delete_segment ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.delete_segment"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.delete_segment"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#delete_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service Segment
    # Delete Service Segment with given ID
    # @param service_segment_id Service Segment ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_segment(service_segment_id, opts = {})
      delete_service_segment_with_http_info(service_segment_id, opts)
      nil
    end

    # Delete Service Segment
    # Delete Service Segment with given ID
    # @param service_segment_id Service Segment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_segment_with_http_info(service_segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.delete_service_segment ...'
      end
      # verify the required parameter 'service_segment_id' is set
      if @api_client.config.client_side_validation && service_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_segment_id' when calling PolicyConnectivitySegmentsApi.delete_service_segment"
      end
      # resource path
      local_var_path = '/infra/segments/service-segments/{service-segment-id}'.sub('{' + 'service-segment-id' + '}', service_segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#delete_service_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete static ARP config
    # Delete static ARP config
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_static_arp_config(tier_1_id, segment_id, opts = {})
      delete_static_arp_config_with_http_info(tier_1_id, segment_id, opts)
      nil
    end

    # Delete static ARP config
    # Delete static ARP config
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_static_arp_config_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.delete_static_arp_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.delete_static_arp_config"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.delete_static_arp_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/static-arp'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#delete_static_arp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortStatistics]
    def get_infra_segment_port_statistics(segments_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_statistics_with_http_info(segments_id, port_id, opts)
      data
    end

    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def get_infra_segment_port_statistics_with_http_info(segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.get_infra_segment_port_statistics ...'
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PolicyConnectivitySegmentsApi.get_infra_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsApi.get_infra_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_infra_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_infra_segment_port_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#get_infra_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment statistics information
    # Get infra segment statistics information. 
    # @param segments_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentStatistics]
    def get_infra_segment_statistics(segments_id, opts = {})
      data, _status_code, _headers = get_infra_segment_statistics_with_http_info(segments_id, opts)
      data
    end

    # Get infra segment statistics information
    # Get infra segment statistics information. 
    # @param segments_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentStatistics, Fixnum, Hash)>] SegmentStatistics data, response status code and response headers
    def get_infra_segment_statistics_with_http_info(segments_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.get_infra_segment_statistics ...'
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PolicyConnectivitySegmentsApi.get_infra_segment_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_infra_segment_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_infra_segment_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segments-id}/statistics'.sub('{' + 'segments-id' + '}', segments_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#get_infra_segment_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get segment port statistics information
    # Get tier1 segment port statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortStatistics]
    def get_segment_port_statistics(tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = get_segment_port_statistics_with_http_info(tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get segment port statistics information
    # Get tier1 segment port statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def get_segment_port_statistics_with_http_info(tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.get_segment_port_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.get_segment_port_statistics"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PolicyConnectivitySegmentsApi.get_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PolicyConnectivitySegmentsApi.get_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_segment_port_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#get_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get segment statistics information
    # Get tier1 segment statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentStatistics]
    def get_segment_statistics(tier_1_id, segments_id, opts = {})
      data, _status_code, _headers = get_segment_statistics_with_http_info(tier_1_id, segments_id, opts)
      data
    end

    # Get segment statistics information
    # Get tier1 segment statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentStatistics, Fixnum, Hash)>] SegmentStatistics data, response status code and response headers
    def get_segment_statistics_with_http_info(tier_1_id, segments_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.get_segment_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.get_segment_statistics"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PolicyConnectivitySegmentsApi.get_segment_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_segment_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.get_segment_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segments-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#get_segment_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all segments under infra
    # Paginated list of all segments under infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentListResult]
    def list_all_infra_segments(opts = {})
      data, _status_code, _headers = list_all_infra_segments_with_http_info(opts)
      data
    end

    # List all segments under infra
    # Paginated list of all segments under infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentListResult, Fixnum, Hash)>] SegmentListResult data, response status code and response headers
    def list_all_infra_segments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.list_all_infra_segments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.list_all_infra_segments, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.list_all_infra_segments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#list_all_infra_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all segments under tier-1 instance
    # Paginated list of all segments under Tier-1 instance 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentListResult]
    def list_segments(tier_1_id, opts = {})
      data, _status_code, _headers = list_segments_with_http_info(tier_1_id, opts)
      data
    end

    # List all segments under tier-1 instance
    # Paginated list of all segments under Tier-1 instance 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentListResult, Fixnum, Hash)>] SegmentListResult data, response status code and response headers
    def list_segments_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.list_segments ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.list_segments"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.list_segments, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.list_segments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#list_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service Segments
    # Paginated list of all Service Segments 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceSegmentListResult]
    def list_service_segments(opts = {})
      data, _status_code, _headers = list_service_segments_with_http_info(opts)
      data
    end

    # List Service Segments
    # Paginated list of all Service Segments 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceSegmentListResult, Fixnum, Hash)>] ServiceSegmentListResult data, response status code and response headers
    def list_service_segments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.list_service_segments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.list_service_segments, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyConnectivitySegmentsApi.list_service_segments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/service-segments'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceSegmentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#list_service_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, update the segment with specified attributes. 
    # @param segment_id Segment ID
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment(segment_id, segment, opts = {})
      patch_infra_segment_with_http_info(segment_id, segment, opts)
      nil
    end

    # Create or update a segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, update the segment with specified attributes. 
    # @param segment_id Segment ID
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_with_http_info(segment_id, segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.patch_infra_segment ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.patch_infra_segment"
      end
      # verify the required parameter 'segment' is set
      if @api_client.config.client_side_validation && segment.nil?
        fail ArgumentError, "Missing the required parameter 'segment' when calling PolicyConnectivitySegmentsApi.patch_infra_segment"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#patch_infra_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, update the segment with specified attributes. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_segment(tier_1_id, segment_id, segment, opts = {})
      patch_segment_with_http_info(tier_1_id, segment_id, segment, opts)
      nil
    end

    # Create or update a segment
    # If segment with the segment-id is not already present, create a new segment. If it already exists, update the segment with specified attributes. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_segment_with_http_info(tier_1_id, segment_id, segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.patch_segment ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.patch_segment"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.patch_segment"
      end
      # verify the required parameter 'segment' is set
      if @api_client.config.client_side_validation && segment.nil?
        fail ArgumentError, "Missing the required parameter 'segment' when calling PolicyConnectivitySegmentsApi.patch_segment"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#patch_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a service segment
    # A service segment with the service-segment-id is created. Modification of service segment is not supported. 
    # @param service_segment_id Service Segment ID
    # @param service_segment 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_segment(service_segment_id, service_segment, opts = {})
      patch_service_segment_with_http_info(service_segment_id, service_segment, opts)
      nil
    end

    # Create a service segment
    # A service segment with the service-segment-id is created. Modification of service segment is not supported. 
    # @param service_segment_id Service Segment ID
    # @param service_segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_segment_with_http_info(service_segment_id, service_segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.patch_service_segment ...'
      end
      # verify the required parameter 'service_segment_id' is set
      if @api_client.config.client_side_validation && service_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_segment_id' when calling PolicyConnectivitySegmentsApi.patch_service_segment"
      end
      # verify the required parameter 'service_segment' is set
      if @api_client.config.client_side_validation && service_segment.nil?
        fail ArgumentError, "Missing the required parameter 'service_segment' when calling PolicyConnectivitySegmentsApi.patch_service_segment"
      end
      # resource path
      local_var_path = '/infra/segments/service-segments/{service-segment-id}'.sub('{' + 'service-segment-id' + '}', service_segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_segment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#patch_service_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a static ARP config
    # Create static ARP config with Tier-1 and segment IDs provided if it doesn't exist, update with provided config if it's already created. 
    # @param tier_1_id 
    # @param segment_id 
    # @param static_arp_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_static_arp_config(tier_1_id, segment_id, static_arp_config, opts = {})
      patch_static_arp_config_with_http_info(tier_1_id, segment_id, static_arp_config, opts)
      nil
    end

    # Create or update a static ARP config
    # Create static ARP config with Tier-1 and segment IDs provided if it doesn&#39;t exist, update with provided config if it&#39;s already created. 
    # @param tier_1_id 
    # @param segment_id 
    # @param static_arp_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_static_arp_config_with_http_info(tier_1_id, segment_id, static_arp_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.patch_static_arp_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.patch_static_arp_config"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.patch_static_arp_config"
      end
      # verify the required parameter 'static_arp_config' is set
      if @api_client.config.client_side_validation && static_arp_config.nil?
        fail ArgumentError, "Missing the required parameter 'static_arp_config' when calling PolicyConnectivitySegmentsApi.patch_static_arp_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/static-arp'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_arp_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#patch_static_arp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra segment
    # Read infra segment
    # @param segment_id Segment ID
    # @param [Hash] opts the optional parameters
    # @return [Segment]
    def read_infra_segment(segment_id, opts = {})
      data, _status_code, _headers = read_infra_segment_with_http_info(segment_id, opts)
      data
    end

    # Read infra segment
    # Read infra segment
    # @param segment_id Segment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Segment, Fixnum, Hash)>] Segment data, response status code and response headers
    def read_infra_segment_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.read_infra_segment ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.read_infra_segment"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Segment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#read_infra_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read segment
    # Read segment
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [Segment]
    def read_segment(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = read_segment_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # Read segment
    # Read segment
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Segment, Fixnum, Hash)>] Segment data, response status code and response headers
    def read_segment_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.read_segment ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.read_segment"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.read_segment"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Segment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#read_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Service Segment
    # Read a Service Segment with the given id
    # @param service_segment_id Service Segment ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceSegment]
    def read_service_segment(service_segment_id, opts = {})
      data, _status_code, _headers = read_service_segment_with_http_info(service_segment_id, opts)
      data
    end

    # Read Service Segment
    # Read a Service Segment with the given id
    # @param service_segment_id Service Segment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceSegment, Fixnum, Hash)>] ServiceSegment data, response status code and response headers
    def read_service_segment_with_http_info(service_segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.read_service_segment ...'
      end
      # verify the required parameter 'service_segment_id' is set
      if @api_client.config.client_side_validation && service_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_segment_id' when calling PolicyConnectivitySegmentsApi.read_service_segment"
      end
      # resource path
      local_var_path = '/infra/segments/service-segments/{service-segment-id}'.sub('{' + 'service-segment-id' + '}', service_segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceSegment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#read_service_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read static ARP config
    # Read static ARP config
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [StaticARPConfig]
    def read_static_arp_config(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = read_static_arp_config_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # Read static ARP config
    # Read static ARP config
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticARPConfig, Fixnum, Hash)>] StaticARPConfig data, response status code and response headers
    def read_static_arp_config_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyConnectivitySegmentsApi.read_static_arp_config ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PolicyConnectivitySegmentsApi.read_static_arp_config"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PolicyConnectivitySegmentsApi.read_static_arp_config"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/static-arp'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticARPConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyConnectivitySegmentsApi#read_static_arp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
